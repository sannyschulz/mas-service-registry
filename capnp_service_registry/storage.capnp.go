// Code generated by capnpc-go. DO NOT EDIT.

package capnp_service_registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SturdyRefStored capnp.Struct

// SturdyRefStored_TypeID is the unique identifier for the type SturdyRefStored.
const SturdyRefStored_TypeID = 0xd0e34e1c95c7ef43

func NewSturdyRefStored(s *capnp.Segment) (SturdyRefStored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SturdyRefStored(st), err
}

func NewRootSturdyRefStored(s *capnp.Segment) (SturdyRefStored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SturdyRefStored(st), err
}

func ReadRootSturdyRefStored(msg *capnp.Message) (SturdyRefStored, error) {
	root, err := msg.Root()
	return SturdyRefStored(root.Struct()), err
}

func (s SturdyRefStored) String() string {
	str, _ := text.Marshal(0xd0e34e1c95c7ef43, capnp.Struct(s))
	return str
}

func (s SturdyRefStored) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRefStored) DecodeFromPtr(p capnp.Ptr) SturdyRefStored {
	return SturdyRefStored(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRefStored) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRefStored) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRefStored) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRefStored) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRefStored) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRefStored) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRefStored) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRefStored) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SturdyRefStored) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRefStored) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SturdyRefStored) Payload() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SturdyRefStored) HasPayload() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SturdyRefStored) PayloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetPayload(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SturdyRefStored) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SturdyRefStored) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SturdyRefStored) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// SturdyRefStored_List is a list of SturdyRefStored.
type SturdyRefStored_List = capnp.StructList[SturdyRefStored]

// NewSturdyRefStored creates a new list of SturdyRefStored.
func NewSturdyRefStored_List(s *capnp.Segment, sz int32) (SturdyRefStored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SturdyRefStored](l), err
}

// SturdyRefStored_Future is a wrapper for a SturdyRefStored promised by a client call.
type SturdyRefStored_Future struct{ *capnp.Future }

func (f SturdyRefStored_Future) Struct() (SturdyRefStored, error) {
	p, err := f.Future.Ptr()
	return SturdyRefStored(p.Struct()), err
}

type StorageEditor capnp.Client

// StorageEditor_TypeID is the unique identifier for the type StorageEditor.
const StorageEditor_TypeID = 0x9770dabea2ed8eec

func (c StorageEditor) AddSturdyRef(ctx context.Context, params func(StorageEditor_addSturdyRef_Params) error) (StorageEditor_addSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "addSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_addSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_addSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) GetSturdyRef(ctx context.Context, params func(StorageEditor_getSturdyRef_Params) error) (StorageEditor_getSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      1,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "getSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_getSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_getSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) ListSturdyRefsForUser(ctx context.Context, params func(StorageEditor_listSturdyRefsForUser_Params) error) (StorageEditor_listSturdyRefsForUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      2,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listSturdyRefsForUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_listSturdyRefsForUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_listSturdyRefsForUser_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) ListAllSturdyRefs(ctx context.Context, params func(StorageEditor_listAllSturdyRefs_Params) error) (StorageEditor_listAllSturdyRefs_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      3,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listAllSturdyRefs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_listAllSturdyRefs_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_listAllSturdyRefs_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) DeleteSturdyRef(ctx context.Context, params func(StorageEditor_deleteSturdyRef_Params) error) (StorageEditor_deleteSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      4,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "deleteSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_deleteSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_deleteSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StorageEditor) String() string {
	return "StorageEditor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StorageEditor) AddRef() StorageEditor {
	return StorageEditor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StorageEditor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StorageEditor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StorageEditor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StorageEditor) DecodeFromPtr(p capnp.Ptr) StorageEditor {
	return StorageEditor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StorageEditor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StorageEditor) IsSame(other StorageEditor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StorageEditor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StorageEditor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StorageEditor_Server is a StorageEditor with a local implementation.
type StorageEditor_Server interface {
	AddSturdyRef(context.Context, StorageEditor_addSturdyRef) error

	GetSturdyRef(context.Context, StorageEditor_getSturdyRef) error

	ListSturdyRefsForUser(context.Context, StorageEditor_listSturdyRefsForUser) error

	ListAllSturdyRefs(context.Context, StorageEditor_listAllSturdyRefs) error

	DeleteSturdyRef(context.Context, StorageEditor_deleteSturdyRef) error
}

// StorageEditor_NewServer creates a new Server from an implementation of StorageEditor_Server.
func StorageEditor_NewServer(s StorageEditor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StorageEditor_Methods(nil, s), s, c)
}

// StorageEditor_ServerToClient creates a new Client from an implementation of StorageEditor_Server.
// The caller is responsible for calling Release on the returned Client.
func StorageEditor_ServerToClient(s StorageEditor_Server) StorageEditor {
	return StorageEditor(capnp.NewClient(StorageEditor_NewServer(s)))
}

// StorageEditor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StorageEditor_Methods(methods []server.Method, s StorageEditor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "addSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddSturdyRef(ctx, StorageEditor_addSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      1,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "getSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSturdyRef(ctx, StorageEditor_getSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      2,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listSturdyRefsForUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListSturdyRefsForUser(ctx, StorageEditor_listSturdyRefsForUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      3,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listAllSturdyRefs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListAllSturdyRefs(ctx, StorageEditor_listAllSturdyRefs{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      4,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "deleteSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeleteSturdyRef(ctx, StorageEditor_deleteSturdyRef{call})
		},
	})

	return methods
}

// StorageEditor_addSturdyRef holds the state for a server call to StorageEditor.addSturdyRef.
// See server.Call for documentation.
type StorageEditor_addSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_addSturdyRef) Args() StorageEditor_addSturdyRef_Params {
	return StorageEditor_addSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_addSturdyRef) AllocResults() (StorageEditor_addSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(r), err
}

// StorageEditor_getSturdyRef holds the state for a server call to StorageEditor.getSturdyRef.
// See server.Call for documentation.
type StorageEditor_getSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_getSturdyRef) Args() StorageEditor_getSturdyRef_Params {
	return StorageEditor_getSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_getSturdyRef) AllocResults() (StorageEditor_getSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(r), err
}

// StorageEditor_listSturdyRefsForUser holds the state for a server call to StorageEditor.listSturdyRefsForUser.
// See server.Call for documentation.
type StorageEditor_listSturdyRefsForUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_listSturdyRefsForUser) Args() StorageEditor_listSturdyRefsForUser_Params {
	return StorageEditor_listSturdyRefsForUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_listSturdyRefsForUser) AllocResults() (StorageEditor_listSturdyRefsForUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Results(r), err
}

// StorageEditor_listAllSturdyRefs holds the state for a server call to StorageEditor.listAllSturdyRefs.
// See server.Call for documentation.
type StorageEditor_listAllSturdyRefs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_listAllSturdyRefs) Args() StorageEditor_listAllSturdyRefs_Params {
	return StorageEditor_listAllSturdyRefs_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_listAllSturdyRefs) AllocResults() (StorageEditor_listAllSturdyRefs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listAllSturdyRefs_Results(r), err
}

// StorageEditor_deleteSturdyRef holds the state for a server call to StorageEditor.deleteSturdyRef.
// See server.Call for documentation.
type StorageEditor_deleteSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_deleteSturdyRef) Args() StorageEditor_deleteSturdyRef_Params {
	return StorageEditor_deleteSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_deleteSturdyRef) AllocResults() (StorageEditor_deleteSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(r), err
}

// StorageEditor_List is a list of StorageEditor.
type StorageEditor_List = capnp.CapList[StorageEditor]

// NewStorageEditor_List creates a new list of StorageEditor.
func NewStorageEditor_List(s *capnp.Segment, sz int32) (StorageEditor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StorageEditor](l), err
}

type StorageEditor_addSturdyRef_Params capnp.Struct

// StorageEditor_addSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_addSturdyRef_Params.
const StorageEditor_addSturdyRef_Params_TypeID = 0x9ce5db24f2e15533

func NewStorageEditor_addSturdyRef_Params(s *capnp.Segment) (StorageEditor_addSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_addSturdyRef_Params(st), err
}

func NewRootStorageEditor_addSturdyRef_Params(s *capnp.Segment) (StorageEditor_addSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_addSturdyRef_Params(st), err
}

func ReadRootStorageEditor_addSturdyRef_Params(msg *capnp.Message) (StorageEditor_addSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_addSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_addSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x9ce5db24f2e15533, capnp.Struct(s))
	return str
}

func (s StorageEditor_addSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_addSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_addSturdyRef_Params {
	return StorageEditor_addSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_addSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_addSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_addSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_addSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_addSturdyRef_Params) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageEditor_addSturdyRef_Params) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_addSturdyRef_Params) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageEditor_addSturdyRef_Params) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageEditor_addSturdyRef_Params_List is a list of StorageEditor_addSturdyRef_Params.
type StorageEditor_addSturdyRef_Params_List = capnp.StructList[StorageEditor_addSturdyRef_Params]

// NewStorageEditor_addSturdyRef_Params creates a new list of StorageEditor_addSturdyRef_Params.
func NewStorageEditor_addSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_addSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_addSturdyRef_Params](l), err
}

// StorageEditor_addSturdyRef_Params_Future is a wrapper for a StorageEditor_addSturdyRef_Params promised by a client call.
type StorageEditor_addSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_addSturdyRef_Params_Future) Struct() (StorageEditor_addSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_addSturdyRef_Params(p.Struct()), err
}
func (p StorageEditor_addSturdyRef_Params_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type StorageEditor_addSturdyRef_Results capnp.Struct

// StorageEditor_addSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_addSturdyRef_Results.
const StorageEditor_addSturdyRef_Results_TypeID = 0xcdd7d69aee2dada4

func NewStorageEditor_addSturdyRef_Results(s *capnp.Segment) (StorageEditor_addSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(st), err
}

func NewRootStorageEditor_addSturdyRef_Results(s *capnp.Segment) (StorageEditor_addSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(st), err
}

func ReadRootStorageEditor_addSturdyRef_Results(msg *capnp.Message) (StorageEditor_addSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_addSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_addSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xcdd7d69aee2dada4, capnp.Struct(s))
	return str
}

func (s StorageEditor_addSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_addSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_addSturdyRef_Results {
	return StorageEditor_addSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_addSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_addSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_addSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_addSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_addSturdyRef_Results_List is a list of StorageEditor_addSturdyRef_Results.
type StorageEditor_addSturdyRef_Results_List = capnp.StructList[StorageEditor_addSturdyRef_Results]

// NewStorageEditor_addSturdyRef_Results creates a new list of StorageEditor_addSturdyRef_Results.
func NewStorageEditor_addSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_addSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_addSturdyRef_Results](l), err
}

// StorageEditor_addSturdyRef_Results_Future is a wrapper for a StorageEditor_addSturdyRef_Results promised by a client call.
type StorageEditor_addSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_addSturdyRef_Results_Future) Struct() (StorageEditor_addSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_addSturdyRef_Results(p.Struct()), err
}

type StorageEditor_getSturdyRef_Params capnp.Struct

// StorageEditor_getSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_getSturdyRef_Params.
const StorageEditor_getSturdyRef_Params_TypeID = 0x968c9bfbc19ef7b4

func NewStorageEditor_getSturdyRef_Params(s *capnp.Segment) (StorageEditor_getSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Params(st), err
}

func NewRootStorageEditor_getSturdyRef_Params(s *capnp.Segment) (StorageEditor_getSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Params(st), err
}

func ReadRootStorageEditor_getSturdyRef_Params(msg *capnp.Message) (StorageEditor_getSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_getSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_getSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x968c9bfbc19ef7b4, capnp.Struct(s))
	return str
}

func (s StorageEditor_getSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_getSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_getSturdyRef_Params {
	return StorageEditor_getSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_getSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_getSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_getSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_getSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_getSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_getSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_getSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_getSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_getSturdyRef_Params_List is a list of StorageEditor_getSturdyRef_Params.
type StorageEditor_getSturdyRef_Params_List = capnp.StructList[StorageEditor_getSturdyRef_Params]

// NewStorageEditor_getSturdyRef_Params creates a new list of StorageEditor_getSturdyRef_Params.
func NewStorageEditor_getSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_getSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_getSturdyRef_Params](l), err
}

// StorageEditor_getSturdyRef_Params_Future is a wrapper for a StorageEditor_getSturdyRef_Params promised by a client call.
type StorageEditor_getSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_getSturdyRef_Params_Future) Struct() (StorageEditor_getSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_getSturdyRef_Params(p.Struct()), err
}

type StorageEditor_getSturdyRef_Results capnp.Struct

// StorageEditor_getSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_getSturdyRef_Results.
const StorageEditor_getSturdyRef_Results_TypeID = 0xe509643d47807c2d

func NewStorageEditor_getSturdyRef_Results(s *capnp.Segment) (StorageEditor_getSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(st), err
}

func NewRootStorageEditor_getSturdyRef_Results(s *capnp.Segment) (StorageEditor_getSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(st), err
}

func ReadRootStorageEditor_getSturdyRef_Results(msg *capnp.Message) (StorageEditor_getSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_getSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_getSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xe509643d47807c2d, capnp.Struct(s))
	return str
}

func (s StorageEditor_getSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_getSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_getSturdyRef_Results {
	return StorageEditor_getSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_getSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_getSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_getSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_getSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_getSturdyRef_Results) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageEditor_getSturdyRef_Results) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_getSturdyRef_Results) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageEditor_getSturdyRef_Results) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageEditor_getSturdyRef_Results_List is a list of StorageEditor_getSturdyRef_Results.
type StorageEditor_getSturdyRef_Results_List = capnp.StructList[StorageEditor_getSturdyRef_Results]

// NewStorageEditor_getSturdyRef_Results creates a new list of StorageEditor_getSturdyRef_Results.
func NewStorageEditor_getSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_getSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_getSturdyRef_Results](l), err
}

// StorageEditor_getSturdyRef_Results_Future is a wrapper for a StorageEditor_getSturdyRef_Results promised by a client call.
type StorageEditor_getSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_getSturdyRef_Results_Future) Struct() (StorageEditor_getSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_getSturdyRef_Results(p.Struct()), err
}
func (p StorageEditor_getSturdyRef_Results_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type StorageEditor_listSturdyRefsForUser_Params capnp.Struct

// StorageEditor_listSturdyRefsForUser_Params_TypeID is the unique identifier for the type StorageEditor_listSturdyRefsForUser_Params.
const StorageEditor_listSturdyRefsForUser_Params_TypeID = 0xadb20e7070609f45

func NewStorageEditor_listSturdyRefsForUser_Params(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Params(st), err
}

func NewRootStorageEditor_listSturdyRefsForUser_Params(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Params(st), err
}

func ReadRootStorageEditor_listSturdyRefsForUser_Params(msg *capnp.Message) (StorageEditor_listSturdyRefsForUser_Params, error) {
	root, err := msg.Root()
	return StorageEditor_listSturdyRefsForUser_Params(root.Struct()), err
}

func (s StorageEditor_listSturdyRefsForUser_Params) String() string {
	str, _ := text.Marshal(0xadb20e7070609f45, capnp.Struct(s))
	return str
}

func (s StorageEditor_listSturdyRefsForUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listSturdyRefsForUser_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_listSturdyRefsForUser_Params {
	return StorageEditor_listSturdyRefsForUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listSturdyRefsForUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listSturdyRefsForUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listSturdyRefsForUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listSturdyRefsForUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listSturdyRefsForUser_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_listSturdyRefsForUser_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listSturdyRefsForUser_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_listSturdyRefsForUser_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_listSturdyRefsForUser_Params_List is a list of StorageEditor_listSturdyRefsForUser_Params.
type StorageEditor_listSturdyRefsForUser_Params_List = capnp.StructList[StorageEditor_listSturdyRefsForUser_Params]

// NewStorageEditor_listSturdyRefsForUser_Params creates a new list of StorageEditor_listSturdyRefsForUser_Params.
func NewStorageEditor_listSturdyRefsForUser_Params_List(s *capnp.Segment, sz int32) (StorageEditor_listSturdyRefsForUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listSturdyRefsForUser_Params](l), err
}

// StorageEditor_listSturdyRefsForUser_Params_Future is a wrapper for a StorageEditor_listSturdyRefsForUser_Params promised by a client call.
type StorageEditor_listSturdyRefsForUser_Params_Future struct{ *capnp.Future }

func (f StorageEditor_listSturdyRefsForUser_Params_Future) Struct() (StorageEditor_listSturdyRefsForUser_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listSturdyRefsForUser_Params(p.Struct()), err
}

type StorageEditor_listSturdyRefsForUser_Results capnp.Struct

// StorageEditor_listSturdyRefsForUser_Results_TypeID is the unique identifier for the type StorageEditor_listSturdyRefsForUser_Results.
const StorageEditor_listSturdyRefsForUser_Results_TypeID = 0xfa55621a4bbb397a

func NewStorageEditor_listSturdyRefsForUser_Results(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Results(st), err
}

func NewRootStorageEditor_listSturdyRefsForUser_Results(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Results(st), err
}

func ReadRootStorageEditor_listSturdyRefsForUser_Results(msg *capnp.Message) (StorageEditor_listSturdyRefsForUser_Results, error) {
	root, err := msg.Root()
	return StorageEditor_listSturdyRefsForUser_Results(root.Struct()), err
}

func (s StorageEditor_listSturdyRefsForUser_Results) String() string {
	str, _ := text.Marshal(0xfa55621a4bbb397a, capnp.Struct(s))
	return str
}

func (s StorageEditor_listSturdyRefsForUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listSturdyRefsForUser_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_listSturdyRefsForUser_Results {
	return StorageEditor_listSturdyRefsForUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listSturdyRefsForUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listSturdyRefsForUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listSturdyRefsForUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listSturdyRefsForUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listSturdyRefsForUser_Results) Sturdyrefs() (SturdyRefStored_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored_List(p.List()), err
}

func (s StorageEditor_listSturdyRefsForUser_Results) HasSturdyrefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listSturdyRefsForUser_Results) SetSturdyrefs(v SturdyRefStored_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyrefs sets the sturdyrefs field to a newly
// allocated SturdyRefStored_List, preferring placement in s's segment.
func (s StorageEditor_listSturdyRefsForUser_Results) NewSturdyrefs(n int32) (SturdyRefStored_List, error) {
	l, err := NewSturdyRefStored_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefStored_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// StorageEditor_listSturdyRefsForUser_Results_List is a list of StorageEditor_listSturdyRefsForUser_Results.
type StorageEditor_listSturdyRefsForUser_Results_List = capnp.StructList[StorageEditor_listSturdyRefsForUser_Results]

// NewStorageEditor_listSturdyRefsForUser_Results creates a new list of StorageEditor_listSturdyRefsForUser_Results.
func NewStorageEditor_listSturdyRefsForUser_Results_List(s *capnp.Segment, sz int32) (StorageEditor_listSturdyRefsForUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listSturdyRefsForUser_Results](l), err
}

// StorageEditor_listSturdyRefsForUser_Results_Future is a wrapper for a StorageEditor_listSturdyRefsForUser_Results promised by a client call.
type StorageEditor_listSturdyRefsForUser_Results_Future struct{ *capnp.Future }

func (f StorageEditor_listSturdyRefsForUser_Results_Future) Struct() (StorageEditor_listSturdyRefsForUser_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listSturdyRefsForUser_Results(p.Struct()), err
}

type StorageEditor_listAllSturdyRefs_Params capnp.Struct

// StorageEditor_listAllSturdyRefs_Params_TypeID is the unique identifier for the type StorageEditor_listAllSturdyRefs_Params.
const StorageEditor_listAllSturdyRefs_Params_TypeID = 0xa518a153042139c8

func NewStorageEditor_listAllSturdyRefs_Params(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_listAllSturdyRefs_Params(st), err
}

func NewRootStorageEditor_listAllSturdyRefs_Params(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_listAllSturdyRefs_Params(st), err
}

func ReadRootStorageEditor_listAllSturdyRefs_Params(msg *capnp.Message) (StorageEditor_listAllSturdyRefs_Params, error) {
	root, err := msg.Root()
	return StorageEditor_listAllSturdyRefs_Params(root.Struct()), err
}

func (s StorageEditor_listAllSturdyRefs_Params) String() string {
	str, _ := text.Marshal(0xa518a153042139c8, capnp.Struct(s))
	return str
}

func (s StorageEditor_listAllSturdyRefs_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listAllSturdyRefs_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_listAllSturdyRefs_Params {
	return StorageEditor_listAllSturdyRefs_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listAllSturdyRefs_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listAllSturdyRefs_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listAllSturdyRefs_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listAllSturdyRefs_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_listAllSturdyRefs_Params_List is a list of StorageEditor_listAllSturdyRefs_Params.
type StorageEditor_listAllSturdyRefs_Params_List = capnp.StructList[StorageEditor_listAllSturdyRefs_Params]

// NewStorageEditor_listAllSturdyRefs_Params creates a new list of StorageEditor_listAllSturdyRefs_Params.
func NewStorageEditor_listAllSturdyRefs_Params_List(s *capnp.Segment, sz int32) (StorageEditor_listAllSturdyRefs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_listAllSturdyRefs_Params](l), err
}

// StorageEditor_listAllSturdyRefs_Params_Future is a wrapper for a StorageEditor_listAllSturdyRefs_Params promised by a client call.
type StorageEditor_listAllSturdyRefs_Params_Future struct{ *capnp.Future }

func (f StorageEditor_listAllSturdyRefs_Params_Future) Struct() (StorageEditor_listAllSturdyRefs_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listAllSturdyRefs_Params(p.Struct()), err
}

type StorageEditor_listAllSturdyRefs_Results capnp.Struct

// StorageEditor_listAllSturdyRefs_Results_TypeID is the unique identifier for the type StorageEditor_listAllSturdyRefs_Results.
const StorageEditor_listAllSturdyRefs_Results_TypeID = 0x9248a5211394ad54

func NewStorageEditor_listAllSturdyRefs_Results(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listAllSturdyRefs_Results(st), err
}

func NewRootStorageEditor_listAllSturdyRefs_Results(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listAllSturdyRefs_Results(st), err
}

func ReadRootStorageEditor_listAllSturdyRefs_Results(msg *capnp.Message) (StorageEditor_listAllSturdyRefs_Results, error) {
	root, err := msg.Root()
	return StorageEditor_listAllSturdyRefs_Results(root.Struct()), err
}

func (s StorageEditor_listAllSturdyRefs_Results) String() string {
	str, _ := text.Marshal(0x9248a5211394ad54, capnp.Struct(s))
	return str
}

func (s StorageEditor_listAllSturdyRefs_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listAllSturdyRefs_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_listAllSturdyRefs_Results {
	return StorageEditor_listAllSturdyRefs_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listAllSturdyRefs_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listAllSturdyRefs_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listAllSturdyRefs_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listAllSturdyRefs_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listAllSturdyRefs_Results) Sturdyrefs() (SturdyRefStored_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored_List(p.List()), err
}

func (s StorageEditor_listAllSturdyRefs_Results) HasSturdyrefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listAllSturdyRefs_Results) SetSturdyrefs(v SturdyRefStored_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyrefs sets the sturdyrefs field to a newly
// allocated SturdyRefStored_List, preferring placement in s's segment.
func (s StorageEditor_listAllSturdyRefs_Results) NewSturdyrefs(n int32) (SturdyRefStored_List, error) {
	l, err := NewSturdyRefStored_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefStored_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// StorageEditor_listAllSturdyRefs_Results_List is a list of StorageEditor_listAllSturdyRefs_Results.
type StorageEditor_listAllSturdyRefs_Results_List = capnp.StructList[StorageEditor_listAllSturdyRefs_Results]

// NewStorageEditor_listAllSturdyRefs_Results creates a new list of StorageEditor_listAllSturdyRefs_Results.
func NewStorageEditor_listAllSturdyRefs_Results_List(s *capnp.Segment, sz int32) (StorageEditor_listAllSturdyRefs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listAllSturdyRefs_Results](l), err
}

// StorageEditor_listAllSturdyRefs_Results_Future is a wrapper for a StorageEditor_listAllSturdyRefs_Results promised by a client call.
type StorageEditor_listAllSturdyRefs_Results_Future struct{ *capnp.Future }

func (f StorageEditor_listAllSturdyRefs_Results_Future) Struct() (StorageEditor_listAllSturdyRefs_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listAllSturdyRefs_Results(p.Struct()), err
}

type StorageEditor_deleteSturdyRef_Params capnp.Struct

// StorageEditor_deleteSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_deleteSturdyRef_Params.
const StorageEditor_deleteSturdyRef_Params_TypeID = 0xf4b2adaeac2fc134

func NewStorageEditor_deleteSturdyRef_Params(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_deleteSturdyRef_Params(st), err
}

func NewRootStorageEditor_deleteSturdyRef_Params(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_deleteSturdyRef_Params(st), err
}

func ReadRootStorageEditor_deleteSturdyRef_Params(msg *capnp.Message) (StorageEditor_deleteSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_deleteSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_deleteSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xf4b2adaeac2fc134, capnp.Struct(s))
	return str
}

func (s StorageEditor_deleteSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_deleteSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_deleteSturdyRef_Params {
	return StorageEditor_deleteSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_deleteSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_deleteSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_deleteSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_deleteSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_deleteSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_deleteSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_deleteSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_deleteSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_deleteSturdyRef_Params_List is a list of StorageEditor_deleteSturdyRef_Params.
type StorageEditor_deleteSturdyRef_Params_List = capnp.StructList[StorageEditor_deleteSturdyRef_Params]

// NewStorageEditor_deleteSturdyRef_Params creates a new list of StorageEditor_deleteSturdyRef_Params.
func NewStorageEditor_deleteSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_deleteSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_deleteSturdyRef_Params](l), err
}

// StorageEditor_deleteSturdyRef_Params_Future is a wrapper for a StorageEditor_deleteSturdyRef_Params promised by a client call.
type StorageEditor_deleteSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_deleteSturdyRef_Params_Future) Struct() (StorageEditor_deleteSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_deleteSturdyRef_Params(p.Struct()), err
}

type StorageEditor_deleteSturdyRef_Results capnp.Struct

// StorageEditor_deleteSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_deleteSturdyRef_Results.
const StorageEditor_deleteSturdyRef_Results_TypeID = 0x8bfbf4be38627800

func NewStorageEditor_deleteSturdyRef_Results(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(st), err
}

func NewRootStorageEditor_deleteSturdyRef_Results(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(st), err
}

func ReadRootStorageEditor_deleteSturdyRef_Results(msg *capnp.Message) (StorageEditor_deleteSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_deleteSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_deleteSturdyRef_Results) String() string {
	str, _ := text.Marshal(0x8bfbf4be38627800, capnp.Struct(s))
	return str
}

func (s StorageEditor_deleteSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_deleteSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_deleteSturdyRef_Results {
	return StorageEditor_deleteSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_deleteSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_deleteSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_deleteSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_deleteSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_deleteSturdyRef_Results_List is a list of StorageEditor_deleteSturdyRef_Results.
type StorageEditor_deleteSturdyRef_Results_List = capnp.StructList[StorageEditor_deleteSturdyRef_Results]

// NewStorageEditor_deleteSturdyRef_Results creates a new list of StorageEditor_deleteSturdyRef_Results.
func NewStorageEditor_deleteSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_deleteSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_deleteSturdyRef_Results](l), err
}

// StorageEditor_deleteSturdyRef_Results_Future is a wrapper for a StorageEditor_deleteSturdyRef_Results promised by a client call.
type StorageEditor_deleteSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_deleteSturdyRef_Results_Future) Struct() (StorageEditor_deleteSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_deleteSturdyRef_Results(p.Struct()), err
}

type StorageReader capnp.Client

// StorageReader_TypeID is the unique identifier for the type StorageReader.
const StorageReader_TypeID = 0xeb1ed22a5561aae3

func (c StorageReader) GetSturdyRef(ctx context.Context, params func(StorageReader_getSturdyRef_Params) error) (StorageReader_getSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeb1ed22a5561aae3,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageReader",
			MethodName:    "getSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageReader_getSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageReader_getSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageReader) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StorageReader) String() string {
	return "StorageReader(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StorageReader) AddRef() StorageReader {
	return StorageReader(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StorageReader) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StorageReader) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StorageReader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StorageReader) DecodeFromPtr(p capnp.Ptr) StorageReader {
	return StorageReader(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StorageReader) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StorageReader) IsSame(other StorageReader) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StorageReader) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StorageReader) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StorageReader_Server is a StorageReader with a local implementation.
type StorageReader_Server interface {
	GetSturdyRef(context.Context, StorageReader_getSturdyRef) error
}

// StorageReader_NewServer creates a new Server from an implementation of StorageReader_Server.
func StorageReader_NewServer(s StorageReader_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StorageReader_Methods(nil, s), s, c)
}

// StorageReader_ServerToClient creates a new Client from an implementation of StorageReader_Server.
// The caller is responsible for calling Release on the returned Client.
func StorageReader_ServerToClient(s StorageReader_Server) StorageReader {
	return StorageReader(capnp.NewClient(StorageReader_NewServer(s)))
}

// StorageReader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StorageReader_Methods(methods []server.Method, s StorageReader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeb1ed22a5561aae3,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageReader",
			MethodName:    "getSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSturdyRef(ctx, StorageReader_getSturdyRef{call})
		},
	})

	return methods
}

// StorageReader_getSturdyRef holds the state for a server call to StorageReader.getSturdyRef.
// See server.Call for documentation.
type StorageReader_getSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageReader_getSturdyRef) Args() StorageReader_getSturdyRef_Params {
	return StorageReader_getSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageReader_getSturdyRef) AllocResults() (StorageReader_getSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(r), err
}

// StorageReader_List is a list of StorageReader.
type StorageReader_List = capnp.CapList[StorageReader]

// NewStorageReader_List creates a new list of StorageReader.
func NewStorageReader_List(s *capnp.Segment, sz int32) (StorageReader_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StorageReader](l), err
}

type StorageReader_getSturdyRef_Params capnp.Struct

// StorageReader_getSturdyRef_Params_TypeID is the unique identifier for the type StorageReader_getSturdyRef_Params.
const StorageReader_getSturdyRef_Params_TypeID = 0xa478d6877d52b582

func NewStorageReader_getSturdyRef_Params(s *capnp.Segment) (StorageReader_getSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Params(st), err
}

func NewRootStorageReader_getSturdyRef_Params(s *capnp.Segment) (StorageReader_getSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Params(st), err
}

func ReadRootStorageReader_getSturdyRef_Params(msg *capnp.Message) (StorageReader_getSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageReader_getSturdyRef_Params(root.Struct()), err
}

func (s StorageReader_getSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xa478d6877d52b582, capnp.Struct(s))
	return str
}

func (s StorageReader_getSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageReader_getSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageReader_getSturdyRef_Params {
	return StorageReader_getSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageReader_getSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageReader_getSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageReader_getSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageReader_getSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageReader_getSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageReader_getSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageReader_getSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageReader_getSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageReader_getSturdyRef_Params_List is a list of StorageReader_getSturdyRef_Params.
type StorageReader_getSturdyRef_Params_List = capnp.StructList[StorageReader_getSturdyRef_Params]

// NewStorageReader_getSturdyRef_Params creates a new list of StorageReader_getSturdyRef_Params.
func NewStorageReader_getSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageReader_getSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageReader_getSturdyRef_Params](l), err
}

// StorageReader_getSturdyRef_Params_Future is a wrapper for a StorageReader_getSturdyRef_Params promised by a client call.
type StorageReader_getSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageReader_getSturdyRef_Params_Future) Struct() (StorageReader_getSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageReader_getSturdyRef_Params(p.Struct()), err
}

type StorageReader_getSturdyRef_Results capnp.Struct

// StorageReader_getSturdyRef_Results_TypeID is the unique identifier for the type StorageReader_getSturdyRef_Results.
const StorageReader_getSturdyRef_Results_TypeID = 0xd0dff216087c0481

func NewStorageReader_getSturdyRef_Results(s *capnp.Segment) (StorageReader_getSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(st), err
}

func NewRootStorageReader_getSturdyRef_Results(s *capnp.Segment) (StorageReader_getSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(st), err
}

func ReadRootStorageReader_getSturdyRef_Results(msg *capnp.Message) (StorageReader_getSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageReader_getSturdyRef_Results(root.Struct()), err
}

func (s StorageReader_getSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xd0dff216087c0481, capnp.Struct(s))
	return str
}

func (s StorageReader_getSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageReader_getSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageReader_getSturdyRef_Results {
	return StorageReader_getSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageReader_getSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageReader_getSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageReader_getSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageReader_getSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageReader_getSturdyRef_Results) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageReader_getSturdyRef_Results) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageReader_getSturdyRef_Results) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageReader_getSturdyRef_Results) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageReader_getSturdyRef_Results_List is a list of StorageReader_getSturdyRef_Results.
type StorageReader_getSturdyRef_Results_List = capnp.StructList[StorageReader_getSturdyRef_Results]

// NewStorageReader_getSturdyRef_Results creates a new list of StorageReader_getSturdyRef_Results.
func NewStorageReader_getSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageReader_getSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageReader_getSturdyRef_Results](l), err
}

// StorageReader_getSturdyRef_Results_Future is a wrapper for a StorageReader_getSturdyRef_Results promised by a client call.
type StorageReader_getSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageReader_getSturdyRef_Results_Future) Struct() (StorageReader_getSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageReader_getSturdyRef_Results(p.Struct()), err
}
func (p StorageReader_getSturdyRef_Results_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type UserStored capnp.Struct

// UserStored_TypeID is the unique identifier for the type UserStored.
const UserStored_TypeID = 0x8ef7e2521d75bf04

func NewUserStored(s *capnp.Segment) (UserStored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserStored(st), err
}

func NewRootUserStored(s *capnp.Segment) (UserStored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserStored(st), err
}

func ReadRootUserStored(msg *capnp.Message) (UserStored, error) {
	root, err := msg.Root()
	return UserStored(root.Struct()), err
}

func (s UserStored) String() string {
	str, _ := text.Marshal(0x8ef7e2521d75bf04, capnp.Struct(s))
	return str
}

func (s UserStored) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserStored) DecodeFromPtr(p capnp.Ptr) UserStored {
	return UserStored(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserStored) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserStored) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserStored) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserStored) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserStored) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserStored) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserStored) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserStored) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserStored) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserStored) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserStored) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserStored) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserStored_List is a list of UserStored.
type UserStored_List = capnp.StructList[UserStored]

// NewUserStored creates a new list of UserStored.
func NewUserStored_List(s *capnp.Segment, sz int32) (UserStored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UserStored](l), err
}

// UserStored_Future is a wrapper for a UserStored promised by a client call.
type UserStored_Future struct{ *capnp.Future }

func (f UserStored_Future) Struct() (UserStored, error) {
	p, err := f.Future.Ptr()
	return UserStored(p.Struct()), err
}

type UserEditor capnp.Client

// UserEditor_TypeID is the unique identifier for the type UserEditor.
const UserEditor_TypeID = 0x84761835db7b4b72

func (c UserEditor) NewUser(ctx context.Context, params func(UserEditor_newUser_Params) error) (UserEditor_newUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      0,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "newUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_newUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_newUser_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) DeleteUser(ctx context.Context, params func(UserEditor_deleteUser_Params) error) (UserEditor_deleteUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      1,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "deleteUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_deleteUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_deleteUser_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) FindByToken(ctx context.Context, params func(UserEditor_findByToken_Params) error) (UserEditor_findByToken_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      2,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findByToken",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_findByToken_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_findByToken_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) FindBySignature(ctx context.Context, params func(UserEditor_findBySignature_Params) error) (UserEditor_findBySignature_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      3,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findBySignature",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_findBySignature_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_findBySignature_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) AddSeal(ctx context.Context, params func(UserEditor_addSeal_Params) error) (UserEditor_addSeal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      4,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "addSeal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_addSeal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_addSeal_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UserEditor) String() string {
	return "UserEditor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UserEditor) AddRef() UserEditor {
	return UserEditor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UserEditor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UserEditor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UserEditor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UserEditor) DecodeFromPtr(p capnp.Ptr) UserEditor {
	return UserEditor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UserEditor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UserEditor) IsSame(other UserEditor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UserEditor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UserEditor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UserEditor_Server is a UserEditor with a local implementation.
type UserEditor_Server interface {
	NewUser(context.Context, UserEditor_newUser) error

	DeleteUser(context.Context, UserEditor_deleteUser) error

	FindByToken(context.Context, UserEditor_findByToken) error

	FindBySignature(context.Context, UserEditor_findBySignature) error

	AddSeal(context.Context, UserEditor_addSeal) error
}

// UserEditor_NewServer creates a new Server from an implementation of UserEditor_Server.
func UserEditor_NewServer(s UserEditor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UserEditor_Methods(nil, s), s, c)
}

// UserEditor_ServerToClient creates a new Client from an implementation of UserEditor_Server.
// The caller is responsible for calling Release on the returned Client.
func UserEditor_ServerToClient(s UserEditor_Server) UserEditor {
	return UserEditor(capnp.NewClient(UserEditor_NewServer(s)))
}

// UserEditor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UserEditor_Methods(methods []server.Method, s UserEditor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      0,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "newUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewUser(ctx, UserEditor_newUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      1,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "deleteUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeleteUser(ctx, UserEditor_deleteUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      2,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findByToken",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindByToken(ctx, UserEditor_findByToken{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      3,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findBySignature",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindBySignature(ctx, UserEditor_findBySignature{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      4,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "addSeal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddSeal(ctx, UserEditor_addSeal{call})
		},
	})

	return methods
}

// UserEditor_newUser holds the state for a server call to UserEditor.newUser.
// See server.Call for documentation.
type UserEditor_newUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_newUser) Args() UserEditor_newUser_Params {
	return UserEditor_newUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_newUser) AllocResults() (UserEditor_newUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(r), err
}

// UserEditor_deleteUser holds the state for a server call to UserEditor.deleteUser.
// See server.Call for documentation.
type UserEditor_deleteUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_deleteUser) Args() UserEditor_deleteUser_Params {
	return UserEditor_deleteUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_deleteUser) AllocResults() (UserEditor_deleteUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(r), err
}

// UserEditor_findByToken holds the state for a server call to UserEditor.findByToken.
// See server.Call for documentation.
type UserEditor_findByToken struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_findByToken) Args() UserEditor_findByToken_Params {
	return UserEditor_findByToken_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_findByToken) AllocResults() (UserEditor_findByToken_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(r), err
}

// UserEditor_findBySignature holds the state for a server call to UserEditor.findBySignature.
// See server.Call for documentation.
type UserEditor_findBySignature struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_findBySignature) Args() UserEditor_findBySignature_Params {
	return UserEditor_findBySignature_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_findBySignature) AllocResults() (UserEditor_findBySignature_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(r), err
}

// UserEditor_addSeal holds the state for a server call to UserEditor.addSeal.
// See server.Call for documentation.
type UserEditor_addSeal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_addSeal) Args() UserEditor_addSeal_Params {
	return UserEditor_addSeal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_addSeal) AllocResults() (UserEditor_addSeal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(r), err
}

// UserEditor_List is a list of UserEditor.
type UserEditor_List = capnp.CapList[UserEditor]

// NewUserEditor_List creates a new list of UserEditor.
func NewUserEditor_List(s *capnp.Segment, sz int32) (UserEditor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UserEditor](l), err
}

type UserEditor_newUser_Params capnp.Struct

// UserEditor_newUser_Params_TypeID is the unique identifier for the type UserEditor_newUser_Params.
const UserEditor_newUser_Params_TypeID = 0xb8926ab3e343717f

func NewUserEditor_newUser_Params(s *capnp.Segment) (UserEditor_newUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_newUser_Params(st), err
}

func NewRootUserEditor_newUser_Params(s *capnp.Segment) (UserEditor_newUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_newUser_Params(st), err
}

func ReadRootUserEditor_newUser_Params(msg *capnp.Message) (UserEditor_newUser_Params, error) {
	root, err := msg.Root()
	return UserEditor_newUser_Params(root.Struct()), err
}

func (s UserEditor_newUser_Params) String() string {
	str, _ := text.Marshal(0xb8926ab3e343717f, capnp.Struct(s))
	return str
}

func (s UserEditor_newUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_newUser_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_newUser_Params {
	return UserEditor_newUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_newUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_newUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_newUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_newUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_newUser_Params_List is a list of UserEditor_newUser_Params.
type UserEditor_newUser_Params_List = capnp.StructList[UserEditor_newUser_Params]

// NewUserEditor_newUser_Params creates a new list of UserEditor_newUser_Params.
func NewUserEditor_newUser_Params_List(s *capnp.Segment, sz int32) (UserEditor_newUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_newUser_Params](l), err
}

// UserEditor_newUser_Params_Future is a wrapper for a UserEditor_newUser_Params promised by a client call.
type UserEditor_newUser_Params_Future struct{ *capnp.Future }

func (f UserEditor_newUser_Params_Future) Struct() (UserEditor_newUser_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_newUser_Params(p.Struct()), err
}

type UserEditor_newUser_Results capnp.Struct

// UserEditor_newUser_Results_TypeID is the unique identifier for the type UserEditor_newUser_Results.
const UserEditor_newUser_Results_TypeID = 0xbdeca414321680f4

func NewUserEditor_newUser_Results(s *capnp.Segment) (UserEditor_newUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(st), err
}

func NewRootUserEditor_newUser_Results(s *capnp.Segment) (UserEditor_newUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(st), err
}

func ReadRootUserEditor_newUser_Results(msg *capnp.Message) (UserEditor_newUser_Results, error) {
	root, err := msg.Root()
	return UserEditor_newUser_Results(root.Struct()), err
}

func (s UserEditor_newUser_Results) String() string {
	str, _ := text.Marshal(0xbdeca414321680f4, capnp.Struct(s))
	return str
}

func (s UserEditor_newUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_newUser_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_newUser_Results {
	return UserEditor_newUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_newUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_newUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_newUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_newUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_newUser_Results) User() (UserStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserStored(p.Struct()), err
}

func (s UserEditor_newUser_Results) HasUser() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_newUser_Results) SetUser(v UserStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUser sets the user field to a newly
// allocated UserStored struct, preferring placement in s's segment.
func (s UserEditor_newUser_Results) NewUser() (UserStored, error) {
	ss, err := NewUserStored(capnp.Struct(s).Segment())
	if err != nil {
		return UserStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// UserEditor_newUser_Results_List is a list of UserEditor_newUser_Results.
type UserEditor_newUser_Results_List = capnp.StructList[UserEditor_newUser_Results]

// NewUserEditor_newUser_Results creates a new list of UserEditor_newUser_Results.
func NewUserEditor_newUser_Results_List(s *capnp.Segment, sz int32) (UserEditor_newUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_newUser_Results](l), err
}

// UserEditor_newUser_Results_Future is a wrapper for a UserEditor_newUser_Results promised by a client call.
type UserEditor_newUser_Results_Future struct{ *capnp.Future }

func (f UserEditor_newUser_Results_Future) Struct() (UserEditor_newUser_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_newUser_Results(p.Struct()), err
}
func (p UserEditor_newUser_Results_Future) User() UserStored_Future {
	return UserStored_Future{Future: p.Future.Field(0, nil)}
}

type UserEditor_deleteUser_Params capnp.Struct

// UserEditor_deleteUser_Params_TypeID is the unique identifier for the type UserEditor_deleteUser_Params.
const UserEditor_deleteUser_Params_TypeID = 0x8e9be0a3d79fa1a0

func NewUserEditor_deleteUser_Params(s *capnp.Segment) (UserEditor_deleteUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_deleteUser_Params(st), err
}

func NewRootUserEditor_deleteUser_Params(s *capnp.Segment) (UserEditor_deleteUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_deleteUser_Params(st), err
}

func ReadRootUserEditor_deleteUser_Params(msg *capnp.Message) (UserEditor_deleteUser_Params, error) {
	root, err := msg.Root()
	return UserEditor_deleteUser_Params(root.Struct()), err
}

func (s UserEditor_deleteUser_Params) String() string {
	str, _ := text.Marshal(0x8e9be0a3d79fa1a0, capnp.Struct(s))
	return str
}

func (s UserEditor_deleteUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_deleteUser_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_deleteUser_Params {
	return UserEditor_deleteUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_deleteUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_deleteUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_deleteUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_deleteUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_deleteUser_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_deleteUser_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_deleteUser_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_deleteUser_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_deleteUser_Params_List is a list of UserEditor_deleteUser_Params.
type UserEditor_deleteUser_Params_List = capnp.StructList[UserEditor_deleteUser_Params]

// NewUserEditor_deleteUser_Params creates a new list of UserEditor_deleteUser_Params.
func NewUserEditor_deleteUser_Params_List(s *capnp.Segment, sz int32) (UserEditor_deleteUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_deleteUser_Params](l), err
}

// UserEditor_deleteUser_Params_Future is a wrapper for a UserEditor_deleteUser_Params promised by a client call.
type UserEditor_deleteUser_Params_Future struct{ *capnp.Future }

func (f UserEditor_deleteUser_Params_Future) Struct() (UserEditor_deleteUser_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_deleteUser_Params(p.Struct()), err
}

type UserEditor_deleteUser_Results capnp.Struct

// UserEditor_deleteUser_Results_TypeID is the unique identifier for the type UserEditor_deleteUser_Results.
const UserEditor_deleteUser_Results_TypeID = 0xbb64bbd4b54a0ac7

func NewUserEditor_deleteUser_Results(s *capnp.Segment) (UserEditor_deleteUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(st), err
}

func NewRootUserEditor_deleteUser_Results(s *capnp.Segment) (UserEditor_deleteUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(st), err
}

func ReadRootUserEditor_deleteUser_Results(msg *capnp.Message) (UserEditor_deleteUser_Results, error) {
	root, err := msg.Root()
	return UserEditor_deleteUser_Results(root.Struct()), err
}

func (s UserEditor_deleteUser_Results) String() string {
	str, _ := text.Marshal(0xbb64bbd4b54a0ac7, capnp.Struct(s))
	return str
}

func (s UserEditor_deleteUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_deleteUser_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_deleteUser_Results {
	return UserEditor_deleteUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_deleteUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_deleteUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_deleteUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_deleteUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_deleteUser_Results_List is a list of UserEditor_deleteUser_Results.
type UserEditor_deleteUser_Results_List = capnp.StructList[UserEditor_deleteUser_Results]

// NewUserEditor_deleteUser_Results creates a new list of UserEditor_deleteUser_Results.
func NewUserEditor_deleteUser_Results_List(s *capnp.Segment, sz int32) (UserEditor_deleteUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_deleteUser_Results](l), err
}

// UserEditor_deleteUser_Results_Future is a wrapper for a UserEditor_deleteUser_Results promised by a client call.
type UserEditor_deleteUser_Results_Future struct{ *capnp.Future }

func (f UserEditor_deleteUser_Results_Future) Struct() (UserEditor_deleteUser_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_deleteUser_Results(p.Struct()), err
}

type UserEditor_findByToken_Params capnp.Struct

// UserEditor_findByToken_Params_TypeID is the unique identifier for the type UserEditor_findByToken_Params.
const UserEditor_findByToken_Params_TypeID = 0xc758e2223661f240

func NewUserEditor_findByToken_Params(s *capnp.Segment) (UserEditor_findByToken_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Params(st), err
}

func NewRootUserEditor_findByToken_Params(s *capnp.Segment) (UserEditor_findByToken_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Params(st), err
}

func ReadRootUserEditor_findByToken_Params(msg *capnp.Message) (UserEditor_findByToken_Params, error) {
	root, err := msg.Root()
	return UserEditor_findByToken_Params(root.Struct()), err
}

func (s UserEditor_findByToken_Params) String() string {
	str, _ := text.Marshal(0xc758e2223661f240, capnp.Struct(s))
	return str
}

func (s UserEditor_findByToken_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findByToken_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_findByToken_Params {
	return UserEditor_findByToken_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findByToken_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findByToken_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findByToken_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findByToken_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findByToken_Params) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findByToken_Params) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findByToken_Params) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findByToken_Params) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findByToken_Params_List is a list of UserEditor_findByToken_Params.
type UserEditor_findByToken_Params_List = capnp.StructList[UserEditor_findByToken_Params]

// NewUserEditor_findByToken_Params creates a new list of UserEditor_findByToken_Params.
func NewUserEditor_findByToken_Params_List(s *capnp.Segment, sz int32) (UserEditor_findByToken_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findByToken_Params](l), err
}

// UserEditor_findByToken_Params_Future is a wrapper for a UserEditor_findByToken_Params promised by a client call.
type UserEditor_findByToken_Params_Future struct{ *capnp.Future }

func (f UserEditor_findByToken_Params_Future) Struct() (UserEditor_findByToken_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findByToken_Params(p.Struct()), err
}

type UserEditor_findByToken_Results capnp.Struct

// UserEditor_findByToken_Results_TypeID is the unique identifier for the type UserEditor_findByToken_Results.
const UserEditor_findByToken_Results_TypeID = 0x83b4805dae03e8f2

func NewUserEditor_findByToken_Results(s *capnp.Segment) (UserEditor_findByToken_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(st), err
}

func NewRootUserEditor_findByToken_Results(s *capnp.Segment) (UserEditor_findByToken_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(st), err
}

func ReadRootUserEditor_findByToken_Results(msg *capnp.Message) (UserEditor_findByToken_Results, error) {
	root, err := msg.Root()
	return UserEditor_findByToken_Results(root.Struct()), err
}

func (s UserEditor_findByToken_Results) String() string {
	str, _ := text.Marshal(0x83b4805dae03e8f2, capnp.Struct(s))
	return str
}

func (s UserEditor_findByToken_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findByToken_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_findByToken_Results {
	return UserEditor_findByToken_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findByToken_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findByToken_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findByToken_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findByToken_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findByToken_Results) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findByToken_Results) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findByToken_Results) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findByToken_Results) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findByToken_Results_List is a list of UserEditor_findByToken_Results.
type UserEditor_findByToken_Results_List = capnp.StructList[UserEditor_findByToken_Results]

// NewUserEditor_findByToken_Results creates a new list of UserEditor_findByToken_Results.
func NewUserEditor_findByToken_Results_List(s *capnp.Segment, sz int32) (UserEditor_findByToken_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findByToken_Results](l), err
}

// UserEditor_findByToken_Results_Future is a wrapper for a UserEditor_findByToken_Results promised by a client call.
type UserEditor_findByToken_Results_Future struct{ *capnp.Future }

func (f UserEditor_findByToken_Results_Future) Struct() (UserEditor_findByToken_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findByToken_Results(p.Struct()), err
}

type UserEditor_findBySignature_Params capnp.Struct

// UserEditor_findBySignature_Params_TypeID is the unique identifier for the type UserEditor_findBySignature_Params.
const UserEditor_findBySignature_Params_TypeID = 0xdd3326f2fdb223a9

func NewUserEditor_findBySignature_Params(s *capnp.Segment) (UserEditor_findBySignature_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Params(st), err
}

func NewRootUserEditor_findBySignature_Params(s *capnp.Segment) (UserEditor_findBySignature_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Params(st), err
}

func ReadRootUserEditor_findBySignature_Params(msg *capnp.Message) (UserEditor_findBySignature_Params, error) {
	root, err := msg.Root()
	return UserEditor_findBySignature_Params(root.Struct()), err
}

func (s UserEditor_findBySignature_Params) String() string {
	str, _ := text.Marshal(0xdd3326f2fdb223a9, capnp.Struct(s))
	return str
}

func (s UserEditor_findBySignature_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findBySignature_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_findBySignature_Params {
	return UserEditor_findBySignature_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findBySignature_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findBySignature_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findBySignature_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findBySignature_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findBySignature_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findBySignature_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findBySignature_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findBySignature_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findBySignature_Params_List is a list of UserEditor_findBySignature_Params.
type UserEditor_findBySignature_Params_List = capnp.StructList[UserEditor_findBySignature_Params]

// NewUserEditor_findBySignature_Params creates a new list of UserEditor_findBySignature_Params.
func NewUserEditor_findBySignature_Params_List(s *capnp.Segment, sz int32) (UserEditor_findBySignature_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findBySignature_Params](l), err
}

// UserEditor_findBySignature_Params_Future is a wrapper for a UserEditor_findBySignature_Params promised by a client call.
type UserEditor_findBySignature_Params_Future struct{ *capnp.Future }

func (f UserEditor_findBySignature_Params_Future) Struct() (UserEditor_findBySignature_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findBySignature_Params(p.Struct()), err
}

type UserEditor_findBySignature_Results capnp.Struct

// UserEditor_findBySignature_Results_TypeID is the unique identifier for the type UserEditor_findBySignature_Results.
const UserEditor_findBySignature_Results_TypeID = 0xb34c006f915d9adb

func NewUserEditor_findBySignature_Results(s *capnp.Segment) (UserEditor_findBySignature_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(st), err
}

func NewRootUserEditor_findBySignature_Results(s *capnp.Segment) (UserEditor_findBySignature_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(st), err
}

func ReadRootUserEditor_findBySignature_Results(msg *capnp.Message) (UserEditor_findBySignature_Results, error) {
	root, err := msg.Root()
	return UserEditor_findBySignature_Results(root.Struct()), err
}

func (s UserEditor_findBySignature_Results) String() string {
	str, _ := text.Marshal(0xb34c006f915d9adb, capnp.Struct(s))
	return str
}

func (s UserEditor_findBySignature_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findBySignature_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_findBySignature_Results {
	return UserEditor_findBySignature_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findBySignature_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findBySignature_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findBySignature_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findBySignature_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findBySignature_Results) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findBySignature_Results) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findBySignature_Results) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findBySignature_Results) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findBySignature_Results_List is a list of UserEditor_findBySignature_Results.
type UserEditor_findBySignature_Results_List = capnp.StructList[UserEditor_findBySignature_Results]

// NewUserEditor_findBySignature_Results creates a new list of UserEditor_findBySignature_Results.
func NewUserEditor_findBySignature_Results_List(s *capnp.Segment, sz int32) (UserEditor_findBySignature_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findBySignature_Results](l), err
}

// UserEditor_findBySignature_Results_Future is a wrapper for a UserEditor_findBySignature_Results promised by a client call.
type UserEditor_findBySignature_Results_Future struct{ *capnp.Future }

func (f UserEditor_findBySignature_Results_Future) Struct() (UserEditor_findBySignature_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findBySignature_Results(p.Struct()), err
}

type UserEditor_addSeal_Params capnp.Struct

// UserEditor_addSeal_Params_TypeID is the unique identifier for the type UserEditor_addSeal_Params.
const UserEditor_addSeal_Params_TypeID = 0x97eb1b20191db78a

func NewUserEditor_addSeal_Params(s *capnp.Segment) (UserEditor_addSeal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserEditor_addSeal_Params(st), err
}

func NewRootUserEditor_addSeal_Params(s *capnp.Segment) (UserEditor_addSeal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserEditor_addSeal_Params(st), err
}

func ReadRootUserEditor_addSeal_Params(msg *capnp.Message) (UserEditor_addSeal_Params, error) {
	root, err := msg.Root()
	return UserEditor_addSeal_Params(root.Struct()), err
}

func (s UserEditor_addSeal_Params) String() string {
	str, _ := text.Marshal(0x97eb1b20191db78a, capnp.Struct(s))
	return str
}

func (s UserEditor_addSeal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_addSeal_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_addSeal_Params {
	return UserEditor_addSeal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_addSeal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_addSeal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_addSeal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_addSeal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_addSeal_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_addSeal_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_addSeal_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_addSeal_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserEditor_addSeal_Params) Seal() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserEditor_addSeal_Params) HasSeal() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserEditor_addSeal_Params) SealBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserEditor_addSeal_Params) SetSeal(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserEditor_addSeal_Params_List is a list of UserEditor_addSeal_Params.
type UserEditor_addSeal_Params_List = capnp.StructList[UserEditor_addSeal_Params]

// NewUserEditor_addSeal_Params creates a new list of UserEditor_addSeal_Params.
func NewUserEditor_addSeal_Params_List(s *capnp.Segment, sz int32) (UserEditor_addSeal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UserEditor_addSeal_Params](l), err
}

// UserEditor_addSeal_Params_Future is a wrapper for a UserEditor_addSeal_Params promised by a client call.
type UserEditor_addSeal_Params_Future struct{ *capnp.Future }

func (f UserEditor_addSeal_Params_Future) Struct() (UserEditor_addSeal_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_addSeal_Params(p.Struct()), err
}

type UserEditor_addSeal_Results capnp.Struct

// UserEditor_addSeal_Results_TypeID is the unique identifier for the type UserEditor_addSeal_Results.
const UserEditor_addSeal_Results_TypeID = 0xfd8477ce39853249

func NewUserEditor_addSeal_Results(s *capnp.Segment) (UserEditor_addSeal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(st), err
}

func NewRootUserEditor_addSeal_Results(s *capnp.Segment) (UserEditor_addSeal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(st), err
}

func ReadRootUserEditor_addSeal_Results(msg *capnp.Message) (UserEditor_addSeal_Results, error) {
	root, err := msg.Root()
	return UserEditor_addSeal_Results(root.Struct()), err
}

func (s UserEditor_addSeal_Results) String() string {
	str, _ := text.Marshal(0xfd8477ce39853249, capnp.Struct(s))
	return str
}

func (s UserEditor_addSeal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_addSeal_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_addSeal_Results {
	return UserEditor_addSeal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_addSeal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_addSeal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_addSeal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_addSeal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_addSeal_Results_List is a list of UserEditor_addSeal_Results.
type UserEditor_addSeal_Results_List = capnp.StructList[UserEditor_addSeal_Results]

// NewUserEditor_addSeal_Results creates a new list of UserEditor_addSeal_Results.
func NewUserEditor_addSeal_Results_List(s *capnp.Segment, sz int32) (UserEditor_addSeal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_addSeal_Results](l), err
}

// UserEditor_addSeal_Results_Future is a wrapper for a UserEditor_addSeal_Results promised by a client call.
type UserEditor_addSeal_Results_Future struct{ *capnp.Future }

func (f UserEditor_addSeal_Results_Future) Struct() (UserEditor_addSeal_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_addSeal_Results(p.Struct()), err
}

const schema_dca555fc76741dc1 = "x\xda\xd4Z}xT\xd5\x99?\xef\xdc\x09cP2" +
	"9\xdcI`\xf25\x09\x8d}\x8c-\xb4\x11]\x895" +
	"\x9b\x04\x831\x085w\x92X\xe1Y\x90\x9b\xcc\x0d;" +
	"0\x99If&\x89\x93%\x0bD\x11\x81\xe2\x1a\xaa\xb4" +
	"DY\x8d\xcan\xfd\xa0. [\x95\xa2K\xbb\x16q" +
	"\xb1\xfaP\xc1\xa7\x01\xaa`-\xae\x1f\xad\xcd\xda\xc5Z" +
	"\xed\xec\xf3\x9e{\xcf\x9d;37\xf3\x81\xee\x1f\xfdo" +
	"2y\xe7\xfd\xfc\xbd\x1f\xe7=\xe7\x9b\xa7/\xae\xb7V" +
	"O{\xb3\x98XZ\x1b!gJ\xf4\\\xff\x13\xd1\xaf" +
	"I+\xd6\x13Z\x0c\x84\xe4\x80\x8d\x90\xb9\xc7\xa7m\x06" +
	"\x02\xe2;\xd3\xea\x08D'\xde\x15~\xb4l\xdd\xd3\xb7" +
	"\x13\xea\xd4\x09r\xf3V!AA\x1e\x12\xd4\xe6\xbe\xf0" +
	"\xc6\xa9\x9f\xf6\xdca\xe4P\x93\xc7843\x82\xe0\x8d" +
	"\xffp\xf2\xaa\x99\xfdw\x10\x9a'D\x0f\x95\x86\xfb?" +
	"k\xdfu\x8a\x10\x10\xbb\xf3^\x16#yH\xdf\x97\xd7" +
	"\x04b\xb3\xddFH\xf4\xa5\xb7~\xbb\xaed\xe0\x83\x0d" +
	"\x84\x96\x01!V\xfco\xb5}/\x10kt\xf5\xa57" +
	"\x96Y\x95-\x1b\x09-BA\x16\xfcW\x85=\x88\x82" +
	"f\xdb\x07\x08D[\x86\x9a>\x09\xdc\xd4\xbcY#`" +
	"\x9a\x8c\xd8\x87\x91`\xa7\xbd\x8e\xc0_n\xeb\x98\xf7\xfc" +
	"\xc7\x7f\xdeBK8\xe7C\xf6\x87\x91\xf3\xec\xd2\xe5W" +
	"G\x0e\x06\xef&4\x0f\xa2\xe1\xf3\x07O=\xf8\x8d'" +
	"^#9\x02\x92\xec\xb1[@<\x88\xaa\x89\xcf\xda\x9f" +
	"\"\x10}h\xec\xc17\x1ey\xeb\xfe\xbb\x8d\x0e\x91\xf3" +
	"\x97\xa2\x94\xee|\xb4\xd7\xfaB_\xa9\xfb\xecy\x95\x9b" +
	"n/\xd3W\x1c\xc9\x7fY\xdc\x99\x8f\x9fv\xe4\xa3\xca" +
	"\x7f\xfb\x83\xab?\xfa\xc9\xdfE\xee1:\xef\xf3\xfc\x87" +
	"\x91\xd94\x8a\xccF\xb7\xae\xbf\xe8g\xde\xef\xc5\x114" +
	"\xd0A$X\xcc\x08\xdav\xdf+V\xec\xbaa\x1ba" +
	"V\xa9\x04\xbdt/\x12\xacg\x04\xf5\xcbW\xb5\xdcy" +
	"\xed\x8e{U\x87\xaan\xdbO\x1fG\x82\x17)\xea\xf0" +
	"\xf4\xf9\x7f>\xf4\xe7\xfb\xbf\xbb\xdd\xc8\xe1\xd2\xe9\xccm" +
	"\xd5\xd3\x91\xc3\x07w\x7f\xf8\xf0\xf3\xe3=\xdfO\x0a`" +
	"\xfb\xf4\xb3\xa2<\x1d\xe9\x97Mo\x02\xb1A\xc4\x00n" +
	"\xfeq\xa9\xb3\xbc\xf8\xfd\xefk\xfea\xf2\xaa\xc4\xf9\x8c" +
	"\x9d\x88\xf2\x96\xff\x93|rG\xc5\xef\xef\x8f\x0b\x93\xc8" +
	"\x003&\xa2\xbc\xb9\xedg&*O\xbe\xf3\x80Q\xa1" +
	"\xe3\"S\xe8\x0c#\xf8\xea\xc5\xbd\x9f\x9d\x98\xf2\xecC" +
	"\x84\xbat\x82\x1c\xc7\xcbH\xe0t \xc1\xbe\xe1?m" +
	"\x7f\xf3\xfd\xda1\xd5k,\xd4\x0d\x8eQ\x0c\xb5\xf8Y" +
	"\xf075\xb7\xef\x1dc\xb6\xc8\x85\xfb\x9f\x99\xf1\xab\x03" +
	"o\xa0-\xd5\x8e\x09\xb1\xd6\x81\x91\xa9q4\x89^\xfc" +
	"\x14\xfd]\xf1\xd6\xf3gN\xc0\xa3FM%\x07\xd3T" +
	"fr\x86\xf7\xbb\x876\x9e\xb8\xedQ\xa3\xa6\x1b\x1cL" +
	"\xd3\x11F\xb0|\xeb\xab7}\xf4\xca\x9d\x9c@u\xbe" +
	"c\x1bs\xbe\x03\x9d\xf1RM\x85\xb5ul\xe6.\x12" +
	"\x03eU\xc1\xe3\xa8\xa9\xa7n\xd3\xc9_\xef{d\x97" +
	"Q\xb8\xb3\x80E\xfe\xd2\x02\xe4}u\xf4[\x1f\\v" +
	"\xed\x91]F/,)`\x81\xf52\x82\x9e\xad\xa1W" +
	"\x7fpj\xe0_4\xec0\xe1[\x0b\x98\xf0\x9d\x05(" +
	"\xfc\xa9%G\x7f\xd5T\xf1\xea\xbf\x1a9@!\xc3\x0e" +
	"-D\x0e/mm\xf17\xfe\xc2\xfeC\xa3\x0eW\x15" +
	"2\x07,`\x04\xef\xd5~\xef\x89\x1a\xeb\xd2'\x8c\x0e" +
	"\xf0\xaa\x04\x11F0Z\xd3W\xf9\xde\x0e\xef\x93\x09\xa9" +
	"\x85\x86\x8a\xbb\x0b?\x15\x9f-\xc4O\xfb\x0b\xcf\x11\x88" +
	".xpEOO\xde\xde\xddFf;g\xb0\xb0\xee" +
	"\x99\x81\xccnm<\xea{\xc0\xf9\x8f{\x183=x" +
	"\x8c\xd9\xdc\xe33\xa6\x82\xf8\xce\x0c\xe4vf\x06r\xcb" +
	"i{y\xcb\x8f\x97>\xb4\xc7\xa8\xfb\x91\x99\xcc\x7f\xc7" +
	"g\xd6\x11x\xf3\xe4\xe8\xb2\x91\xc0\xa2}\x864\xfe\xd3" +
	"L\xa6y\xae\x13\x85=,\xba>*=\x91\xbb\xdf\xe8" +
	"\x9c\xd9\xce\x9f\"A-#X\xdb{\xdd\xdb\xfbVm" +
	"{F\x05:Sb\x99s>\x86nqqE\xe5\xd3" +
	"\xd3\x9fz\xc6\x98\xb4\x0b\x9c\xcc\xf1\xed\xec\xa7\xb9\xe3\xb7" +
	"\xfe\xf6\xa9\xaf\xbd\xfb\x9c\x91 \xe2\xbc\x86%-#8" +
	"<u\xe1\xfe\xd7\x0fx\x0e\x18x\x8f9;\x90\xf7\xdb" +
	"\x87\xffk\xdew\x07\x07\x0f$84\x87\x05\xd79\x15" +
	"\xc4\x9dN\xfc\xb8\xc3\xe9\x02\x02\xd1\xfc\x91'\xff\xb8]" +
	"\xfa\xf8'Ip?X4.\x1e)Bo\xbdX\xd4" +
	"$~\x88\x9f\xa2\xf7\x1f\x1b\xaf\xd9\xf4\xde\xae\x83q\xbd" +
	"\xa0H\xcd\xbb\"\xd4\xea\xe3u\x85W8\x1e\xfd\xe0\xa0" +
	"\xb1\xf4\x15\x14/D\x82\x8ab$\xd8\xbehh~\xa9" +
	"c\xfcyc\xde\x153\x97\x9c\xbfs\xb3s\xfbM\xcf" +
	"\xfd\xdc\x18\xdb\xaab\xc6\xfb*\xf6\xd3\xfa\x09\xf9of" +
	"\x9d\xbd\xe5\xb0\x91\xf7\x92\xe2\x0e$P\x18\xc1\x89\x1b\x8e" +
	"\x1c^s\xaa\xfe\xa8\xa6\x1d+\xce\x9b\x8aY<\xef+" +
	"\xc6\xc2\xfc\xe8\xee\xd9\xbf\x1b=\xf1\xc6+\x86T\xaa)" +
	"\xd9\x8c\xc2\xff\xad\xfc\xdc\xd0e\xff\xfd\xfc\xabF\xc3\xaa" +
	"JX\xa6\xd4\x94 \xef\xf5\xd65\x17\x15N\xbc\xf9\x9a" +
	"Q\xbb\xee\x12\x06\x86!Fp\xdd\xef\x0f\xdfW\xf2\xed" +
	"\xb7_K\xa8\xe9\x0c\xc6c%\x13\xe2\xee\x12\xfc\xf4X" +
	"\x09\x02o\xd3W\xae\xf9ux\xc5\xe8/\x99\xcf\xf5\x08" +
	"\x11\x107\x95\x1e\x13\xef+e\xe5\xae\xb4\x09\xc4\xee2" +
	"\x1b!/|2\xf3\x97\xb5\xa5\xdf:n\x00i{\x19" +
	"\xebir\x19\x0a^\xbae\xc9\xeb/\x86^;\xae\xa2" +
	"\x98\x19\xb5\xa1l\x18\x8dj\xbe\xfd\x11\xf7\xd1w_\x1c" +
	"OH\x06\x96\xe5\xbde\xd7\x80\xb8\x1e\xf9\x8bCe\x98" +
	"\xe9M\xc3\x8bmG\xa7,?\xa95\x01&\xe7t\x19" +
	"\x03\xf3\x87L\x8e\xf7\xc4'\xf7x~\xfe\x97\x93I@" +
	")p}*V\xb8\x90S\xa9k\xa3\x18\xc1O\xd1\xc7" +
	"\xbe\xb2\xf7\xf3\x89\xaf\xce=\x1d\xd7\x02],\x98\xdd." +
	"\xe4v\xb6m^\xfb\xd7\xcb\xaf>m\x147\xe2z\x8e" +
	"\x95xF\xf0\x9f9\xaeS\xcb\x8e\x09o%\x89;\xe4" +
	":+\xbe\xc2\xc4\x1dqm\x14+\xcaQ\xdc\xec5\xeb" +
	"\x9aj=\xb9\xef\x18\xa3\x93[\xce\xa2\xe3,GnU" +
	"\x97\xbaF\xaeXZz\xce\x18\xdf\xdar\x96o\x8b\x19" +
	"\xc1\x0d7\xf7\xfc\xc7\x95\x87\xe7\xc5\x11\xf4\x963\x85\x87" +
	"\x18\xc1\xdd\x07\xc6W\x17D\xce\x9f3\x8a\x18+\x1fe" +
	"\xa5\x87\x11\xbc\xfd\xb8\xdc~\xf9\xb1\xb2\xf7\x93z\xe0\xf1" +
	"\xf2\xb3\xe2\x19TS<]\xde$\xe6V\xa0\xc2?\x9b" +
	"\xf7\x1b\xba\xae\xa8\xed\x7f\x0cA\xfb\x03\xaac\x8d^y" +
	"\xe8\x1bO\xfeh\xf7\xde\x8f\x8dr\xce\xa8r\xfe\xc0\xe4" +
	"\xdc\xf5\xef\xb7n\xb9}\xcbw\xfe\x98\x04\x9e\x82\x8aq" +
	"\xb1\x02\xb9\xcf-\xad\xd8\x08b\xd5,\x14t\xf4\xf5\xbc" +
	"\x85\x17\x17\x0f\xffo\x92\x1b\xe9\xac\x09\xb1\x14ID\xe7" +
	"\xac&q\x01#\x1e\xac9pcQG\xfb\xa7F\xd9" +
	"\xb3g\x1dC\xd9\x0d\xb3Pv\xf3\x15\x1bj~1p" +
	"\xc7\xe7\x86\xa2\xd37k!\x90\xeb\xa3\x03JG\xbfW" +
	"\x19\x98\x93\xd3)\xf7\xf8{\xae\xf9\x8e\xd2q\xb3W\x19" +
	"h\xf0t{\xfdsV*\xe1V%\xd8\xef\xedT\xf0" +
	"\xbb\xca\x169(w\x87\x08\x91\xac\x82\x95\x10+\x10B" +
	"\xa7\xb9\x09\x91.\x11@\x9ai\x81hH\xa5m&\xd0" +
	"\x08\x97\x10\x0b\\B \x1a\x0a\x07\x82\xf2Je\x8eU" +
	"e\xdf\x1eR\x82\x0b<\xdep 8\xa7\xcb\xeb\xf7\xcc" +
	"\x8f\xb4\x05V+\xfeJ\xb7\x12\xb2\xf7\xf9\xc2!#\xe7" +
	"\xa0\x81s_H\x09\x86\xbc+\xfd\xc4%\x87\xfb\x82\x8a" +
	"\xce=\x95\xf2~e@\xfb\x1b\x85\x9a*\x9f\x89\x08n" +
	"\x80%\xd1\x00BZ\x00$\x87\x90C\x88\xde/\x80\x97" +
	"Q:2\x9fX\xe8\x06\x1b\xc4\x86J\xe0\x85\x9fF\x96" +
	"\x12\x0b\xed\xb5\x81E\xaf\x8c\xc0Gq\xaat\x10\x0b]" +
	"f\x03A\xcfD`\xcd\x8c,\xdaG\xa5ab\xa1\xcd" +
	"6\xb0\xea\x83\x18\xf0\xb8\xd2Z\x94Wm[\xebW\xcd" +
	"\xad\x87\xa8G\xf1)a\xa5=D\x04\xf6'w7\xb1" +
	"\xadV\xfc\xfa\xdf\xad^X\xe9g\x06\x93zX+{" +
	"<\xad\x8a\xec\xab\x87\x16\x80h\xa8G\x1e\xf0+A\xee" +
	"[\x0d\x08ne\xa57\x14\x0eF\xe6\x04\xd9\x07%\xa8" +
	"}_\xe9V\\!\x0c\xa1\x1e\x13k\\LP)\x0c" +
	"Ik\xb8/\xe8\x89\xb8\x95\xae\xca\x16\x17\x8b\x88t\x91" +
	"\x1e\x8f*\x04\xd3e\x02HWZ\x80\x028\x00\xbf\xac" +
	"\xc6 }S\x00\xe9\xda\xc9\x10\xd6\xa3tz\xbb\xbc\x9d" +
	"\x188o\xc0\x9f\x06\x1bL\x0fs\\_\x08\xac\xb9s" +
	"\xd4?5d\xab\x9e\x8fY\xeaVB}6\xa3k\x04" +
	"\xfe+\x8d\x02\x95BM\x18\xa2.\xd1\xb5X\xd0A\x88" +
	"\xd4(\x80\xd4b\xf0\xc7bTm\x91\x00\xd2-\x16\xa0" +
	"\x16\x8b\x03,\x84\xd0\xf6m\x84H\xb7\x08 yP_" +
	"\x8d-\xb1u5\x1b46\xb1\xa2G\x8e\xf8\x02r\xa3" +
	"\x02\xa1\xce\xa0\xb7'\xec\x0d\x80?\x83\xc4\xe5\xc0\xd2\x92" +
	"J\xe8\x0e}\x099\x85\x1eT<jN\x19\x10\x114" +
	"C\xc4\xa0\x01\x11\x93\x8b\xd0\x9cP\xd7\xc5JLF%" +
	"\xc3\xe7\x0d\x85\x1b|>=.!4\xd0&\xc7\x1b\xb8" +
	"T3\xf02M\xfa\xf5^_\x18s\x0c\xf2\x08\xb4\x08" +
	"\xc0\x04\xe5\x19\x04Y'\x11\xa4!0TY\xa7\xe2\xcf" +
	"(\xa3#\x19~m\xc4\x16\xe9Q2\x03`\xb2\x1d<" +
	";'3DuWP!BW\x88\x1b\x92\x1f\x1b\x8d" +
	"\x080\x93\xb2,\x09-\xb2=1\xc3W\x99\xc5s>" +
	"!\xd2\xd7\x05\x90\xe6\x19\xad\xb5\x1b\xa3\xb6V\xfb\x1ah" +
	"l\x9a!\x004\x9d#0\xd1c\x05'9\xcd\xe3\xfc" +
	"l\x9e6\xf1P\x8d\xb1\xb7\x85\x03\xc1X\x03\xe0\xe7Z" +
	"\xe0\x93*\x1dYE,t\x136\x00~\x08\x07>\xec" +
	"\xd0!\xfc_\x1f6\x00~.\x02\xde\xc1\xa9w/\xb1" +
	"P\x05\x1b\x00??\x02\xdf\x03\xd0%\xdb\x88\x85\xb6c" +
	"\x03\xe0\xc3\x06\x10\xbe\xf8h\xc6\xe6\xd0`\x8bb\x0dG" +
	"K\x88\x1d\x8d\xae\x87(\xf7\x81\xfe\x05\x03_\xb8/\x08" +
	"*6\xae\x0f\xb8\x82Z\xcb\xe0\xb8\x01\xee3\x08\xe9\x8d" +
	"\xa45\x0c\xda\x97D\xeb\x0f\x93\x16\x08\xad\x8d\xe8\x0eO" +
	"\x97\xcf\x97\x1b\xe2?I>\xdbC\x8a\xec\xcb\xa4\xb4s" +
	"\xe3t\xdc3\xd8\xc7\xb7\xfdd\xe0\xbb\x13\x80\xafo\x8d" +
	"8\xf0S\x81\x8c{|2\x90\xb9\x93@\x16T\x08t" +
	"%\xe4W\xbe!\xbf\xa6\xc4\xe5W[\xa0U\xfb~\xa5" +
	"\x12^\xe4\xedW\xae\x93{\xe4\x0e\xaf\xcf\x1b\x8e\x98\xdb" +
	"7J\x88\x94/\x80Tb\x81hP\x09\x05|\xfd\x8a" +
	"\x07\xf8\x8f\x84p\x04\xa6[\x05\x020=M5\x0c*" +
	"\xdd\x81\xfe\x846\xe6\x13\xc2!]MKB\x19\x08\xb9" +
	"P\x14\xcb\x0a+\xcb\x0a~V\x00~F\xa1\x14\x11<" +
	"\xcd\x16\xe5\x96\x007\x05\"*\xaaR\x846Q\x9f\xb4" +
	"\xe3(\x0f-t\xa5)\x9bnE\xf6(_J\xb50" +
	"-\x90h\xc1$S\x07\xa4\x9f\x7f\x16\xa6\x99\x7f:e" +
	"\x9f\xafC\xee\\M\x08\x01\x1a\xdb\x0adR\x1e\xcd\xfa" +
	"\x1d+\xd9\xa9\x86\xb8\xb8\xde\xe5\xaeS\x92\xfa\xcaBc" +
	"zi\x84\xa8\x9c\x9e]\xfa\xe2(e[\x89\x83}\xbc" +
	"\xe3\xec\x89\xfdr\xa1!2\xa9\xfd\x91\x0d\xe0M\"d" +
	"Z\xbf\xdc\xd9\xcc#F0fg\xb7Y\x0f7\x19\x14" +
	"n&6\xaf2\x906\xc7\xcd\x06a\xd3j\x92\x89\x88" +
	"\x94\xb8\x8f\x07\x8c\x99\x88\xb4\x88\xd1\xb7\x83\x1ab\xb8I" +
	"\x89\x15\xa8\xabN\x09*\xfeN\x05KP\xbe\xce_\xc6" +
	"\x00\xad\x10@\xf2\x19\xa2\xe6E\xbb\xfe^\x00)l\x98" +
	"\xa3{\xf1\xcb\x1e\x01\xa45\x16\xa0\x82\xe0\x00\x81\x10\x1a" +
	"\xc1z\xbaF\x00\xe9\xae\xc9\x0e\x03\xe6\x13\x9a\xfa\xed\xb7" +
	"\x89M\xeeN\xfa\xb6\x11\x14m\xe6\x16\x02\xc93\xf7\x94" +
	"\xc9\x925\x96\xa9\xd7\x07\x82_\xecX\xabEL\x88\xf3" +
	"`#\xd7*\xe0WG\xf1\xbfB'fz\xfe4+" +
	"]Y\xb6\x8f\xa4mF\xabW;M\x9b\xe3|\xd0\x8c" +
	"}\xe2\x01%\xfb!\xc0\xa4U\xe1H}\x91\x00\x92\xc3" +
	"\x02k\xd5S\x9e'\xc9\x88\xa9IF\xf8\xe3w%\xdc" +
	"\x93\xe97C\xaa\xb5\x10\xba\xd0\xba\xc1Q(\xa3]j" +
	"\xf9\x9e\x13\x92\xfb\x15\xb3\xb3Q&\xa6\xa5<\xb4\xa6=" +
	"\x8e3\x13\xd9y\\[\xf1p\xd9C\x1d1\x10\xeb9" +
	"\xb0\x01As\x87\x00\xd2=\x86\x1c\xd8\x8aZ\xde%\x80" +
	"t\xaf!\x07F01\xef\x11@z\xc0\x02\xd4ju" +
	"\x80\x95\x10\xba\x03\x8f\xee\x0f\x08 \xfd0\x9b\xa3{\x92" +
	"\xe5\x93\xe5y\xca#~\xc2\x1c\xa7{_\xe8\\\x1d\x1b" +
	"\xe2\xf8\x85\x06\xf0\x1b\x00J/'\x16\x9ac\xb3c\x84" +
	"RMm&g]\x9e\x16_l^\x984\xca\x1c\xc0" +
	"\xa6\xd9wy\x0c8vt\x17\xe4\xc7\xees\x13\x06\xf0" +
	"\xa9\x93\xe1\x913\xe6\x84i\xfb]\xba12\xe5\xe1>" +
	"\xf5\xd2\xd4d7\x91Q\x81I\xb5\x98\x88\xab\x90<\xf9" +
	"\x0c\x1b\xa9`\xc6\x1b)\xa4l\x13@Z\x91\xaa\x09e" +
	"\xb1\xce\xcb\xfc\x08\xa6\x07?\xcb]\x8f\xd9\x12:\xfdQ" +
	"Q\xbf\xb4KyT4;a\x98\x824\x8b\xc3b\xe2" +
	"fB\xe3\xdb\xeab\xab\xb4\x84\xee\xdda\xd6\xbd\xddf" +
	"\xdd\x1b+\x97O\x00\xe96C\xe5\xea\xc3h\x86\x05\x90" +
	"\xd6\xfd\xbf\x14\xa9\x84q.\xd6\xb2!\xb6b\xe1\xb7i" +
	"\x86\xcb\xf3\xd8\x8a\x85?\x0f\x01~\xabM\x87\x06\xf9\x8a" +
	"\x85\xbf-\x01~kL\xbd\xf8;\xd9\x06\x82\xfe\x0a\x00" +
	"\xf8\xb5\x0em\x1f&\x16\xba\xd8\x06V\xfdz\x0e\xf8\xa3" +
	"\x06\xda\x80<klQ\x9e\xe0\xc4\x8e)\xae\xadX\xd0" +
	"|R\xa7\x16\x81z\x88\xf2D\xd2\xb7.\xfcpa\xd8" +
	"\xa2\xe8\x9b\x18R\xa7B0\xbe\x98\xa6;{\xf1\x05z" +
	"V\xa5\x853\xcfM\xbb:\xd1*W|\xa5s\xb3u" +
	"\x82\xdc\xe1S\xf8\xcc]\xa7\xf4\xf6)\xa1p\xc2\xde\xd6" +
	"\x9d\xe1\x9e/%\\\xcc'!U\x85\x94\xdb\x90\x0b\\" +
	"\x86\x98\xef5\xda\x02\xadu\xea?T\x1b\xb1'\xf2\x07" +
	"\x04\xc0\x9f\xab\xd0\xeam\xc4Bg#\x16\xf9\xdb\x0d\xe0" +
	"O0h\x05\xe2\xc69\xc9\xd2\xc3\x04<\xc6\xedZ\xfa" +
	"I\xd3\xa4\xc3ds\x00\xc8\xc9\xd4\xb9iF\xb1\xa0\x8a" +
	"\x03\xc8\x8f\xdd^'4UKb\xb3\xb4\x0d\x18}\xca" +
	"\x9f\x11\x00\x7fxB\xab1O\xab\xd0\xa7\xfc\xad\x0d\xf0" +
	"\xcb\\Z\x8a>-\xc8(\x17M\xdc\x99bK\xfc\x05" +
	"\xabr\x167\x92\xe9\x86\xe6\x01\x8d\x96\xd8pX\xa1\xb1" +
	"\xc7\x07\x19\xac2\xe2O:&i\x91\xf6\xa4\x93\xc5&" +
	"\x8b/\x06\xb3\x9e\xfeMw\xebnE\xb6y\x8c[D" +
	"\xfe\x12\x0b\xf8S\x0eJ\x11\x18\xb9\xb6\xa4\xd5v\x96\x0b" +
	"D\x1e\x80\xecn\xf3L\xee\xbc\xd2/\x06\xcd;\\\x83" +
	"\xa7[\xf0\xfa\xd1\xd2\x99\xccR\xfe\"\x10\xf8s\x1d\xba" +
	"\x07-}\x0cS\x80\xbf\xe6\x04\xfe\x02\x89\xee\xc4\x14\xb8" +
	"\x0f[\x1c\x7f?\x03\xfc1\x04\xdd\x84\xbf[\x8f-\x8e" +
	"\xbf\x14\x03\xfep\x8e\xf6a\x8b\xeb\xc6\x16\xc7\x9f(\x02" +
	"\x7fEC\xe5m\xea\xf5s\x8e\xfe\xf6\x13\xf8\x0b\x0c*" +
	"\x0d\xb2\xeb\xe7/\xb7\xfd%_7\xf0,!u\xfc*" +
	"\xdbx\x1b\x9d\xb8\xf1Y\xe9bwO1\xb4\xf07\x91" +
	"\xc0_\x9bR:\xac\xa2\x85_O\x81\xf6\xe3\x84{\x8c" +
	",\x96.f\x99{\x01\xb7ii/P\xf4Z\xf4\x7f" +
	"\x01\x00\x00\xff\xff\\)\x9d\x12"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dca555fc76741dc1,
		Nodes: []uint64{
			0x8160512bffab76e7,
			0x83b4805dae03e8f2,
			0x8470c2dcd7bf093d,
			0x84761835db7b4b72,
			0x85ec771c80e6e0c8,
			0x878b65041e4b256b,
			0x8a494f6ff8477d50,
			0x8bfbf4be38627800,
			0x8e72bd79375e1d2d,
			0x8e9be0a3d79fa1a0,
			0x8ef7e2521d75bf04,
			0x90795cbcf037983e,
			0x909369c308818d9a,
			0x9248a5211394ad54,
			0x94993c86506a5e40,
			0x968c9bfbc19ef7b4,
			0x9770dabea2ed8eec,
			0x97eb1b20191db78a,
			0x9bef2199db618f5e,
			0x9ce5db24f2e15533,
			0xa0b906d6fc710b26,
			0xa13debdf96f982b3,
			0xa1b28339e472fc13,
			0xa401d6e1f78d1bee,
			0xa478d6877d52b582,
			0xa486cdf04fcf8d5e,
			0xa518a153042139c8,
			0xa5a3b3dedb893f64,
			0xa5c93c28ec3bff37,
			0xa677dc98cf738d70,
			0xa7cf2147d9cc59af,
			0xa80fce446e508dc8,
			0xab5a0439ab933dea,
			0xac6999ea2475399a,
			0xadb20e7070609f45,
			0xb17e199c6ccc445f,
			0xb1a05ab78bca5405,
			0xb34c006f915d9adb,
			0xb509d61df01f13a2,
			0xb8926ab3e343717f,
			0xb8af12b424211b4d,
			0xbae82bafe65fda09,
			0xbb64bbd4b54a0ac7,
			0xbb7a7a8c38cbc7e3,
			0xbcf45196f5ac9110,
			0xbda5ea8939dad29b,
			0xbdeca414321680f4,
			0xbeda141d427d4c96,
			0xc6ba4f96198a86f7,
			0xc758e2223661f240,
			0xcc40dc7cc7c948d6,
			0xcdd7d69aee2dada4,
			0xcfbee9287de720b0,
			0xd0dff216087c0481,
			0xd0e34e1c95c7ef43,
			0xd39a6074de3a2389,
			0xd5003b1d3dd318f8,
			0xd5d073c5d4598b5a,
			0xdac5e8cc52a38349,
			0xdb5e06cc074d8247,
			0xdbfec66490f8d669,
			0xdd3326f2fdb223a9,
			0xdd37202c553854e2,
			0xe003d25ddc1f05c4,
			0xe509643d47807c2d,
			0xe71d5a32911f2529,
			0xe738c734c0705648,
			0xe7f779156bdabb8e,
			0xeb1ed22a5561aae3,
			0xf3541a8011e438c3,
			0xf4b2adaeac2fc134,
			0xf5578b838b5fb688,
			0xf6821b0b4a0ed4cc,
			0xfa55621a4bbb397a,
			0xfd8477ce39853249,
		},
		Compressed: true,
	})
}
