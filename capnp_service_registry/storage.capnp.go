// Code generated by capnpc-go. DO NOT EDIT.

package capnp_service_registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SturdyRefStored capnp.Struct

// SturdyRefStored_TypeID is the unique identifier for the type SturdyRefStored.
const SturdyRefStored_TypeID = 0xd0e34e1c95c7ef43

func NewSturdyRefStored(s *capnp.Segment) (SturdyRefStored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return SturdyRefStored(st), err
}

func NewRootSturdyRefStored(s *capnp.Segment) (SturdyRefStored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return SturdyRefStored(st), err
}

func ReadRootSturdyRefStored(msg *capnp.Message) (SturdyRefStored, error) {
	root, err := msg.Root()
	return SturdyRefStored(root.Struct()), err
}

func (s SturdyRefStored) String() string {
	str, _ := text.Marshal(0xd0e34e1c95c7ef43, capnp.Struct(s))
	return str
}

func (s SturdyRefStored) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRefStored) DecodeFromPtr(p capnp.Ptr) SturdyRefStored {
	return SturdyRefStored(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRefStored) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRefStored) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRefStored) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRefStored) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRefStored) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRefStored) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRefStored) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRefStored) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SturdyRefStored) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRefStored) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SturdyRefStored) Payload() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SturdyRefStored) HasPayload() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SturdyRefStored) PayloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetPayload(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SturdyRefStored) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SturdyRefStored) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SturdyRefStored) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s SturdyRefStored) PayloaDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s SturdyRefStored) HasPayloaDescription() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SturdyRefStored) PayloaDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetPayloaDescription(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// SturdyRefStored_List is a list of SturdyRefStored.
type SturdyRefStored_List = capnp.StructList[SturdyRefStored]

// NewSturdyRefStored creates a new list of SturdyRefStored.
func NewSturdyRefStored_List(s *capnp.Segment, sz int32) (SturdyRefStored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[SturdyRefStored](l), err
}

// SturdyRefStored_Future is a wrapper for a SturdyRefStored promised by a client call.
type SturdyRefStored_Future struct{ *capnp.Future }

func (f SturdyRefStored_Future) Struct() (SturdyRefStored, error) {
	p, err := f.Future.Ptr()
	return SturdyRefStored(p.Struct()), err
}

type StorageEditor capnp.Client

// StorageEditor_TypeID is the unique identifier for the type StorageEditor.
const StorageEditor_TypeID = 0x9770dabea2ed8eec

func (c StorageEditor) AddSturdyRef(ctx context.Context, params func(StorageEditor_addSturdyRef_Params) error) (StorageEditor_addSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "addSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_addSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_addSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) GetSturdyRef(ctx context.Context, params func(StorageEditor_getSturdyRef_Params) error) (StorageEditor_getSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      1,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "getSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_getSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_getSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) ListSturdyRefs(ctx context.Context, params func(StorageEditor_listSturdyRefs_Params) error) (StorageEditor_listSturdyRefs_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      2,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listSturdyRefs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_listSturdyRefs_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_listSturdyRefs_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) DeleteSturdyRef(ctx context.Context, params func(StorageEditor_deleteSturdyRef_Params) error) (StorageEditor_deleteSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      3,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "deleteSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_deleteSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_deleteSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StorageEditor) String() string {
	return "StorageEditor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StorageEditor) AddRef() StorageEditor {
	return StorageEditor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StorageEditor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StorageEditor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StorageEditor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StorageEditor) DecodeFromPtr(p capnp.Ptr) StorageEditor {
	return StorageEditor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StorageEditor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StorageEditor) IsSame(other StorageEditor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StorageEditor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StorageEditor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StorageEditor_Server is a StorageEditor with a local implementation.
type StorageEditor_Server interface {
	AddSturdyRef(context.Context, StorageEditor_addSturdyRef) error

	GetSturdyRef(context.Context, StorageEditor_getSturdyRef) error

	ListSturdyRefs(context.Context, StorageEditor_listSturdyRefs) error

	DeleteSturdyRef(context.Context, StorageEditor_deleteSturdyRef) error
}

// StorageEditor_NewServer creates a new Server from an implementation of StorageEditor_Server.
func StorageEditor_NewServer(s StorageEditor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StorageEditor_Methods(nil, s), s, c)
}

// StorageEditor_ServerToClient creates a new Client from an implementation of StorageEditor_Server.
// The caller is responsible for calling Release on the returned Client.
func StorageEditor_ServerToClient(s StorageEditor_Server) StorageEditor {
	return StorageEditor(capnp.NewClient(StorageEditor_NewServer(s)))
}

// StorageEditor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StorageEditor_Methods(methods []server.Method, s StorageEditor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "addSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddSturdyRef(ctx, StorageEditor_addSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      1,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "getSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSturdyRef(ctx, StorageEditor_getSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      2,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listSturdyRefs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListSturdyRefs(ctx, StorageEditor_listSturdyRefs{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      3,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "deleteSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeleteSturdyRef(ctx, StorageEditor_deleteSturdyRef{call})
		},
	})

	return methods
}

// StorageEditor_addSturdyRef holds the state for a server call to StorageEditor.addSturdyRef.
// See server.Call for documentation.
type StorageEditor_addSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_addSturdyRef) Args() StorageEditor_addSturdyRef_Params {
	return StorageEditor_addSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_addSturdyRef) AllocResults() (StorageEditor_addSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(r), err
}

// StorageEditor_getSturdyRef holds the state for a server call to StorageEditor.getSturdyRef.
// See server.Call for documentation.
type StorageEditor_getSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_getSturdyRef) Args() StorageEditor_getSturdyRef_Params {
	return StorageEditor_getSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_getSturdyRef) AllocResults() (StorageEditor_getSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(r), err
}

// StorageEditor_listSturdyRefs holds the state for a server call to StorageEditor.listSturdyRefs.
// See server.Call for documentation.
type StorageEditor_listSturdyRefs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_listSturdyRefs) Args() StorageEditor_listSturdyRefs_Params {
	return StorageEditor_listSturdyRefs_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_listSturdyRefs) AllocResults() (StorageEditor_listSturdyRefs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefs_Results(r), err
}

// StorageEditor_deleteSturdyRef holds the state for a server call to StorageEditor.deleteSturdyRef.
// See server.Call for documentation.
type StorageEditor_deleteSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_deleteSturdyRef) Args() StorageEditor_deleteSturdyRef_Params {
	return StorageEditor_deleteSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_deleteSturdyRef) AllocResults() (StorageEditor_deleteSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(r), err
}

// StorageEditor_List is a list of StorageEditor.
type StorageEditor_List = capnp.CapList[StorageEditor]

// NewStorageEditor_List creates a new list of StorageEditor.
func NewStorageEditor_List(s *capnp.Segment, sz int32) (StorageEditor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StorageEditor](l), err
}

type StorageEditor_addSturdyRef_Params capnp.Struct

// StorageEditor_addSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_addSturdyRef_Params.
const StorageEditor_addSturdyRef_Params_TypeID = 0x9ce5db24f2e15533

func NewStorageEditor_addSturdyRef_Params(s *capnp.Segment) (StorageEditor_addSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_addSturdyRef_Params(st), err
}

func NewRootStorageEditor_addSturdyRef_Params(s *capnp.Segment) (StorageEditor_addSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_addSturdyRef_Params(st), err
}

func ReadRootStorageEditor_addSturdyRef_Params(msg *capnp.Message) (StorageEditor_addSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_addSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_addSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x9ce5db24f2e15533, capnp.Struct(s))
	return str
}

func (s StorageEditor_addSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_addSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_addSturdyRef_Params {
	return StorageEditor_addSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_addSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_addSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_addSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_addSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_addSturdyRef_Params) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageEditor_addSturdyRef_Params) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_addSturdyRef_Params) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageEditor_addSturdyRef_Params) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageEditor_addSturdyRef_Params_List is a list of StorageEditor_addSturdyRef_Params.
type StorageEditor_addSturdyRef_Params_List = capnp.StructList[StorageEditor_addSturdyRef_Params]

// NewStorageEditor_addSturdyRef_Params creates a new list of StorageEditor_addSturdyRef_Params.
func NewStorageEditor_addSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_addSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_addSturdyRef_Params](l), err
}

// StorageEditor_addSturdyRef_Params_Future is a wrapper for a StorageEditor_addSturdyRef_Params promised by a client call.
type StorageEditor_addSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_addSturdyRef_Params_Future) Struct() (StorageEditor_addSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_addSturdyRef_Params(p.Struct()), err
}
func (p StorageEditor_addSturdyRef_Params_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type StorageEditor_addSturdyRef_Results capnp.Struct

// StorageEditor_addSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_addSturdyRef_Results.
const StorageEditor_addSturdyRef_Results_TypeID = 0xcdd7d69aee2dada4

func NewStorageEditor_addSturdyRef_Results(s *capnp.Segment) (StorageEditor_addSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(st), err
}

func NewRootStorageEditor_addSturdyRef_Results(s *capnp.Segment) (StorageEditor_addSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(st), err
}

func ReadRootStorageEditor_addSturdyRef_Results(msg *capnp.Message) (StorageEditor_addSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_addSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_addSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xcdd7d69aee2dada4, capnp.Struct(s))
	return str
}

func (s StorageEditor_addSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_addSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_addSturdyRef_Results {
	return StorageEditor_addSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_addSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_addSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_addSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_addSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_addSturdyRef_Results_List is a list of StorageEditor_addSturdyRef_Results.
type StorageEditor_addSturdyRef_Results_List = capnp.StructList[StorageEditor_addSturdyRef_Results]

// NewStorageEditor_addSturdyRef_Results creates a new list of StorageEditor_addSturdyRef_Results.
func NewStorageEditor_addSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_addSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_addSturdyRef_Results](l), err
}

// StorageEditor_addSturdyRef_Results_Future is a wrapper for a StorageEditor_addSturdyRef_Results promised by a client call.
type StorageEditor_addSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_addSturdyRef_Results_Future) Struct() (StorageEditor_addSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_addSturdyRef_Results(p.Struct()), err
}

type StorageEditor_getSturdyRef_Params capnp.Struct

// StorageEditor_getSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_getSturdyRef_Params.
const StorageEditor_getSturdyRef_Params_TypeID = 0x968c9bfbc19ef7b4

func NewStorageEditor_getSturdyRef_Params(s *capnp.Segment) (StorageEditor_getSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Params(st), err
}

func NewRootStorageEditor_getSturdyRef_Params(s *capnp.Segment) (StorageEditor_getSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Params(st), err
}

func ReadRootStorageEditor_getSturdyRef_Params(msg *capnp.Message) (StorageEditor_getSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_getSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_getSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x968c9bfbc19ef7b4, capnp.Struct(s))
	return str
}

func (s StorageEditor_getSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_getSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_getSturdyRef_Params {
	return StorageEditor_getSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_getSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_getSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_getSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_getSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_getSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_getSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_getSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_getSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_getSturdyRef_Params_List is a list of StorageEditor_getSturdyRef_Params.
type StorageEditor_getSturdyRef_Params_List = capnp.StructList[StorageEditor_getSturdyRef_Params]

// NewStorageEditor_getSturdyRef_Params creates a new list of StorageEditor_getSturdyRef_Params.
func NewStorageEditor_getSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_getSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_getSturdyRef_Params](l), err
}

// StorageEditor_getSturdyRef_Params_Future is a wrapper for a StorageEditor_getSturdyRef_Params promised by a client call.
type StorageEditor_getSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_getSturdyRef_Params_Future) Struct() (StorageEditor_getSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_getSturdyRef_Params(p.Struct()), err
}

type StorageEditor_getSturdyRef_Results capnp.Struct

// StorageEditor_getSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_getSturdyRef_Results.
const StorageEditor_getSturdyRef_Results_TypeID = 0xe509643d47807c2d

func NewStorageEditor_getSturdyRef_Results(s *capnp.Segment) (StorageEditor_getSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(st), err
}

func NewRootStorageEditor_getSturdyRef_Results(s *capnp.Segment) (StorageEditor_getSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(st), err
}

func ReadRootStorageEditor_getSturdyRef_Results(msg *capnp.Message) (StorageEditor_getSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_getSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_getSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xe509643d47807c2d, capnp.Struct(s))
	return str
}

func (s StorageEditor_getSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_getSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_getSturdyRef_Results {
	return StorageEditor_getSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_getSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_getSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_getSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_getSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_getSturdyRef_Results) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageEditor_getSturdyRef_Results) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_getSturdyRef_Results) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageEditor_getSturdyRef_Results) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageEditor_getSturdyRef_Results_List is a list of StorageEditor_getSturdyRef_Results.
type StorageEditor_getSturdyRef_Results_List = capnp.StructList[StorageEditor_getSturdyRef_Results]

// NewStorageEditor_getSturdyRef_Results creates a new list of StorageEditor_getSturdyRef_Results.
func NewStorageEditor_getSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_getSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_getSturdyRef_Results](l), err
}

// StorageEditor_getSturdyRef_Results_Future is a wrapper for a StorageEditor_getSturdyRef_Results promised by a client call.
type StorageEditor_getSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_getSturdyRef_Results_Future) Struct() (StorageEditor_getSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_getSturdyRef_Results(p.Struct()), err
}
func (p StorageEditor_getSturdyRef_Results_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type StorageEditor_listSturdyRefs_Params capnp.Struct

// StorageEditor_listSturdyRefs_Params_TypeID is the unique identifier for the type StorageEditor_listSturdyRefs_Params.
const StorageEditor_listSturdyRefs_Params_TypeID = 0xadb20e7070609f45

func NewStorageEditor_listSturdyRefs_Params(s *capnp.Segment) (StorageEditor_listSturdyRefs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefs_Params(st), err
}

func NewRootStorageEditor_listSturdyRefs_Params(s *capnp.Segment) (StorageEditor_listSturdyRefs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefs_Params(st), err
}

func ReadRootStorageEditor_listSturdyRefs_Params(msg *capnp.Message) (StorageEditor_listSturdyRefs_Params, error) {
	root, err := msg.Root()
	return StorageEditor_listSturdyRefs_Params(root.Struct()), err
}

func (s StorageEditor_listSturdyRefs_Params) String() string {
	str, _ := text.Marshal(0xadb20e7070609f45, capnp.Struct(s))
	return str
}

func (s StorageEditor_listSturdyRefs_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listSturdyRefs_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_listSturdyRefs_Params {
	return StorageEditor_listSturdyRefs_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listSturdyRefs_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listSturdyRefs_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listSturdyRefs_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listSturdyRefs_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listSturdyRefs_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_listSturdyRefs_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listSturdyRefs_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_listSturdyRefs_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_listSturdyRefs_Params_List is a list of StorageEditor_listSturdyRefs_Params.
type StorageEditor_listSturdyRefs_Params_List = capnp.StructList[StorageEditor_listSturdyRefs_Params]

// NewStorageEditor_listSturdyRefs_Params creates a new list of StorageEditor_listSturdyRefs_Params.
func NewStorageEditor_listSturdyRefs_Params_List(s *capnp.Segment, sz int32) (StorageEditor_listSturdyRefs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listSturdyRefs_Params](l), err
}

// StorageEditor_listSturdyRefs_Params_Future is a wrapper for a StorageEditor_listSturdyRefs_Params promised by a client call.
type StorageEditor_listSturdyRefs_Params_Future struct{ *capnp.Future }

func (f StorageEditor_listSturdyRefs_Params_Future) Struct() (StorageEditor_listSturdyRefs_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listSturdyRefs_Params(p.Struct()), err
}

type StorageEditor_listSturdyRefs_Results capnp.Struct

// StorageEditor_listSturdyRefs_Results_TypeID is the unique identifier for the type StorageEditor_listSturdyRefs_Results.
const StorageEditor_listSturdyRefs_Results_TypeID = 0xfa55621a4bbb397a

func NewStorageEditor_listSturdyRefs_Results(s *capnp.Segment) (StorageEditor_listSturdyRefs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefs_Results(st), err
}

func NewRootStorageEditor_listSturdyRefs_Results(s *capnp.Segment) (StorageEditor_listSturdyRefs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefs_Results(st), err
}

func ReadRootStorageEditor_listSturdyRefs_Results(msg *capnp.Message) (StorageEditor_listSturdyRefs_Results, error) {
	root, err := msg.Root()
	return StorageEditor_listSturdyRefs_Results(root.Struct()), err
}

func (s StorageEditor_listSturdyRefs_Results) String() string {
	str, _ := text.Marshal(0xfa55621a4bbb397a, capnp.Struct(s))
	return str
}

func (s StorageEditor_listSturdyRefs_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listSturdyRefs_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_listSturdyRefs_Results {
	return StorageEditor_listSturdyRefs_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listSturdyRefs_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listSturdyRefs_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listSturdyRefs_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listSturdyRefs_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listSturdyRefs_Results) Sturdyrefs() (SturdyRefStored_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored_List(p.List()), err
}

func (s StorageEditor_listSturdyRefs_Results) HasSturdyrefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listSturdyRefs_Results) SetSturdyrefs(v SturdyRefStored_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyrefs sets the sturdyrefs field to a newly
// allocated SturdyRefStored_List, preferring placement in s's segment.
func (s StorageEditor_listSturdyRefs_Results) NewSturdyrefs(n int32) (SturdyRefStored_List, error) {
	l, err := NewSturdyRefStored_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefStored_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// StorageEditor_listSturdyRefs_Results_List is a list of StorageEditor_listSturdyRefs_Results.
type StorageEditor_listSturdyRefs_Results_List = capnp.StructList[StorageEditor_listSturdyRefs_Results]

// NewStorageEditor_listSturdyRefs_Results creates a new list of StorageEditor_listSturdyRefs_Results.
func NewStorageEditor_listSturdyRefs_Results_List(s *capnp.Segment, sz int32) (StorageEditor_listSturdyRefs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listSturdyRefs_Results](l), err
}

// StorageEditor_listSturdyRefs_Results_Future is a wrapper for a StorageEditor_listSturdyRefs_Results promised by a client call.
type StorageEditor_listSturdyRefs_Results_Future struct{ *capnp.Future }

func (f StorageEditor_listSturdyRefs_Results_Future) Struct() (StorageEditor_listSturdyRefs_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listSturdyRefs_Results(p.Struct()), err
}

type StorageEditor_deleteSturdyRef_Params capnp.Struct

// StorageEditor_deleteSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_deleteSturdyRef_Params.
const StorageEditor_deleteSturdyRef_Params_TypeID = 0xa518a153042139c8

func NewStorageEditor_deleteSturdyRef_Params(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_deleteSturdyRef_Params(st), err
}

func NewRootStorageEditor_deleteSturdyRef_Params(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_deleteSturdyRef_Params(st), err
}

func ReadRootStorageEditor_deleteSturdyRef_Params(msg *capnp.Message) (StorageEditor_deleteSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_deleteSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_deleteSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xa518a153042139c8, capnp.Struct(s))
	return str
}

func (s StorageEditor_deleteSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_deleteSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_deleteSturdyRef_Params {
	return StorageEditor_deleteSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_deleteSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_deleteSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_deleteSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_deleteSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_deleteSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_deleteSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_deleteSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_deleteSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_deleteSturdyRef_Params_List is a list of StorageEditor_deleteSturdyRef_Params.
type StorageEditor_deleteSturdyRef_Params_List = capnp.StructList[StorageEditor_deleteSturdyRef_Params]

// NewStorageEditor_deleteSturdyRef_Params creates a new list of StorageEditor_deleteSturdyRef_Params.
func NewStorageEditor_deleteSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_deleteSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_deleteSturdyRef_Params](l), err
}

// StorageEditor_deleteSturdyRef_Params_Future is a wrapper for a StorageEditor_deleteSturdyRef_Params promised by a client call.
type StorageEditor_deleteSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_deleteSturdyRef_Params_Future) Struct() (StorageEditor_deleteSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_deleteSturdyRef_Params(p.Struct()), err
}

type StorageEditor_deleteSturdyRef_Results capnp.Struct

// StorageEditor_deleteSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_deleteSturdyRef_Results.
const StorageEditor_deleteSturdyRef_Results_TypeID = 0x9248a5211394ad54

func NewStorageEditor_deleteSturdyRef_Results(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(st), err
}

func NewRootStorageEditor_deleteSturdyRef_Results(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(st), err
}

func ReadRootStorageEditor_deleteSturdyRef_Results(msg *capnp.Message) (StorageEditor_deleteSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_deleteSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_deleteSturdyRef_Results) String() string {
	str, _ := text.Marshal(0x9248a5211394ad54, capnp.Struct(s))
	return str
}

func (s StorageEditor_deleteSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_deleteSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_deleteSturdyRef_Results {
	return StorageEditor_deleteSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_deleteSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_deleteSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_deleteSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_deleteSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_deleteSturdyRef_Results_List is a list of StorageEditor_deleteSturdyRef_Results.
type StorageEditor_deleteSturdyRef_Results_List = capnp.StructList[StorageEditor_deleteSturdyRef_Results]

// NewStorageEditor_deleteSturdyRef_Results creates a new list of StorageEditor_deleteSturdyRef_Results.
func NewStorageEditor_deleteSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_deleteSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_deleteSturdyRef_Results](l), err
}

// StorageEditor_deleteSturdyRef_Results_Future is a wrapper for a StorageEditor_deleteSturdyRef_Results promised by a client call.
type StorageEditor_deleteSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_deleteSturdyRef_Results_Future) Struct() (StorageEditor_deleteSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_deleteSturdyRef_Results(p.Struct()), err
}

type StorageReader capnp.Client

// StorageReader_TypeID is the unique identifier for the type StorageReader.
const StorageReader_TypeID = 0xeb1ed22a5561aae3

func (c StorageReader) GetSturdyRef(ctx context.Context, params func(StorageReader_getSturdyRef_Params) error) (StorageReader_getSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeb1ed22a5561aae3,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageReader",
			MethodName:    "getSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageReader_getSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageReader_getSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageReader) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StorageReader) String() string {
	return "StorageReader(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StorageReader) AddRef() StorageReader {
	return StorageReader(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StorageReader) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StorageReader) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StorageReader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StorageReader) DecodeFromPtr(p capnp.Ptr) StorageReader {
	return StorageReader(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StorageReader) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StorageReader) IsSame(other StorageReader) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StorageReader) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StorageReader) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StorageReader_Server is a StorageReader with a local implementation.
type StorageReader_Server interface {
	GetSturdyRef(context.Context, StorageReader_getSturdyRef) error
}

// StorageReader_NewServer creates a new Server from an implementation of StorageReader_Server.
func StorageReader_NewServer(s StorageReader_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StorageReader_Methods(nil, s), s, c)
}

// StorageReader_ServerToClient creates a new Client from an implementation of StorageReader_Server.
// The caller is responsible for calling Release on the returned Client.
func StorageReader_ServerToClient(s StorageReader_Server) StorageReader {
	return StorageReader(capnp.NewClient(StorageReader_NewServer(s)))
}

// StorageReader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StorageReader_Methods(methods []server.Method, s StorageReader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeb1ed22a5561aae3,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageReader",
			MethodName:    "getSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSturdyRef(ctx, StorageReader_getSturdyRef{call})
		},
	})

	return methods
}

// StorageReader_getSturdyRef holds the state for a server call to StorageReader.getSturdyRef.
// See server.Call for documentation.
type StorageReader_getSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageReader_getSturdyRef) Args() StorageReader_getSturdyRef_Params {
	return StorageReader_getSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageReader_getSturdyRef) AllocResults() (StorageReader_getSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(r), err
}

// StorageReader_List is a list of StorageReader.
type StorageReader_List = capnp.CapList[StorageReader]

// NewStorageReader_List creates a new list of StorageReader.
func NewStorageReader_List(s *capnp.Segment, sz int32) (StorageReader_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StorageReader](l), err
}

type StorageReader_getSturdyRef_Params capnp.Struct

// StorageReader_getSturdyRef_Params_TypeID is the unique identifier for the type StorageReader_getSturdyRef_Params.
const StorageReader_getSturdyRef_Params_TypeID = 0xa478d6877d52b582

func NewStorageReader_getSturdyRef_Params(s *capnp.Segment) (StorageReader_getSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Params(st), err
}

func NewRootStorageReader_getSturdyRef_Params(s *capnp.Segment) (StorageReader_getSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Params(st), err
}

func ReadRootStorageReader_getSturdyRef_Params(msg *capnp.Message) (StorageReader_getSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageReader_getSturdyRef_Params(root.Struct()), err
}

func (s StorageReader_getSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xa478d6877d52b582, capnp.Struct(s))
	return str
}

func (s StorageReader_getSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageReader_getSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageReader_getSturdyRef_Params {
	return StorageReader_getSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageReader_getSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageReader_getSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageReader_getSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageReader_getSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageReader_getSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageReader_getSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageReader_getSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageReader_getSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageReader_getSturdyRef_Params_List is a list of StorageReader_getSturdyRef_Params.
type StorageReader_getSturdyRef_Params_List = capnp.StructList[StorageReader_getSturdyRef_Params]

// NewStorageReader_getSturdyRef_Params creates a new list of StorageReader_getSturdyRef_Params.
func NewStorageReader_getSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageReader_getSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageReader_getSturdyRef_Params](l), err
}

// StorageReader_getSturdyRef_Params_Future is a wrapper for a StorageReader_getSturdyRef_Params promised by a client call.
type StorageReader_getSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageReader_getSturdyRef_Params_Future) Struct() (StorageReader_getSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageReader_getSturdyRef_Params(p.Struct()), err
}

type StorageReader_getSturdyRef_Results capnp.Struct

// StorageReader_getSturdyRef_Results_TypeID is the unique identifier for the type StorageReader_getSturdyRef_Results.
const StorageReader_getSturdyRef_Results_TypeID = 0xd0dff216087c0481

func NewStorageReader_getSturdyRef_Results(s *capnp.Segment) (StorageReader_getSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(st), err
}

func NewRootStorageReader_getSturdyRef_Results(s *capnp.Segment) (StorageReader_getSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(st), err
}

func ReadRootStorageReader_getSturdyRef_Results(msg *capnp.Message) (StorageReader_getSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageReader_getSturdyRef_Results(root.Struct()), err
}

func (s StorageReader_getSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xd0dff216087c0481, capnp.Struct(s))
	return str
}

func (s StorageReader_getSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageReader_getSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageReader_getSturdyRef_Results {
	return StorageReader_getSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageReader_getSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageReader_getSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageReader_getSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageReader_getSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageReader_getSturdyRef_Results) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageReader_getSturdyRef_Results) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageReader_getSturdyRef_Results) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageReader_getSturdyRef_Results) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageReader_getSturdyRef_Results_List is a list of StorageReader_getSturdyRef_Results.
type StorageReader_getSturdyRef_Results_List = capnp.StructList[StorageReader_getSturdyRef_Results]

// NewStorageReader_getSturdyRef_Results creates a new list of StorageReader_getSturdyRef_Results.
func NewStorageReader_getSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageReader_getSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageReader_getSturdyRef_Results](l), err
}

// StorageReader_getSturdyRef_Results_Future is a wrapper for a StorageReader_getSturdyRef_Results promised by a client call.
type StorageReader_getSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageReader_getSturdyRef_Results_Future) Struct() (StorageReader_getSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageReader_getSturdyRef_Results(p.Struct()), err
}
func (p StorageReader_getSturdyRef_Results_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type UserStored capnp.Struct

// UserStored_TypeID is the unique identifier for the type UserStored.
const UserStored_TypeID = 0x8ef7e2521d75bf04

func NewUserStored(s *capnp.Segment) (UserStored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserStored(st), err
}

func NewRootUserStored(s *capnp.Segment) (UserStored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserStored(st), err
}

func ReadRootUserStored(msg *capnp.Message) (UserStored, error) {
	root, err := msg.Root()
	return UserStored(root.Struct()), err
}

func (s UserStored) String() string {
	str, _ := text.Marshal(0x8ef7e2521d75bf04, capnp.Struct(s))
	return str
}

func (s UserStored) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserStored) DecodeFromPtr(p capnp.Ptr) UserStored {
	return UserStored(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserStored) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserStored) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserStored) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserStored) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserStored) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserStored) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserStored) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserStored) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserStored) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserStored) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserStored) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserStored) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserStored_List is a list of UserStored.
type UserStored_List = capnp.StructList[UserStored]

// NewUserStored creates a new list of UserStored.
func NewUserStored_List(s *capnp.Segment, sz int32) (UserStored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UserStored](l), err
}

// UserStored_Future is a wrapper for a UserStored promised by a client call.
type UserStored_Future struct{ *capnp.Future }

func (f UserStored_Future) Struct() (UserStored, error) {
	p, err := f.Future.Ptr()
	return UserStored(p.Struct()), err
}

type UserEditor capnp.Client

// UserEditor_TypeID is the unique identifier for the type UserEditor.
const UserEditor_TypeID = 0x84761835db7b4b72

func (c UserEditor) NewUser(ctx context.Context, params func(UserEditor_newUser_Params) error) (UserEditor_newUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      0,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "newUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_newUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_newUser_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) DeleteUser(ctx context.Context, params func(UserEditor_deleteUser_Params) error) (UserEditor_deleteUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      1,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "deleteUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_deleteUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_deleteUser_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) FindByToken(ctx context.Context, params func(UserEditor_findByToken_Params) error) (UserEditor_findByToken_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      2,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findByToken",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_findByToken_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_findByToken_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) FindBySignature(ctx context.Context, params func(UserEditor_findBySignature_Params) error) (UserEditor_findBySignature_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      3,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findBySignature",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_findBySignature_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_findBySignature_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) AddSeal(ctx context.Context, params func(UserEditor_addSeal_Params) error) (UserEditor_addSeal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      4,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "addSeal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_addSeal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_addSeal_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UserEditor) String() string {
	return "UserEditor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UserEditor) AddRef() UserEditor {
	return UserEditor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UserEditor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UserEditor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UserEditor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UserEditor) DecodeFromPtr(p capnp.Ptr) UserEditor {
	return UserEditor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UserEditor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UserEditor) IsSame(other UserEditor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UserEditor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UserEditor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UserEditor_Server is a UserEditor with a local implementation.
type UserEditor_Server interface {
	NewUser(context.Context, UserEditor_newUser) error

	DeleteUser(context.Context, UserEditor_deleteUser) error

	FindByToken(context.Context, UserEditor_findByToken) error

	FindBySignature(context.Context, UserEditor_findBySignature) error

	AddSeal(context.Context, UserEditor_addSeal) error
}

// UserEditor_NewServer creates a new Server from an implementation of UserEditor_Server.
func UserEditor_NewServer(s UserEditor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UserEditor_Methods(nil, s), s, c)
}

// UserEditor_ServerToClient creates a new Client from an implementation of UserEditor_Server.
// The caller is responsible for calling Release on the returned Client.
func UserEditor_ServerToClient(s UserEditor_Server) UserEditor {
	return UserEditor(capnp.NewClient(UserEditor_NewServer(s)))
}

// UserEditor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UserEditor_Methods(methods []server.Method, s UserEditor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      0,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "newUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewUser(ctx, UserEditor_newUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      1,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "deleteUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeleteUser(ctx, UserEditor_deleteUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      2,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findByToken",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindByToken(ctx, UserEditor_findByToken{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      3,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findBySignature",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindBySignature(ctx, UserEditor_findBySignature{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      4,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "addSeal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddSeal(ctx, UserEditor_addSeal{call})
		},
	})

	return methods
}

// UserEditor_newUser holds the state for a server call to UserEditor.newUser.
// See server.Call for documentation.
type UserEditor_newUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_newUser) Args() UserEditor_newUser_Params {
	return UserEditor_newUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_newUser) AllocResults() (UserEditor_newUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(r), err
}

// UserEditor_deleteUser holds the state for a server call to UserEditor.deleteUser.
// See server.Call for documentation.
type UserEditor_deleteUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_deleteUser) Args() UserEditor_deleteUser_Params {
	return UserEditor_deleteUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_deleteUser) AllocResults() (UserEditor_deleteUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(r), err
}

// UserEditor_findByToken holds the state for a server call to UserEditor.findByToken.
// See server.Call for documentation.
type UserEditor_findByToken struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_findByToken) Args() UserEditor_findByToken_Params {
	return UserEditor_findByToken_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_findByToken) AllocResults() (UserEditor_findByToken_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(r), err
}

// UserEditor_findBySignature holds the state for a server call to UserEditor.findBySignature.
// See server.Call for documentation.
type UserEditor_findBySignature struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_findBySignature) Args() UserEditor_findBySignature_Params {
	return UserEditor_findBySignature_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_findBySignature) AllocResults() (UserEditor_findBySignature_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(r), err
}

// UserEditor_addSeal holds the state for a server call to UserEditor.addSeal.
// See server.Call for documentation.
type UserEditor_addSeal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_addSeal) Args() UserEditor_addSeal_Params {
	return UserEditor_addSeal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_addSeal) AllocResults() (UserEditor_addSeal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(r), err
}

// UserEditor_List is a list of UserEditor.
type UserEditor_List = capnp.CapList[UserEditor]

// NewUserEditor_List creates a new list of UserEditor.
func NewUserEditor_List(s *capnp.Segment, sz int32) (UserEditor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UserEditor](l), err
}

type UserEditor_newUser_Params capnp.Struct

// UserEditor_newUser_Params_TypeID is the unique identifier for the type UserEditor_newUser_Params.
const UserEditor_newUser_Params_TypeID = 0xb8926ab3e343717f

func NewUserEditor_newUser_Params(s *capnp.Segment) (UserEditor_newUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_newUser_Params(st), err
}

func NewRootUserEditor_newUser_Params(s *capnp.Segment) (UserEditor_newUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_newUser_Params(st), err
}

func ReadRootUserEditor_newUser_Params(msg *capnp.Message) (UserEditor_newUser_Params, error) {
	root, err := msg.Root()
	return UserEditor_newUser_Params(root.Struct()), err
}

func (s UserEditor_newUser_Params) String() string {
	str, _ := text.Marshal(0xb8926ab3e343717f, capnp.Struct(s))
	return str
}

func (s UserEditor_newUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_newUser_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_newUser_Params {
	return UserEditor_newUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_newUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_newUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_newUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_newUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_newUser_Params_List is a list of UserEditor_newUser_Params.
type UserEditor_newUser_Params_List = capnp.StructList[UserEditor_newUser_Params]

// NewUserEditor_newUser_Params creates a new list of UserEditor_newUser_Params.
func NewUserEditor_newUser_Params_List(s *capnp.Segment, sz int32) (UserEditor_newUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_newUser_Params](l), err
}

// UserEditor_newUser_Params_Future is a wrapper for a UserEditor_newUser_Params promised by a client call.
type UserEditor_newUser_Params_Future struct{ *capnp.Future }

func (f UserEditor_newUser_Params_Future) Struct() (UserEditor_newUser_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_newUser_Params(p.Struct()), err
}

type UserEditor_newUser_Results capnp.Struct

// UserEditor_newUser_Results_TypeID is the unique identifier for the type UserEditor_newUser_Results.
const UserEditor_newUser_Results_TypeID = 0xbdeca414321680f4

func NewUserEditor_newUser_Results(s *capnp.Segment) (UserEditor_newUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(st), err
}

func NewRootUserEditor_newUser_Results(s *capnp.Segment) (UserEditor_newUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(st), err
}

func ReadRootUserEditor_newUser_Results(msg *capnp.Message) (UserEditor_newUser_Results, error) {
	root, err := msg.Root()
	return UserEditor_newUser_Results(root.Struct()), err
}

func (s UserEditor_newUser_Results) String() string {
	str, _ := text.Marshal(0xbdeca414321680f4, capnp.Struct(s))
	return str
}

func (s UserEditor_newUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_newUser_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_newUser_Results {
	return UserEditor_newUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_newUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_newUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_newUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_newUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_newUser_Results) User() (UserStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserStored(p.Struct()), err
}

func (s UserEditor_newUser_Results) HasUser() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_newUser_Results) SetUser(v UserStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUser sets the user field to a newly
// allocated UserStored struct, preferring placement in s's segment.
func (s UserEditor_newUser_Results) NewUser() (UserStored, error) {
	ss, err := NewUserStored(capnp.Struct(s).Segment())
	if err != nil {
		return UserStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// UserEditor_newUser_Results_List is a list of UserEditor_newUser_Results.
type UserEditor_newUser_Results_List = capnp.StructList[UserEditor_newUser_Results]

// NewUserEditor_newUser_Results creates a new list of UserEditor_newUser_Results.
func NewUserEditor_newUser_Results_List(s *capnp.Segment, sz int32) (UserEditor_newUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_newUser_Results](l), err
}

// UserEditor_newUser_Results_Future is a wrapper for a UserEditor_newUser_Results promised by a client call.
type UserEditor_newUser_Results_Future struct{ *capnp.Future }

func (f UserEditor_newUser_Results_Future) Struct() (UserEditor_newUser_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_newUser_Results(p.Struct()), err
}
func (p UserEditor_newUser_Results_Future) User() UserStored_Future {
	return UserStored_Future{Future: p.Future.Field(0, nil)}
}

type UserEditor_deleteUser_Params capnp.Struct

// UserEditor_deleteUser_Params_TypeID is the unique identifier for the type UserEditor_deleteUser_Params.
const UserEditor_deleteUser_Params_TypeID = 0x8e9be0a3d79fa1a0

func NewUserEditor_deleteUser_Params(s *capnp.Segment) (UserEditor_deleteUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_deleteUser_Params(st), err
}

func NewRootUserEditor_deleteUser_Params(s *capnp.Segment) (UserEditor_deleteUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_deleteUser_Params(st), err
}

func ReadRootUserEditor_deleteUser_Params(msg *capnp.Message) (UserEditor_deleteUser_Params, error) {
	root, err := msg.Root()
	return UserEditor_deleteUser_Params(root.Struct()), err
}

func (s UserEditor_deleteUser_Params) String() string {
	str, _ := text.Marshal(0x8e9be0a3d79fa1a0, capnp.Struct(s))
	return str
}

func (s UserEditor_deleteUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_deleteUser_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_deleteUser_Params {
	return UserEditor_deleteUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_deleteUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_deleteUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_deleteUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_deleteUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_deleteUser_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_deleteUser_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_deleteUser_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_deleteUser_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_deleteUser_Params_List is a list of UserEditor_deleteUser_Params.
type UserEditor_deleteUser_Params_List = capnp.StructList[UserEditor_deleteUser_Params]

// NewUserEditor_deleteUser_Params creates a new list of UserEditor_deleteUser_Params.
func NewUserEditor_deleteUser_Params_List(s *capnp.Segment, sz int32) (UserEditor_deleteUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_deleteUser_Params](l), err
}

// UserEditor_deleteUser_Params_Future is a wrapper for a UserEditor_deleteUser_Params promised by a client call.
type UserEditor_deleteUser_Params_Future struct{ *capnp.Future }

func (f UserEditor_deleteUser_Params_Future) Struct() (UserEditor_deleteUser_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_deleteUser_Params(p.Struct()), err
}

type UserEditor_deleteUser_Results capnp.Struct

// UserEditor_deleteUser_Results_TypeID is the unique identifier for the type UserEditor_deleteUser_Results.
const UserEditor_deleteUser_Results_TypeID = 0xbb64bbd4b54a0ac7

func NewUserEditor_deleteUser_Results(s *capnp.Segment) (UserEditor_deleteUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(st), err
}

func NewRootUserEditor_deleteUser_Results(s *capnp.Segment) (UserEditor_deleteUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(st), err
}

func ReadRootUserEditor_deleteUser_Results(msg *capnp.Message) (UserEditor_deleteUser_Results, error) {
	root, err := msg.Root()
	return UserEditor_deleteUser_Results(root.Struct()), err
}

func (s UserEditor_deleteUser_Results) String() string {
	str, _ := text.Marshal(0xbb64bbd4b54a0ac7, capnp.Struct(s))
	return str
}

func (s UserEditor_deleteUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_deleteUser_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_deleteUser_Results {
	return UserEditor_deleteUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_deleteUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_deleteUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_deleteUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_deleteUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_deleteUser_Results_List is a list of UserEditor_deleteUser_Results.
type UserEditor_deleteUser_Results_List = capnp.StructList[UserEditor_deleteUser_Results]

// NewUserEditor_deleteUser_Results creates a new list of UserEditor_deleteUser_Results.
func NewUserEditor_deleteUser_Results_List(s *capnp.Segment, sz int32) (UserEditor_deleteUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_deleteUser_Results](l), err
}

// UserEditor_deleteUser_Results_Future is a wrapper for a UserEditor_deleteUser_Results promised by a client call.
type UserEditor_deleteUser_Results_Future struct{ *capnp.Future }

func (f UserEditor_deleteUser_Results_Future) Struct() (UserEditor_deleteUser_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_deleteUser_Results(p.Struct()), err
}

type UserEditor_findByToken_Params capnp.Struct

// UserEditor_findByToken_Params_TypeID is the unique identifier for the type UserEditor_findByToken_Params.
const UserEditor_findByToken_Params_TypeID = 0xc758e2223661f240

func NewUserEditor_findByToken_Params(s *capnp.Segment) (UserEditor_findByToken_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Params(st), err
}

func NewRootUserEditor_findByToken_Params(s *capnp.Segment) (UserEditor_findByToken_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Params(st), err
}

func ReadRootUserEditor_findByToken_Params(msg *capnp.Message) (UserEditor_findByToken_Params, error) {
	root, err := msg.Root()
	return UserEditor_findByToken_Params(root.Struct()), err
}

func (s UserEditor_findByToken_Params) String() string {
	str, _ := text.Marshal(0xc758e2223661f240, capnp.Struct(s))
	return str
}

func (s UserEditor_findByToken_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findByToken_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_findByToken_Params {
	return UserEditor_findByToken_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findByToken_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findByToken_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findByToken_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findByToken_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findByToken_Params) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findByToken_Params) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findByToken_Params) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findByToken_Params) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findByToken_Params_List is a list of UserEditor_findByToken_Params.
type UserEditor_findByToken_Params_List = capnp.StructList[UserEditor_findByToken_Params]

// NewUserEditor_findByToken_Params creates a new list of UserEditor_findByToken_Params.
func NewUserEditor_findByToken_Params_List(s *capnp.Segment, sz int32) (UserEditor_findByToken_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findByToken_Params](l), err
}

// UserEditor_findByToken_Params_Future is a wrapper for a UserEditor_findByToken_Params promised by a client call.
type UserEditor_findByToken_Params_Future struct{ *capnp.Future }

func (f UserEditor_findByToken_Params_Future) Struct() (UserEditor_findByToken_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findByToken_Params(p.Struct()), err
}

type UserEditor_findByToken_Results capnp.Struct

// UserEditor_findByToken_Results_TypeID is the unique identifier for the type UserEditor_findByToken_Results.
const UserEditor_findByToken_Results_TypeID = 0x83b4805dae03e8f2

func NewUserEditor_findByToken_Results(s *capnp.Segment) (UserEditor_findByToken_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(st), err
}

func NewRootUserEditor_findByToken_Results(s *capnp.Segment) (UserEditor_findByToken_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(st), err
}

func ReadRootUserEditor_findByToken_Results(msg *capnp.Message) (UserEditor_findByToken_Results, error) {
	root, err := msg.Root()
	return UserEditor_findByToken_Results(root.Struct()), err
}

func (s UserEditor_findByToken_Results) String() string {
	str, _ := text.Marshal(0x83b4805dae03e8f2, capnp.Struct(s))
	return str
}

func (s UserEditor_findByToken_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findByToken_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_findByToken_Results {
	return UserEditor_findByToken_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findByToken_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findByToken_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findByToken_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findByToken_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findByToken_Results) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findByToken_Results) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findByToken_Results) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findByToken_Results) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findByToken_Results_List is a list of UserEditor_findByToken_Results.
type UserEditor_findByToken_Results_List = capnp.StructList[UserEditor_findByToken_Results]

// NewUserEditor_findByToken_Results creates a new list of UserEditor_findByToken_Results.
func NewUserEditor_findByToken_Results_List(s *capnp.Segment, sz int32) (UserEditor_findByToken_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findByToken_Results](l), err
}

// UserEditor_findByToken_Results_Future is a wrapper for a UserEditor_findByToken_Results promised by a client call.
type UserEditor_findByToken_Results_Future struct{ *capnp.Future }

func (f UserEditor_findByToken_Results_Future) Struct() (UserEditor_findByToken_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findByToken_Results(p.Struct()), err
}

type UserEditor_findBySignature_Params capnp.Struct

// UserEditor_findBySignature_Params_TypeID is the unique identifier for the type UserEditor_findBySignature_Params.
const UserEditor_findBySignature_Params_TypeID = 0xdd3326f2fdb223a9

func NewUserEditor_findBySignature_Params(s *capnp.Segment) (UserEditor_findBySignature_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Params(st), err
}

func NewRootUserEditor_findBySignature_Params(s *capnp.Segment) (UserEditor_findBySignature_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Params(st), err
}

func ReadRootUserEditor_findBySignature_Params(msg *capnp.Message) (UserEditor_findBySignature_Params, error) {
	root, err := msg.Root()
	return UserEditor_findBySignature_Params(root.Struct()), err
}

func (s UserEditor_findBySignature_Params) String() string {
	str, _ := text.Marshal(0xdd3326f2fdb223a9, capnp.Struct(s))
	return str
}

func (s UserEditor_findBySignature_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findBySignature_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_findBySignature_Params {
	return UserEditor_findBySignature_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findBySignature_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findBySignature_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findBySignature_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findBySignature_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findBySignature_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findBySignature_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findBySignature_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findBySignature_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findBySignature_Params_List is a list of UserEditor_findBySignature_Params.
type UserEditor_findBySignature_Params_List = capnp.StructList[UserEditor_findBySignature_Params]

// NewUserEditor_findBySignature_Params creates a new list of UserEditor_findBySignature_Params.
func NewUserEditor_findBySignature_Params_List(s *capnp.Segment, sz int32) (UserEditor_findBySignature_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findBySignature_Params](l), err
}

// UserEditor_findBySignature_Params_Future is a wrapper for a UserEditor_findBySignature_Params promised by a client call.
type UserEditor_findBySignature_Params_Future struct{ *capnp.Future }

func (f UserEditor_findBySignature_Params_Future) Struct() (UserEditor_findBySignature_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findBySignature_Params(p.Struct()), err
}

type UserEditor_findBySignature_Results capnp.Struct

// UserEditor_findBySignature_Results_TypeID is the unique identifier for the type UserEditor_findBySignature_Results.
const UserEditor_findBySignature_Results_TypeID = 0xb34c006f915d9adb

func NewUserEditor_findBySignature_Results(s *capnp.Segment) (UserEditor_findBySignature_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(st), err
}

func NewRootUserEditor_findBySignature_Results(s *capnp.Segment) (UserEditor_findBySignature_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(st), err
}

func ReadRootUserEditor_findBySignature_Results(msg *capnp.Message) (UserEditor_findBySignature_Results, error) {
	root, err := msg.Root()
	return UserEditor_findBySignature_Results(root.Struct()), err
}

func (s UserEditor_findBySignature_Results) String() string {
	str, _ := text.Marshal(0xb34c006f915d9adb, capnp.Struct(s))
	return str
}

func (s UserEditor_findBySignature_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findBySignature_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_findBySignature_Results {
	return UserEditor_findBySignature_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findBySignature_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findBySignature_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findBySignature_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findBySignature_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findBySignature_Results) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findBySignature_Results) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findBySignature_Results) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findBySignature_Results) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findBySignature_Results_List is a list of UserEditor_findBySignature_Results.
type UserEditor_findBySignature_Results_List = capnp.StructList[UserEditor_findBySignature_Results]

// NewUserEditor_findBySignature_Results creates a new list of UserEditor_findBySignature_Results.
func NewUserEditor_findBySignature_Results_List(s *capnp.Segment, sz int32) (UserEditor_findBySignature_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findBySignature_Results](l), err
}

// UserEditor_findBySignature_Results_Future is a wrapper for a UserEditor_findBySignature_Results promised by a client call.
type UserEditor_findBySignature_Results_Future struct{ *capnp.Future }

func (f UserEditor_findBySignature_Results_Future) Struct() (UserEditor_findBySignature_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findBySignature_Results(p.Struct()), err
}

type UserEditor_addSeal_Params capnp.Struct

// UserEditor_addSeal_Params_TypeID is the unique identifier for the type UserEditor_addSeal_Params.
const UserEditor_addSeal_Params_TypeID = 0x97eb1b20191db78a

func NewUserEditor_addSeal_Params(s *capnp.Segment) (UserEditor_addSeal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserEditor_addSeal_Params(st), err
}

func NewRootUserEditor_addSeal_Params(s *capnp.Segment) (UserEditor_addSeal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserEditor_addSeal_Params(st), err
}

func ReadRootUserEditor_addSeal_Params(msg *capnp.Message) (UserEditor_addSeal_Params, error) {
	root, err := msg.Root()
	return UserEditor_addSeal_Params(root.Struct()), err
}

func (s UserEditor_addSeal_Params) String() string {
	str, _ := text.Marshal(0x97eb1b20191db78a, capnp.Struct(s))
	return str
}

func (s UserEditor_addSeal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_addSeal_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_addSeal_Params {
	return UserEditor_addSeal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_addSeal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_addSeal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_addSeal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_addSeal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_addSeal_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_addSeal_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_addSeal_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_addSeal_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserEditor_addSeal_Params) Seal() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserEditor_addSeal_Params) HasSeal() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserEditor_addSeal_Params) SealBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserEditor_addSeal_Params) SetSeal(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserEditor_addSeal_Params_List is a list of UserEditor_addSeal_Params.
type UserEditor_addSeal_Params_List = capnp.StructList[UserEditor_addSeal_Params]

// NewUserEditor_addSeal_Params creates a new list of UserEditor_addSeal_Params.
func NewUserEditor_addSeal_Params_List(s *capnp.Segment, sz int32) (UserEditor_addSeal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UserEditor_addSeal_Params](l), err
}

// UserEditor_addSeal_Params_Future is a wrapper for a UserEditor_addSeal_Params promised by a client call.
type UserEditor_addSeal_Params_Future struct{ *capnp.Future }

func (f UserEditor_addSeal_Params_Future) Struct() (UserEditor_addSeal_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_addSeal_Params(p.Struct()), err
}

type UserEditor_addSeal_Results capnp.Struct

// UserEditor_addSeal_Results_TypeID is the unique identifier for the type UserEditor_addSeal_Results.
const UserEditor_addSeal_Results_TypeID = 0xfd8477ce39853249

func NewUserEditor_addSeal_Results(s *capnp.Segment) (UserEditor_addSeal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(st), err
}

func NewRootUserEditor_addSeal_Results(s *capnp.Segment) (UserEditor_addSeal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(st), err
}

func ReadRootUserEditor_addSeal_Results(msg *capnp.Message) (UserEditor_addSeal_Results, error) {
	root, err := msg.Root()
	return UserEditor_addSeal_Results(root.Struct()), err
}

func (s UserEditor_addSeal_Results) String() string {
	str, _ := text.Marshal(0xfd8477ce39853249, capnp.Struct(s))
	return str
}

func (s UserEditor_addSeal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_addSeal_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_addSeal_Results {
	return UserEditor_addSeal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_addSeal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_addSeal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_addSeal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_addSeal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_addSeal_Results_List is a list of UserEditor_addSeal_Results.
type UserEditor_addSeal_Results_List = capnp.StructList[UserEditor_addSeal_Results]

// NewUserEditor_addSeal_Results creates a new list of UserEditor_addSeal_Results.
func NewUserEditor_addSeal_Results_List(s *capnp.Segment, sz int32) (UserEditor_addSeal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_addSeal_Results](l), err
}

// UserEditor_addSeal_Results_Future is a wrapper for a UserEditor_addSeal_Results promised by a client call.
type UserEditor_addSeal_Results_Future struct{ *capnp.Future }

func (f UserEditor_addSeal_Results_Future) Struct() (UserEditor_addSeal_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_addSeal_Results(p.Struct()), err
}

const schema_dca555fc76741dc1 = "x\xda\xdcZ{pTe\x96\xffN\xdfn\x9a`\x92" +
	"\xce\x97\x9bw\xd2F\xd6h\x09\x1aVDV\x82R\x09" +
	"/c\x105\xddIT\xa8\x0ar\x93\xbe\xb0\x17:\xdd" +
	"Iw'\xd9\xce\xc2\xf2\x12\x11\x10\x8a\xa0`\x11q\x15" +
	"$\xb5\"\xb2\x14 \xab\xc8\xa2\xe38\x882\xf8(\x14" +
	",\x03\xbe@\xc5Rt\x9c\x8c\x0c\xea\xe8\xf4\xd4\xf9n" +
	"\x7f\xb7\xbft\xdf\xce\xa3\xc6\x7ff\xfe\xbb\xb99\xf7<" +
	"~\xe7\xf1\x9d\xf3\x9d\xbe~\xea\x88\x0a\xeb\xd84\x7f\x1e" +
	"\xb1\xd4\x14\x81mX\xe4|\xdb\xae\xc8\xb5\xae\xb9\xcb\x08" +
	"-\x04Bl`'d\x9c3u;\x10\x90KS\xcb" +
	"\x09Dz\xbf\x94\xfe\xb7~\xe9s+\x08\xcd7\x08\x94" +
	"\xd4\x05H\xd0\xc4\x08\x02\xb7\xff\xe7\xe9\xf1ym\xf7\x13" +
	"\x9a.E^q\x86\xda~\xae\xeb>C\x08\xc8\x9d\xa9" +
	"\xc7\xe4\xc7S\x91~Kj%\xc8MivB\"\xaf" +
	"\x7f\xf2\xc5\xd2\xa2\xf6\x0b+\x09\xbd\x1c\x08\xb1\xe2\x7f\xeb" +
	"\xd2\xf6\x01\xb1F\x16^u\xfb\xe5Vu\xed*B\x0b" +
	"\x0cA\xd3\xd3\xd6\xa0\xa0\xba4\x14T\xbd\xb8\xf2\x07\xff" +
	"]UkD\x82p\xdar$X\xc9\x08J\x9dsn" +
	"\x0a\x1f\x0e\xac'4\x1d\"\xa1K\x87\xcf<\xf1\xaf\xbb" +
	"\xde!6\x09\x09w\xa6Y@>\x80*\xc8{\xd3\xf6" +
	"\x10\x88<\xb9\xed\x89\xf7\x9f\xfa\xe4\xb1\xf5\xa2]\xb3\xd2" +
	"g#75\x1d\xb9Y_nu\xba\xcf^\xd2\xb9\x19" +
	"v\xd9,\xc8bu\xfa1yS:>u\xa6\xb7\x13" +
	"\x88t\xad[6\xfcU\xed\xe1\x0dQ\x14\x91f\xdc\xc5" +
	"\xf4\x8d\xc8\xcc\xe6@\x82\xda\xdd\x8f\xc8#\xbbo\xdbH" +
	"h\x117[slG\xb3+\xe6,\xa8~\xe0\x96-" +
	"\x8f\xe8\x80\xe8\x9f\xcer<\x83\x9fj\xec\xd3\xe7.\xfd" +
	"\xf7+\x7fy\xec\xa1\xcd\xfa\xa7\xba\xa2o8\x98\xd9'" +
	"\x1d\xa8\xe8\x85\xf5\xdfl\x7f\xa9\xa7\xf9\xd1\x04\x07\xfc\xe8" +
	"8+\xdb2\x90\x1e2\xec \xef\xc5\xc7\xc8\x9a\xe7\x9d" +
	"\xf9W\x14~\xfdh\xd4n&oK\xc6\x14d\xb7-" +
	"\x03\xe5\x8d\xab\xfb\xb4\xb7\xe4\xf4\xe7[Ey@\x99\xbc" +
	"4\x8a\xf2\xae\xbe\xac\xe5\xe7S\xc3\x0e>Ih\xb1A" +
	"0\x96\x1eC\x82\xe9\x8c@\xfe9\xf0Y\xd9\x8a}\xdb" +
	"\x98BJ\xce\x81\x17r?8\xf4>*\xd4D{\xe5" +
	"0E\xd8Zi\xa5\xdc\x8dO\x91o\x0b\xd7]\xfa\xf4" +
	"\x14\xec\xd0\xbd\xca\x90Y\x87\xd2\xac\x91\xe5\x07\xdc\x8bW" +
	"\x9d\xfa\x8f\x1d\xa2\"a]\x91\x95L\xce\x9cuo\xdf" +
	"\xf5\xdd\x9b\x0fp\x02f\xcaN\xcaP?H\xd1\x94\xd7" +
	"\xcbFZk\xb6\xe5u\x8b\x1c\x9c\x99],\xb83\x91" +
	"\x83\xa7|\xf5\xe9\x8f\xf6?\xd5-\x86\x94+\xb3\x03\x09" +
	"\xea\x19\xc1M\x91\x9b/\\s\xcb\x1b\xdd\xa2\xad\x9d\x99" +
	"\xcc;\xdb\x18\xc1\x9eY\xc7?\xa8\x1c\xf9\xf6\xff\x88\x04" +
	"G2\xf71\xef0\x82\xd7\xd7U\xfb\xa6\xbd\xe5xZ" +
	"\x14\xf1c&\x0b\xeb\x14\x19\x09\xbe\x9a\xf4\xf0\xae2\xeb" +
	"\xec]\xa2\x92\xa52#\x98\xc4\x08\xba\xcaZK\xbe\xda" +
	"\xa2=\x1b\x17\xd6\x08\x95\xdc\"\xff$/\x96\xf1)," +
	"\x9f'\x10\x99\xfe\xc4\xdc\xe6\xe6\xf4}\xbbEfJ\x16" +
	"\x83\xa4%\x0b\x99\xdd7\xed\xb8wk\xfe\x7f\xede\xcc" +
	"\x0c\xdf0f\xe36e\x8d\x00\xb9;\x0b\xb9m\xcbB" +
	"n\xb6\xdack\x9f\x9f\xfd\xe4^\xc17\xab\xb37\x02" +
	"\xb1~|\xba\xab\xbe\xd3?s\xbf\x90;\xe1l\xa6\xf2" +
	"\xeal\x94\xb2].\xfe\xcey*\xe5\x80\x88\xca\xee\xec" +
	"\xdf\"\xc1aF\xb0\xa4e\xea\xb9\xfd\x0b6\xbe\xa0G" +
	"!\xe3\xfca\xf6\x14\xf4\xfa\x1d\x85#K\x9e\xcb\xdc\xf3" +
	"\x82X\x90\x8ed3\xc4O\xb2OSz\xee\xfbb\xcf" +
	"\xb5_\xbe(\xe6ZJ\xceD$\xa09\xe8\xf5\xa3#" +
	"f\x1cx\xef\x90\xe7\x90\xc0\xbb)\xa7\x01y\x9f;\xfa" +
	"\xfb\x09\x0fut\x1c\x8aC\xd2\xc6r.g\x04\xc8Z" +
	"\x0e>\xaa9\xc5@ \x92\xd1\xf9\xec\xc5\xcd\xae\xef\xff" +
	"?!\x8cW\xe7\xf6\xc8\x9brY\xf6\xe7V\xca\x07\xf1" +
	")\xf2\xd8\x89\x9e\xb2\xd5_u\x1f\xd6\xb5bB\xb7\xe5" +
	"v\xa1\xd0\xef\x97\xe6\xdc\x90\xb5\xe3\xc2a\xb1\xd0t\xe6" +
	"\xce@}\x1f\xcfE\x836\xcf\\<\xc5\x99\xd5\xf3\x92" +
	"\xf0\xe9\xe1\\\x86\xc5\xa5\x07\xd6\xe4o\xbe\xeb\xc5\xd7D" +
	"ov\xe7\xb2\x0c\xd8\xcb>\xad\xe8U\xfe\xed_\xce\xde" +
	"{T\xe4}2\xb7\x01\x09>e\x04\xa7n{\xe3\xe8" +
	"\xa23\x15\xc7E4my\xccS\xd9yH\xb0cw" +
	"\xe9\xb7]\xa7\xde\x7fS(Le\xf8\x7fkd\x99u" +
	"\xd1\xf0\x9c\xde\x8f\xdf\x11\x85\x8f\xd2?-c\x9fN\xfd" +
	"\xc3\xd1MEw\x9e{'\xae@\"\x9ar}^\xaf" +
	"\xac\xe510\xf3\x18\x98\xab\xaf\x9c\xf8Qhn\xd7\xbb" +
	"\x0cL\x03z\x043\xff\x84\xbc)\x9f\x81\x92o\x07y" +
	"r\x81\x9d\x90\x97\x7f\xc8{w\x92\xf3\xe6\x93B\xca\x8c" +
	"*\x08\xa0\xe4\xf1\x05(\xb9j\xc5S\xee\xe3_\x1e\xe9" +
	"\x89\x0bb\xbdv\x16L\x04YC.\xb2Z\x80\xe1P" +
	"\xb9\xfc\x0e\xfb\xf1asNG\x0b\xac\x1eP\x05,\x16" +
	"O2n\xda\xa9\x1f6x^\xfb\xeb\xe9\x04?\xffR" +
	"\xf0\x93\x9cR\x88\x9cl\x85\xabd\x05\x9f\";\xaf\xdc" +
	"\xf7K\xef\xd5\xe3>\x14\x11\xaf*d.\xa9+Dn" +
	"gk'\xd4]w\xc5M\x1f\x8a\xe2\xc2\x85/\xb2\xdc" +
	"`\x04\xbf\xb3\x15\x9f\xa9?!}\x92 ng\xe1Y" +
	"\xf9\x00\x13\xb7\xb7p\x95\x9cR\x84\xe2J\x17-\xad\x9c" +
	"\xe4I\xf9\\t\xc2\x1f\x0b\x99\x13\xa0\x08\xb9\xddvw" +
	"\xf3on<:\xe1\xbc\xe8\xe0\xab\x8aX\xc2\x8fg\x04" +
	"\xeb\x0f\xf5,\xcc\x0e_:/r\x98U\xc4j\xa0\xc6" +
	"\x08\xce=\xa3\xd4\x8d>q\xf9\xd7\x09\xc7\xc7\xba\xa2\xb3" +
	"\xf2\x16\xd4B\xdeTT)\xbf\xc2\xf4yu\xc2gt" +
	"iA\xed\x9f\xc4j\xb6\xb3\x88\xe9s\x90q{\xf0\xff" +
	"\xee[\xbbb\xed=\x17\x13\xfc\xfcMQ\x8f\xfc#\xe3" +
	"v\xb1\xe8\xa8\xbc\xd8\x89\xdc\x8e\xbf\x97>\xe3\xb2\xc2\xe5" +
	"\x7fN\x80Bu\xf6\xca-H\"79+\xe5-\x8c" +
	"\xb8\xa3\xec\xd0\xed\x05\x0du?\x89\x86,s2C:" +
	"\x9d,*nXY\xf6V\xfb\xfd\xbf\x08y\x7f\xc49" +
	"\x03\xc8\xad\x91v\xb5\xa1MS\xdb\xc7\xd8\x1a\x95f_" +
	"\xf3\xc4{\xd4\x86\xbb5\xb5}\xb2\xa7I\xf3\x8d\xf1j" +
	"\xc1\xd0d\xaf\xb7&\xd4\x1a\xf0\x84\xdd\xea\xbc`I\xb5" +
	"\x12\xb0+MA\x97U\xb2\x12b\x05Bh\xdalB" +
	"\\\xa9\x12\xb8\xae\xb1@\xa45\xa8\x06n\xd5\xbc!\"" +
	"\xa9\x01H'P-\x01\xa4\x12\x0b>F\x82!\x7f@" +
	"\x99\xaf\x8e\xb1\xea\x82\xea\x82j`\xbaG\x0b\xf9\x03c" +
	"\xe6i>\xcf\x94p\xad\x7f\xa1\xea+q\xabAG\xab" +
	"7\xd4GB *!/*!\xa8\xcd\xf7\x91b%" +
	"\xd4\x1aP\x19\xf7T\x81\xbb%\x9e;!\xd5\x00\xae," +
	"\xc9F\x88QY\x81\xd7\x1d\xda9\x85X\xe8J;\xc4" +
	"z\x1e\xe0%\x92\x86g\x13\x0bm\xb1\x83\xc5(%\xc0" +
	"\x1b>\xaa6\x10\x0b\xad\xb7\x83d\x04=\xb0\xb2Of" +
	"\xee\xa7\xae\xe5\xc4B\xab\xec`5\xfa\x09\xe0\xf0\xd3I" +
	"(o\xac}\x89OmG\x15+ \xe2Q\xbdjH" +
	"\xad\x0b\"d\x15\x10\xe1X\x10\xfbB\xd5g\xfc]\xa3" +
	"\xc1|\x1f3\x98T\xc0\x12\xc5\xe3\xa9Q\x15o\x05T" +
	"\x03D\x82\xcdJ\xbbO\x0dp\xff\xd5\xa8\x816\xadQ" +
	"u\xab\xf3\xb5`(\x10\x1e\x13`\x0fj \xfa\xbe\xc4" +
	"\xad\x16\x07\x11\xdf$~G\xa5\xc6\x04\xd4&\x7f\x9bj" +
	"x\x1d\x9d\xae4\x05\x09\x11}\xe2\x16|\x12\x8cR\x12" +
	"\x98g\xf8\xa3\x1f\xf6\xf3\xd5PT\x1b|\xc5\xb9'e" +
	"\xae\x93V\x11\x98\x96\xc0\\\x8a\xda\xcc5E\xf6\xc8\x93" +
	"\xb9<\xd5\xe07\xbd\x81\x10\xd74\x09\\\xd5\x16\xa0\x00" +
	"Y\x80/\xef@!3%p\xddk\x01j\xb1d\x81" +
	"\x85\x10Z\xb7\x91\x10\xd7\xbd\x12\xb8<\xa2Y\xf6yU" +
	"1\xd9f\xfa4+a\xaf_\x99\xa6B\xb01\xa05" +
	"\x874?\xf8\x12\x0231\xec\xb9\xe7\xd5\x00\xc3@j" +
	"\xfa5\x82\xbe&\xe4\x0f\xa8\x1e=\xe8\x87\x1b\xdcF!" +
	"\xb7k$p\xdd( 0\xb6\x83\x10\xd7\xf5\x12\xb8n" +
	"\xe9WD\x14\x84\xf2y,A\x07p\xb0^7L\x03" +
	"\x08\x82\x03*\xe4\x1e\x8aBB\xb0q\x1cx\x0e\xe8\x7f" +
	"\xf6\x819\xa6\x8c[\x0d\xb6\xda1\x03\x86\x989\xd5\x8a" +
	"\x03\x03U4b\x81\x99\x11S\x08q]'\x81kB" +
	",xk\x89C\xc4nI\xf45\xd0\xd8\xf9J\x00\xe8" +
	"@\x96`\xe2\xc4'\xa5\x182\x0df9\xd97x\xfb" +
	"\x06L\x8c\xbd=\xe4\x0f`\xc8d\xb0:\xc9\xc7\x1c\xe0" +
	"\x1d\x10mY@,T\xc3:\xc9G.\xe0\xc7/\xad" +
	"\xc7\xff\xd5a\x9d\xe4\x1d6\xf0\xf3\x88Vu\x10\x0b\x9d" +
	"\x8cu\x92\xcf\x1b\xc0\xc7=:\x1e\xebd\xa9=\x82\xe5" +
	"\x0c\xb5%\x0e4\xac\x02\"\xdcN\xe3\x05\x9eC\xf8\x86" +
	"\x94\xeb\xc7\x90Q6kB\x10\xc5\x83D\xaba\xd2l" +
	"\x8b\x16M\x03\xb7\x81bq\xb4\xe0\xc6$\xb1\xe8\x08\xaa" +
	"\x8awpA\xc8mL\xe6\xba\xc4r\x1a`\x11\x9e\x11" +
	"\xeb$\x09@\x06\x89\xd5\xfba}\xa2\xb6\xd6_\x13}" +
	"?_\x0d\xcd\xd4\xda\xd4\xa9J\xb3\xd2\xa0y\xb5P\x98" +
	"\x05\xbc7\x14W\xbf\xbb\x08qeH\xe0*\xb2@$" +
	"\xa0\x06\xfd\xde6\xd5\x03\xfc#)\x14\x86L\xabD\x00" +
	"2\x05\x89\x96\xb8<\x09\x16\xe3W,l\xac,lx" +
	"{\x07\xbc\xad\xa4t#\xb1\xd04{\x84+\x05\\+" +
	"\x08\xeb\xfe\xe2U\xe4\xb2\xc4c\x82;=\xd6y h" +
	"\x1c\xe5> \xbbU\xc5\xa3\xfe*\xf9aZ\x12P\xa5" +
	"$\xe7V\xdf\xa2\xe66\x0b\xa4\x19BQ3;<\x1a" +
	"\x15\xaf\xb7Ai\\H\x08\x01\x1a\x1b\xac\x06S\x10\xe2" +
	"K\x9b\xc912\xb0\xcd\xdc\x05\xd6$.\xd0U\x0e\x96" +
	"\xb8\xcb\xf58\x12\xb9\xcf\x10z\xbf\xa8mA\xb4#\xda" +
	"\xfae\xc4\xe6s\x02z\x13h\x0ap\x9f\xe8\xed\x8b\xb1" +
	"^sMD\xa2A\x03@74Y\xbc3J\x8a^" +
	"\x94\x96\xd85\xb5]H\x8f\xc1w:\xa6\x898\x18\x11" +
	"\xfd\x86e_'\x99\x89\x18\xd0K\xc6\xc5G\xd4K\xdc" +
	"\xa4\xf8\x8c\x9fW\xae\x06T_\xa3\xaa\x9f\x14\x9c\xbf\x82" +
	"a?W\x02\x97W\x08{\x0d\xed\xfaw\x09\\!\xa1" +
	"\xbdj\xc1\x97\xcd\x12\xb8\x16Y\x80JR\x16H\x84\xd0" +
	"0\x96\xa2E\x12\xb8\x1eL\x92 \xc6!j\x0f7\xab" +
	"\xf1o\xef$v\xa5)\xe1\xed4P\xa3\xad\x98\xe4\xf7" +
	"\x0d\xaeB\x9b\x95\x1b\x18zG\x16\xf5\x94\xd4\x07\xb9i" +
	"\\\x1b\xbfO\xef\xcc\xfe\x01\xc1\x1b\xc2\xbc\xa0\x07!\x04" +
	"\xe3\x01O\x18\xf9j\xb4\xe8Tc\x1e\xb7\x1df\xb5+" +
	"\xbe\x0f\x1d\xfayhr2`\xcf6\\\x02W\x96\x05" +
	"\x96\xe8\xcd\xbc'!jF$\x18\x11\x1d\xe28C\x8e" +
	"\xd0\xa0\x06i\xb39W\x9c\xa4\x0d{\xa5y\xc1X\xa2" +
	"\x1a\x97tq\xe5\x94\x87\x9b\x82\x86\xea5qLPi" +
	"SK\xcau\xdd\xc4C\x0am-\x91\xc0u\xbd\x10p" +
	"\xa5\xa3c'W<\x00\x0e\x8f\x1al\x1c\xda8c\xb4" +
	"\xd8\xc9\x065\x86\x0a\x9b\xd4\xa2\xd39\xd7nqC," +
	"\x9e\x0d\xedVb\x8e\xdc/\x81k\x83\x90\x0e\xeb\xd0\x8e" +
	"\x07%p=\"\xa4C'\xe6\xe8\x06\x09\\[-@" +
	"\xad\xd6,\xb0\x12B\xb7\xe0P\xb7U\x02\xd7\xd3C\x19" +
	"\xea\x12\xe2 Y\xca\xf7;\xfc\xc5\xb5N\x86\x7f\xa4\xc6" +
	"\x85\xb1\xbe\x89\xdf\xda\x02\xbf\xed\xa4t4\xb1P\x9b\xdd" +
	"\x81>\xec\xdb(\x0df\xdcb\xc9$\x85\x82\xfd8\x8b" +
	"\x87\xaei\xde\x8d\x8ee\x83\x03\xad\x86\x8c\xd8\xc2'\xae" +
	"\x0b\x1d\x91,\xf08cN8\xe0\xc95P\xbff^" +
	"\xc7\x06u\xa7dri5\xa8\xd2\xd2\x1f\xe6>\xb5]" +
	"(\x81\xa6W$C\x99\xe0\x07\x1e\x1a\x0cO%\xf9\xc6" +
	"\xac\x076\xf5\xee\x10F\x8d\xf8i1\xca\xb7\xa6\x98]" +
	"2\xfcSgn\\\x0b\x14\xf35\xc4\xe6d~\x15/" +
	"\xac\xcabs2\xdf\xc8\x02_r\xd1\xfa\x0e>'\xf3" +
	"u.\xf0%\x12\xadZ\xce\xe7d\xbe\xf3\x03~\x9dL" +
	"\xc7w\xe8s2O\x17\xe2\xc0\x84\x89\xce\xc9h>)" +
	"\xd7S\xaa\x02G9\xbd\x14\x08c\xb1\xc9\xf4,\x16\x94" +
	"\x81\xda\xfe\xeab%\xbe\x05\x1fD^\xf6=\x97\xdcl" +
	"\xc0T\x1a\xbc*o%\xcb\xd5\x96V5\x18\x8a\xbb\xa5" +
	"r\x0f\xf2>\xa5_o\x9b7\x04\xba\x0a\xfd\xce\xc7\xbf" +
	"\xeax\\\xeb\xaf)\xd7\xff\xa1\xdb\x88u\x9eo\xfe\x80" +
	"o\x89\xe9\xd8\x8d\xcc\xb5\x10[\xa6\x02_\x9a\xd2\x91\xe8" +
	"\xf6\xfc$\xb3\xb3\x89\xef\xc5\xeb\x8f\x81\x1b.\x93r;" +
	"\x94\xfe\xd66Xpy\x03\x92\xa4\xd9\x0a\xe8q\x00\x19" +
	"\xb1\xbdU\xdc\x09c\x89?9\xec\xed\"\xa6|\x0d\x08" +
	"|UL\xc7b\x0a\x8eBL\xf9\x0e\x1c\xf8\x9e\x87:" +
	"\x11\xd3\xecA\xa5\x92\x09\x9c\xfd\xdc\xc6\xfd\x9d\x95v\x08" +
	"'\x0do\xae\x93%d{\x94\x96\xd8\xf1\xe4\xa6\xb1\xe5" +
	"b\xbfS\xb1\xf9\x15\x07o$\x86<\xaf\x9a^3\xba" +
	"U\xc5\xee\x11\xef\x8b\xf8\x8f\x18\x80\xafS)E\xdf\xa5" +
	"\xd8\x13n\x00\x93w@fWE\xa6\xce\x18\xb8\xb96" +
	"~\"c>\x05\xc7\x9c\"i>}\xc1\x80F\xf0\x9f" +
	"\xb7\x00\xdfr\x1b\xfb\x1f0~@\x04|qO'a" +
	"\xc2\x97\xe1\x19\xc0\xb7\xcf\xc0\xb7\x94\xb4\x14\x83\xf3*{" +
	"\xd2\x1a\x8e\x03\x04p+\x01\xa3\x96\x87\x06)\xe7\xeb$" +
	"q#\x14?\xbd\xcf/f\x17\xdb1\xfc\xf9\xcfk\x80" +
	"\xff\xf0\x88\xd2\xe5:\xfe\xfc\xee\x1b\xa2\x1f\x93A\xe4\x83" +
	"\x99\x13\xa4\x81\x06\x9c@\x9c\x0f\xc4\xc4\xe8\x7fi\xc8\xef" +
	"s\x0dg\xff-\x00\x00\xff\xff\\<\xd0H"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dca555fc76741dc1,
		Nodes: []uint64{
			0x8160512bffab76e7,
			0x83b4805dae03e8f2,
			0x84761835db7b4b72,
			0x85ec771c80e6e0c8,
			0x878b65041e4b256b,
			0x8a494f6ff8477d50,
			0x8e72bd79375e1d2d,
			0x8e9be0a3d79fa1a0,
			0x8ef7e2521d75bf04,
			0x909369c308818d9a,
			0x9248a5211394ad54,
			0x94993c86506a5e40,
			0x968c9bfbc19ef7b4,
			0x9770dabea2ed8eec,
			0x97eb1b20191db78a,
			0x9ce5db24f2e15533,
			0xa0b906d6fc710b26,
			0xa1b28339e472fc13,
			0xa401d6e1f78d1bee,
			0xa478d6877d52b582,
			0xa486cdf04fcf8d5e,
			0xa518a153042139c8,
			0xa5a3b3dedb893f64,
			0xa5c93c28ec3bff37,
			0xa7cf2147d9cc59af,
			0xa80fce446e508dc8,
			0xab5a0439ab933dea,
			0xac6999ea2475399a,
			0xadb20e7070609f45,
			0xb17e199c6ccc445f,
			0xb1a05ab78bca5405,
			0xb34c006f915d9adb,
			0xb509d61df01f13a2,
			0xb8926ab3e343717f,
			0xb8af12b424211b4d,
			0xbae82bafe65fda09,
			0xbb64bbd4b54a0ac7,
			0xbb7a7a8c38cbc7e3,
			0xbcf45196f5ac9110,
			0xbda5ea8939dad29b,
			0xbdeca414321680f4,
			0xbeda141d427d4c96,
			0xc6ba4f96198a86f7,
			0xc758e2223661f240,
			0xcc40dc7cc7c948d6,
			0xcdd7d69aee2dada4,
			0xd0dff216087c0481,
			0xd0e34e1c95c7ef43,
			0xd39a6074de3a2389,
			0xd5003b1d3dd318f8,
			0xdac5e8cc52a38349,
			0xdb5e06cc074d8247,
			0xdbfec66490f8d669,
			0xdd3326f2fdb223a9,
			0xdd37202c553854e2,
			0xe003d25ddc1f05c4,
			0xe509643d47807c2d,
			0xe738c734c0705648,
			0xe7f779156bdabb8e,
			0xeb1ed22a5561aae3,
			0xf3541a8011e438c3,
			0xf5578b838b5fb688,
			0xf6821b0b4a0ed4cc,
			0xfa55621a4bbb397a,
			0xfd8477ce39853249,
		},
		Compressed: true,
	})
}
