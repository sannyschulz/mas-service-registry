// Code generated by capnpc-go. DO NOT EDIT.

package capnp_service_registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SturdyRefStored capnp.Struct

// SturdyRefStored_TypeID is the unique identifier for the type SturdyRefStored.
const SturdyRefStored_TypeID = 0xd0e34e1c95c7ef43

func NewSturdyRefStored(s *capnp.Segment) (SturdyRefStored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SturdyRefStored(st), err
}

func NewRootSturdyRefStored(s *capnp.Segment) (SturdyRefStored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return SturdyRefStored(st), err
}

func ReadRootSturdyRefStored(msg *capnp.Message) (SturdyRefStored, error) {
	root, err := msg.Root()
	return SturdyRefStored(root.Struct()), err
}

func (s SturdyRefStored) String() string {
	str, _ := text.Marshal(0xd0e34e1c95c7ef43, capnp.Struct(s))
	return str
}

func (s SturdyRefStored) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRefStored) DecodeFromPtr(p capnp.Ptr) SturdyRefStored {
	return SturdyRefStored(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRefStored) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRefStored) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRefStored) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRefStored) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRefStored) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRefStored) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRefStored) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRefStored) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SturdyRefStored) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRefStored) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SturdyRefStored) Payload() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SturdyRefStored) HasPayload() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SturdyRefStored) PayloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetPayload(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SturdyRefStored) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SturdyRefStored) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SturdyRefStored) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SturdyRefStored) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// SturdyRefStored_List is a list of SturdyRefStored.
type SturdyRefStored_List = capnp.StructList[SturdyRefStored]

// NewSturdyRefStored creates a new list of SturdyRefStored.
func NewSturdyRefStored_List(s *capnp.Segment, sz int32) (SturdyRefStored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[SturdyRefStored](l), err
}

// SturdyRefStored_Future is a wrapper for a SturdyRefStored promised by a client call.
type SturdyRefStored_Future struct{ *capnp.Future }

func (f SturdyRefStored_Future) Struct() (SturdyRefStored, error) {
	p, err := f.Future.Ptr()
	return SturdyRefStored(p.Struct()), err
}

type StorageEditor capnp.Client

// StorageEditor_TypeID is the unique identifier for the type StorageEditor.
const StorageEditor_TypeID = 0x9770dabea2ed8eec

func (c StorageEditor) AddSturdyRef(ctx context.Context, params func(StorageEditor_addSturdyRef_Params) error) (StorageEditor_addSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "addSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_addSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_addSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) GetSturdyRef(ctx context.Context, params func(StorageEditor_getSturdyRef_Params) error) (StorageEditor_getSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      1,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "getSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_getSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_getSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) ListSturdyRefsForUser(ctx context.Context, params func(StorageEditor_listSturdyRefsForUser_Params) error) (StorageEditor_listSturdyRefsForUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      2,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listSturdyRefsForUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_listSturdyRefsForUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_listSturdyRefsForUser_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) ListAllSturdyRefs(ctx context.Context, params func(StorageEditor_listAllSturdyRefs_Params) error) (StorageEditor_listAllSturdyRefs_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      3,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listAllSturdyRefs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_listAllSturdyRefs_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_listAllSturdyRefs_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) DeleteSturdyRef(ctx context.Context, params func(StorageEditor_deleteSturdyRef_Params) error) (StorageEditor_deleteSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      4,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "deleteSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageEditor_deleteSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageEditor_deleteSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageEditor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StorageEditor) String() string {
	return "StorageEditor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StorageEditor) AddRef() StorageEditor {
	return StorageEditor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StorageEditor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StorageEditor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StorageEditor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StorageEditor) DecodeFromPtr(p capnp.Ptr) StorageEditor {
	return StorageEditor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StorageEditor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StorageEditor) IsSame(other StorageEditor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StorageEditor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StorageEditor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StorageEditor_Server is a StorageEditor with a local implementation.
type StorageEditor_Server interface {
	AddSturdyRef(context.Context, StorageEditor_addSturdyRef) error

	GetSturdyRef(context.Context, StorageEditor_getSturdyRef) error

	ListSturdyRefsForUser(context.Context, StorageEditor_listSturdyRefsForUser) error

	ListAllSturdyRefs(context.Context, StorageEditor_listAllSturdyRefs) error

	DeleteSturdyRef(context.Context, StorageEditor_deleteSturdyRef) error
}

// StorageEditor_NewServer creates a new Server from an implementation of StorageEditor_Server.
func StorageEditor_NewServer(s StorageEditor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StorageEditor_Methods(nil, s), s, c)
}

// StorageEditor_ServerToClient creates a new Client from an implementation of StorageEditor_Server.
// The caller is responsible for calling Release on the returned Client.
func StorageEditor_ServerToClient(s StorageEditor_Server) StorageEditor {
	return StorageEditor(capnp.NewClient(StorageEditor_NewServer(s)))
}

// StorageEditor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StorageEditor_Methods(methods []server.Method, s StorageEditor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "addSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddSturdyRef(ctx, StorageEditor_addSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      1,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "getSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSturdyRef(ctx, StorageEditor_getSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      2,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listSturdyRefsForUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListSturdyRefsForUser(ctx, StorageEditor_listSturdyRefsForUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      3,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "listAllSturdyRefs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListAllSturdyRefs(ctx, StorageEditor_listAllSturdyRefs{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9770dabea2ed8eec,
			MethodID:      4,
			InterfaceName: "storage.capnp:StorageEditor",
			MethodName:    "deleteSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeleteSturdyRef(ctx, StorageEditor_deleteSturdyRef{call})
		},
	})

	return methods
}

// StorageEditor_addSturdyRef holds the state for a server call to StorageEditor.addSturdyRef.
// See server.Call for documentation.
type StorageEditor_addSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_addSturdyRef) Args() StorageEditor_addSturdyRef_Params {
	return StorageEditor_addSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_addSturdyRef) AllocResults() (StorageEditor_addSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(r), err
}

// StorageEditor_getSturdyRef holds the state for a server call to StorageEditor.getSturdyRef.
// See server.Call for documentation.
type StorageEditor_getSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_getSturdyRef) Args() StorageEditor_getSturdyRef_Params {
	return StorageEditor_getSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_getSturdyRef) AllocResults() (StorageEditor_getSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(r), err
}

// StorageEditor_listSturdyRefsForUser holds the state for a server call to StorageEditor.listSturdyRefsForUser.
// See server.Call for documentation.
type StorageEditor_listSturdyRefsForUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_listSturdyRefsForUser) Args() StorageEditor_listSturdyRefsForUser_Params {
	return StorageEditor_listSturdyRefsForUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_listSturdyRefsForUser) AllocResults() (StorageEditor_listSturdyRefsForUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Results(r), err
}

// StorageEditor_listAllSturdyRefs holds the state for a server call to StorageEditor.listAllSturdyRefs.
// See server.Call for documentation.
type StorageEditor_listAllSturdyRefs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_listAllSturdyRefs) Args() StorageEditor_listAllSturdyRefs_Params {
	return StorageEditor_listAllSturdyRefs_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_listAllSturdyRefs) AllocResults() (StorageEditor_listAllSturdyRefs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listAllSturdyRefs_Results(r), err
}

// StorageEditor_deleteSturdyRef holds the state for a server call to StorageEditor.deleteSturdyRef.
// See server.Call for documentation.
type StorageEditor_deleteSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageEditor_deleteSturdyRef) Args() StorageEditor_deleteSturdyRef_Params {
	return StorageEditor_deleteSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageEditor_deleteSturdyRef) AllocResults() (StorageEditor_deleteSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(r), err
}

// StorageEditor_List is a list of StorageEditor.
type StorageEditor_List = capnp.CapList[StorageEditor]

// NewStorageEditor_List creates a new list of StorageEditor.
func NewStorageEditor_List(s *capnp.Segment, sz int32) (StorageEditor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StorageEditor](l), err
}

type StorageEditor_addSturdyRef_Params capnp.Struct

// StorageEditor_addSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_addSturdyRef_Params.
const StorageEditor_addSturdyRef_Params_TypeID = 0x9ce5db24f2e15533

func NewStorageEditor_addSturdyRef_Params(s *capnp.Segment) (StorageEditor_addSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_addSturdyRef_Params(st), err
}

func NewRootStorageEditor_addSturdyRef_Params(s *capnp.Segment) (StorageEditor_addSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_addSturdyRef_Params(st), err
}

func ReadRootStorageEditor_addSturdyRef_Params(msg *capnp.Message) (StorageEditor_addSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_addSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_addSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x9ce5db24f2e15533, capnp.Struct(s))
	return str
}

func (s StorageEditor_addSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_addSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_addSturdyRef_Params {
	return StorageEditor_addSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_addSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_addSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_addSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_addSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_addSturdyRef_Params) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageEditor_addSturdyRef_Params) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_addSturdyRef_Params) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageEditor_addSturdyRef_Params) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageEditor_addSturdyRef_Params_List is a list of StorageEditor_addSturdyRef_Params.
type StorageEditor_addSturdyRef_Params_List = capnp.StructList[StorageEditor_addSturdyRef_Params]

// NewStorageEditor_addSturdyRef_Params creates a new list of StorageEditor_addSturdyRef_Params.
func NewStorageEditor_addSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_addSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_addSturdyRef_Params](l), err
}

// StorageEditor_addSturdyRef_Params_Future is a wrapper for a StorageEditor_addSturdyRef_Params promised by a client call.
type StorageEditor_addSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_addSturdyRef_Params_Future) Struct() (StorageEditor_addSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_addSturdyRef_Params(p.Struct()), err
}
func (p StorageEditor_addSturdyRef_Params_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type StorageEditor_addSturdyRef_Results capnp.Struct

// StorageEditor_addSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_addSturdyRef_Results.
const StorageEditor_addSturdyRef_Results_TypeID = 0xcdd7d69aee2dada4

func NewStorageEditor_addSturdyRef_Results(s *capnp.Segment) (StorageEditor_addSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(st), err
}

func NewRootStorageEditor_addSturdyRef_Results(s *capnp.Segment) (StorageEditor_addSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_addSturdyRef_Results(st), err
}

func ReadRootStorageEditor_addSturdyRef_Results(msg *capnp.Message) (StorageEditor_addSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_addSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_addSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xcdd7d69aee2dada4, capnp.Struct(s))
	return str
}

func (s StorageEditor_addSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_addSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_addSturdyRef_Results {
	return StorageEditor_addSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_addSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_addSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_addSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_addSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_addSturdyRef_Results_List is a list of StorageEditor_addSturdyRef_Results.
type StorageEditor_addSturdyRef_Results_List = capnp.StructList[StorageEditor_addSturdyRef_Results]

// NewStorageEditor_addSturdyRef_Results creates a new list of StorageEditor_addSturdyRef_Results.
func NewStorageEditor_addSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_addSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_addSturdyRef_Results](l), err
}

// StorageEditor_addSturdyRef_Results_Future is a wrapper for a StorageEditor_addSturdyRef_Results promised by a client call.
type StorageEditor_addSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_addSturdyRef_Results_Future) Struct() (StorageEditor_addSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_addSturdyRef_Results(p.Struct()), err
}

type StorageEditor_getSturdyRef_Params capnp.Struct

// StorageEditor_getSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_getSturdyRef_Params.
const StorageEditor_getSturdyRef_Params_TypeID = 0x968c9bfbc19ef7b4

func NewStorageEditor_getSturdyRef_Params(s *capnp.Segment) (StorageEditor_getSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Params(st), err
}

func NewRootStorageEditor_getSturdyRef_Params(s *capnp.Segment) (StorageEditor_getSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Params(st), err
}

func ReadRootStorageEditor_getSturdyRef_Params(msg *capnp.Message) (StorageEditor_getSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_getSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_getSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x968c9bfbc19ef7b4, capnp.Struct(s))
	return str
}

func (s StorageEditor_getSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_getSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_getSturdyRef_Params {
	return StorageEditor_getSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_getSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_getSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_getSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_getSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_getSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_getSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_getSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_getSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_getSturdyRef_Params_List is a list of StorageEditor_getSturdyRef_Params.
type StorageEditor_getSturdyRef_Params_List = capnp.StructList[StorageEditor_getSturdyRef_Params]

// NewStorageEditor_getSturdyRef_Params creates a new list of StorageEditor_getSturdyRef_Params.
func NewStorageEditor_getSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_getSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_getSturdyRef_Params](l), err
}

// StorageEditor_getSturdyRef_Params_Future is a wrapper for a StorageEditor_getSturdyRef_Params promised by a client call.
type StorageEditor_getSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_getSturdyRef_Params_Future) Struct() (StorageEditor_getSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_getSturdyRef_Params(p.Struct()), err
}

type StorageEditor_getSturdyRef_Results capnp.Struct

// StorageEditor_getSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_getSturdyRef_Results.
const StorageEditor_getSturdyRef_Results_TypeID = 0xe509643d47807c2d

func NewStorageEditor_getSturdyRef_Results(s *capnp.Segment) (StorageEditor_getSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(st), err
}

func NewRootStorageEditor_getSturdyRef_Results(s *capnp.Segment) (StorageEditor_getSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_getSturdyRef_Results(st), err
}

func ReadRootStorageEditor_getSturdyRef_Results(msg *capnp.Message) (StorageEditor_getSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_getSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_getSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xe509643d47807c2d, capnp.Struct(s))
	return str
}

func (s StorageEditor_getSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_getSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_getSturdyRef_Results {
	return StorageEditor_getSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_getSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_getSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_getSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_getSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_getSturdyRef_Results) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageEditor_getSturdyRef_Results) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_getSturdyRef_Results) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageEditor_getSturdyRef_Results) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageEditor_getSturdyRef_Results_List is a list of StorageEditor_getSturdyRef_Results.
type StorageEditor_getSturdyRef_Results_List = capnp.StructList[StorageEditor_getSturdyRef_Results]

// NewStorageEditor_getSturdyRef_Results creates a new list of StorageEditor_getSturdyRef_Results.
func NewStorageEditor_getSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_getSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_getSturdyRef_Results](l), err
}

// StorageEditor_getSturdyRef_Results_Future is a wrapper for a StorageEditor_getSturdyRef_Results promised by a client call.
type StorageEditor_getSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_getSturdyRef_Results_Future) Struct() (StorageEditor_getSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_getSturdyRef_Results(p.Struct()), err
}
func (p StorageEditor_getSturdyRef_Results_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type StorageEditor_listSturdyRefsForUser_Params capnp.Struct

// StorageEditor_listSturdyRefsForUser_Params_TypeID is the unique identifier for the type StorageEditor_listSturdyRefsForUser_Params.
const StorageEditor_listSturdyRefsForUser_Params_TypeID = 0xadb20e7070609f45

func NewStorageEditor_listSturdyRefsForUser_Params(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Params(st), err
}

func NewRootStorageEditor_listSturdyRefsForUser_Params(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Params(st), err
}

func ReadRootStorageEditor_listSturdyRefsForUser_Params(msg *capnp.Message) (StorageEditor_listSturdyRefsForUser_Params, error) {
	root, err := msg.Root()
	return StorageEditor_listSturdyRefsForUser_Params(root.Struct()), err
}

func (s StorageEditor_listSturdyRefsForUser_Params) String() string {
	str, _ := text.Marshal(0xadb20e7070609f45, capnp.Struct(s))
	return str
}

func (s StorageEditor_listSturdyRefsForUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listSturdyRefsForUser_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_listSturdyRefsForUser_Params {
	return StorageEditor_listSturdyRefsForUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listSturdyRefsForUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listSturdyRefsForUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listSturdyRefsForUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listSturdyRefsForUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listSturdyRefsForUser_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_listSturdyRefsForUser_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listSturdyRefsForUser_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_listSturdyRefsForUser_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_listSturdyRefsForUser_Params_List is a list of StorageEditor_listSturdyRefsForUser_Params.
type StorageEditor_listSturdyRefsForUser_Params_List = capnp.StructList[StorageEditor_listSturdyRefsForUser_Params]

// NewStorageEditor_listSturdyRefsForUser_Params creates a new list of StorageEditor_listSturdyRefsForUser_Params.
func NewStorageEditor_listSturdyRefsForUser_Params_List(s *capnp.Segment, sz int32) (StorageEditor_listSturdyRefsForUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listSturdyRefsForUser_Params](l), err
}

// StorageEditor_listSturdyRefsForUser_Params_Future is a wrapper for a StorageEditor_listSturdyRefsForUser_Params promised by a client call.
type StorageEditor_listSturdyRefsForUser_Params_Future struct{ *capnp.Future }

func (f StorageEditor_listSturdyRefsForUser_Params_Future) Struct() (StorageEditor_listSturdyRefsForUser_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listSturdyRefsForUser_Params(p.Struct()), err
}

type StorageEditor_listSturdyRefsForUser_Results capnp.Struct

// StorageEditor_listSturdyRefsForUser_Results_TypeID is the unique identifier for the type StorageEditor_listSturdyRefsForUser_Results.
const StorageEditor_listSturdyRefsForUser_Results_TypeID = 0xfa55621a4bbb397a

func NewStorageEditor_listSturdyRefsForUser_Results(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Results(st), err
}

func NewRootStorageEditor_listSturdyRefsForUser_Results(s *capnp.Segment) (StorageEditor_listSturdyRefsForUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listSturdyRefsForUser_Results(st), err
}

func ReadRootStorageEditor_listSturdyRefsForUser_Results(msg *capnp.Message) (StorageEditor_listSturdyRefsForUser_Results, error) {
	root, err := msg.Root()
	return StorageEditor_listSturdyRefsForUser_Results(root.Struct()), err
}

func (s StorageEditor_listSturdyRefsForUser_Results) String() string {
	str, _ := text.Marshal(0xfa55621a4bbb397a, capnp.Struct(s))
	return str
}

func (s StorageEditor_listSturdyRefsForUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listSturdyRefsForUser_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_listSturdyRefsForUser_Results {
	return StorageEditor_listSturdyRefsForUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listSturdyRefsForUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listSturdyRefsForUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listSturdyRefsForUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listSturdyRefsForUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listSturdyRefsForUser_Results) Sturdyrefs() (SturdyRefStored_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored_List(p.List()), err
}

func (s StorageEditor_listSturdyRefsForUser_Results) HasSturdyrefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listSturdyRefsForUser_Results) SetSturdyrefs(v SturdyRefStored_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyrefs sets the sturdyrefs field to a newly
// allocated SturdyRefStored_List, preferring placement in s's segment.
func (s StorageEditor_listSturdyRefsForUser_Results) NewSturdyrefs(n int32) (SturdyRefStored_List, error) {
	l, err := NewSturdyRefStored_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefStored_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// StorageEditor_listSturdyRefsForUser_Results_List is a list of StorageEditor_listSturdyRefsForUser_Results.
type StorageEditor_listSturdyRefsForUser_Results_List = capnp.StructList[StorageEditor_listSturdyRefsForUser_Results]

// NewStorageEditor_listSturdyRefsForUser_Results creates a new list of StorageEditor_listSturdyRefsForUser_Results.
func NewStorageEditor_listSturdyRefsForUser_Results_List(s *capnp.Segment, sz int32) (StorageEditor_listSturdyRefsForUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listSturdyRefsForUser_Results](l), err
}

// StorageEditor_listSturdyRefsForUser_Results_Future is a wrapper for a StorageEditor_listSturdyRefsForUser_Results promised by a client call.
type StorageEditor_listSturdyRefsForUser_Results_Future struct{ *capnp.Future }

func (f StorageEditor_listSturdyRefsForUser_Results_Future) Struct() (StorageEditor_listSturdyRefsForUser_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listSturdyRefsForUser_Results(p.Struct()), err
}

type StorageEditor_listAllSturdyRefs_Params capnp.Struct

// StorageEditor_listAllSturdyRefs_Params_TypeID is the unique identifier for the type StorageEditor_listAllSturdyRefs_Params.
const StorageEditor_listAllSturdyRefs_Params_TypeID = 0xa518a153042139c8

func NewStorageEditor_listAllSturdyRefs_Params(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_listAllSturdyRefs_Params(st), err
}

func NewRootStorageEditor_listAllSturdyRefs_Params(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_listAllSturdyRefs_Params(st), err
}

func ReadRootStorageEditor_listAllSturdyRefs_Params(msg *capnp.Message) (StorageEditor_listAllSturdyRefs_Params, error) {
	root, err := msg.Root()
	return StorageEditor_listAllSturdyRefs_Params(root.Struct()), err
}

func (s StorageEditor_listAllSturdyRefs_Params) String() string {
	str, _ := text.Marshal(0xa518a153042139c8, capnp.Struct(s))
	return str
}

func (s StorageEditor_listAllSturdyRefs_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listAllSturdyRefs_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_listAllSturdyRefs_Params {
	return StorageEditor_listAllSturdyRefs_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listAllSturdyRefs_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listAllSturdyRefs_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listAllSturdyRefs_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listAllSturdyRefs_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_listAllSturdyRefs_Params_List is a list of StorageEditor_listAllSturdyRefs_Params.
type StorageEditor_listAllSturdyRefs_Params_List = capnp.StructList[StorageEditor_listAllSturdyRefs_Params]

// NewStorageEditor_listAllSturdyRefs_Params creates a new list of StorageEditor_listAllSturdyRefs_Params.
func NewStorageEditor_listAllSturdyRefs_Params_List(s *capnp.Segment, sz int32) (StorageEditor_listAllSturdyRefs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_listAllSturdyRefs_Params](l), err
}

// StorageEditor_listAllSturdyRefs_Params_Future is a wrapper for a StorageEditor_listAllSturdyRefs_Params promised by a client call.
type StorageEditor_listAllSturdyRefs_Params_Future struct{ *capnp.Future }

func (f StorageEditor_listAllSturdyRefs_Params_Future) Struct() (StorageEditor_listAllSturdyRefs_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listAllSturdyRefs_Params(p.Struct()), err
}

type StorageEditor_listAllSturdyRefs_Results capnp.Struct

// StorageEditor_listAllSturdyRefs_Results_TypeID is the unique identifier for the type StorageEditor_listAllSturdyRefs_Results.
const StorageEditor_listAllSturdyRefs_Results_TypeID = 0x9248a5211394ad54

func NewStorageEditor_listAllSturdyRefs_Results(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listAllSturdyRefs_Results(st), err
}

func NewRootStorageEditor_listAllSturdyRefs_Results(s *capnp.Segment) (StorageEditor_listAllSturdyRefs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_listAllSturdyRefs_Results(st), err
}

func ReadRootStorageEditor_listAllSturdyRefs_Results(msg *capnp.Message) (StorageEditor_listAllSturdyRefs_Results, error) {
	root, err := msg.Root()
	return StorageEditor_listAllSturdyRefs_Results(root.Struct()), err
}

func (s StorageEditor_listAllSturdyRefs_Results) String() string {
	str, _ := text.Marshal(0x9248a5211394ad54, capnp.Struct(s))
	return str
}

func (s StorageEditor_listAllSturdyRefs_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_listAllSturdyRefs_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_listAllSturdyRefs_Results {
	return StorageEditor_listAllSturdyRefs_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_listAllSturdyRefs_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_listAllSturdyRefs_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_listAllSturdyRefs_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_listAllSturdyRefs_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_listAllSturdyRefs_Results) Sturdyrefs() (SturdyRefStored_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored_List(p.List()), err
}

func (s StorageEditor_listAllSturdyRefs_Results) HasSturdyrefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_listAllSturdyRefs_Results) SetSturdyrefs(v SturdyRefStored_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyrefs sets the sturdyrefs field to a newly
// allocated SturdyRefStored_List, preferring placement in s's segment.
func (s StorageEditor_listAllSturdyRefs_Results) NewSturdyrefs(n int32) (SturdyRefStored_List, error) {
	l, err := NewSturdyRefStored_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefStored_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// StorageEditor_listAllSturdyRefs_Results_List is a list of StorageEditor_listAllSturdyRefs_Results.
type StorageEditor_listAllSturdyRefs_Results_List = capnp.StructList[StorageEditor_listAllSturdyRefs_Results]

// NewStorageEditor_listAllSturdyRefs_Results creates a new list of StorageEditor_listAllSturdyRefs_Results.
func NewStorageEditor_listAllSturdyRefs_Results_List(s *capnp.Segment, sz int32) (StorageEditor_listAllSturdyRefs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_listAllSturdyRefs_Results](l), err
}

// StorageEditor_listAllSturdyRefs_Results_Future is a wrapper for a StorageEditor_listAllSturdyRefs_Results promised by a client call.
type StorageEditor_listAllSturdyRefs_Results_Future struct{ *capnp.Future }

func (f StorageEditor_listAllSturdyRefs_Results_Future) Struct() (StorageEditor_listAllSturdyRefs_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_listAllSturdyRefs_Results(p.Struct()), err
}

type StorageEditor_deleteSturdyRef_Params capnp.Struct

// StorageEditor_deleteSturdyRef_Params_TypeID is the unique identifier for the type StorageEditor_deleteSturdyRef_Params.
const StorageEditor_deleteSturdyRef_Params_TypeID = 0xf4b2adaeac2fc134

func NewStorageEditor_deleteSturdyRef_Params(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_deleteSturdyRef_Params(st), err
}

func NewRootStorageEditor_deleteSturdyRef_Params(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageEditor_deleteSturdyRef_Params(st), err
}

func ReadRootStorageEditor_deleteSturdyRef_Params(msg *capnp.Message) (StorageEditor_deleteSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageEditor_deleteSturdyRef_Params(root.Struct()), err
}

func (s StorageEditor_deleteSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xf4b2adaeac2fc134, capnp.Struct(s))
	return str
}

func (s StorageEditor_deleteSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_deleteSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageEditor_deleteSturdyRef_Params {
	return StorageEditor_deleteSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_deleteSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_deleteSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_deleteSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_deleteSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageEditor_deleteSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageEditor_deleteSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageEditor_deleteSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageEditor_deleteSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageEditor_deleteSturdyRef_Params_List is a list of StorageEditor_deleteSturdyRef_Params.
type StorageEditor_deleteSturdyRef_Params_List = capnp.StructList[StorageEditor_deleteSturdyRef_Params]

// NewStorageEditor_deleteSturdyRef_Params creates a new list of StorageEditor_deleteSturdyRef_Params.
func NewStorageEditor_deleteSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageEditor_deleteSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageEditor_deleteSturdyRef_Params](l), err
}

// StorageEditor_deleteSturdyRef_Params_Future is a wrapper for a StorageEditor_deleteSturdyRef_Params promised by a client call.
type StorageEditor_deleteSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageEditor_deleteSturdyRef_Params_Future) Struct() (StorageEditor_deleteSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_deleteSturdyRef_Params(p.Struct()), err
}

type StorageEditor_deleteSturdyRef_Results capnp.Struct

// StorageEditor_deleteSturdyRef_Results_TypeID is the unique identifier for the type StorageEditor_deleteSturdyRef_Results.
const StorageEditor_deleteSturdyRef_Results_TypeID = 0x8bfbf4be38627800

func NewStorageEditor_deleteSturdyRef_Results(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(st), err
}

func NewRootStorageEditor_deleteSturdyRef_Results(s *capnp.Segment) (StorageEditor_deleteSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return StorageEditor_deleteSturdyRef_Results(st), err
}

func ReadRootStorageEditor_deleteSturdyRef_Results(msg *capnp.Message) (StorageEditor_deleteSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageEditor_deleteSturdyRef_Results(root.Struct()), err
}

func (s StorageEditor_deleteSturdyRef_Results) String() string {
	str, _ := text.Marshal(0x8bfbf4be38627800, capnp.Struct(s))
	return str
}

func (s StorageEditor_deleteSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageEditor_deleteSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageEditor_deleteSturdyRef_Results {
	return StorageEditor_deleteSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageEditor_deleteSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageEditor_deleteSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageEditor_deleteSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageEditor_deleteSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// StorageEditor_deleteSturdyRef_Results_List is a list of StorageEditor_deleteSturdyRef_Results.
type StorageEditor_deleteSturdyRef_Results_List = capnp.StructList[StorageEditor_deleteSturdyRef_Results]

// NewStorageEditor_deleteSturdyRef_Results creates a new list of StorageEditor_deleteSturdyRef_Results.
func NewStorageEditor_deleteSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageEditor_deleteSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[StorageEditor_deleteSturdyRef_Results](l), err
}

// StorageEditor_deleteSturdyRef_Results_Future is a wrapper for a StorageEditor_deleteSturdyRef_Results promised by a client call.
type StorageEditor_deleteSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageEditor_deleteSturdyRef_Results_Future) Struct() (StorageEditor_deleteSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageEditor_deleteSturdyRef_Results(p.Struct()), err
}

type StorageReader capnp.Client

// StorageReader_TypeID is the unique identifier for the type StorageReader.
const StorageReader_TypeID = 0xeb1ed22a5561aae3

func (c StorageReader) GetSturdyRef(ctx context.Context, params func(StorageReader_getSturdyRef_Params) error) (StorageReader_getSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xeb1ed22a5561aae3,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageReader",
			MethodName:    "getSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(StorageReader_getSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return StorageReader_getSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c StorageReader) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c StorageReader) String() string {
	return "StorageReader(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c StorageReader) AddRef() StorageReader {
	return StorageReader(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c StorageReader) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c StorageReader) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c StorageReader) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (StorageReader) DecodeFromPtr(p capnp.Ptr) StorageReader {
	return StorageReader(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c StorageReader) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c StorageReader) IsSame(other StorageReader) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c StorageReader) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c StorageReader) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A StorageReader_Server is a StorageReader with a local implementation.
type StorageReader_Server interface {
	GetSturdyRef(context.Context, StorageReader_getSturdyRef) error
}

// StorageReader_NewServer creates a new Server from an implementation of StorageReader_Server.
func StorageReader_NewServer(s StorageReader_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(StorageReader_Methods(nil, s), s, c)
}

// StorageReader_ServerToClient creates a new Client from an implementation of StorageReader_Server.
// The caller is responsible for calling Release on the returned Client.
func StorageReader_ServerToClient(s StorageReader_Server) StorageReader {
	return StorageReader(capnp.NewClient(StorageReader_NewServer(s)))
}

// StorageReader_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func StorageReader_Methods(methods []server.Method, s StorageReader_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xeb1ed22a5561aae3,
			MethodID:      0,
			InterfaceName: "storage.capnp:StorageReader",
			MethodName:    "getSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSturdyRef(ctx, StorageReader_getSturdyRef{call})
		},
	})

	return methods
}

// StorageReader_getSturdyRef holds the state for a server call to StorageReader.getSturdyRef.
// See server.Call for documentation.
type StorageReader_getSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c StorageReader_getSturdyRef) Args() StorageReader_getSturdyRef_Params {
	return StorageReader_getSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c StorageReader_getSturdyRef) AllocResults() (StorageReader_getSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(r), err
}

// StorageReader_List is a list of StorageReader.
type StorageReader_List = capnp.CapList[StorageReader]

// NewStorageReader_List creates a new list of StorageReader.
func NewStorageReader_List(s *capnp.Segment, sz int32) (StorageReader_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[StorageReader](l), err
}

type StorageReader_getSturdyRef_Params capnp.Struct

// StorageReader_getSturdyRef_Params_TypeID is the unique identifier for the type StorageReader_getSturdyRef_Params.
const StorageReader_getSturdyRef_Params_TypeID = 0xa478d6877d52b582

func NewStorageReader_getSturdyRef_Params(s *capnp.Segment) (StorageReader_getSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Params(st), err
}

func NewRootStorageReader_getSturdyRef_Params(s *capnp.Segment) (StorageReader_getSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Params(st), err
}

func ReadRootStorageReader_getSturdyRef_Params(msg *capnp.Message) (StorageReader_getSturdyRef_Params, error) {
	root, err := msg.Root()
	return StorageReader_getSturdyRef_Params(root.Struct()), err
}

func (s StorageReader_getSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xa478d6877d52b582, capnp.Struct(s))
	return str
}

func (s StorageReader_getSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageReader_getSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) StorageReader_getSturdyRef_Params {
	return StorageReader_getSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageReader_getSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageReader_getSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageReader_getSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageReader_getSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageReader_getSturdyRef_Params) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s StorageReader_getSturdyRef_Params) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageReader_getSturdyRef_Params) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s StorageReader_getSturdyRef_Params) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// StorageReader_getSturdyRef_Params_List is a list of StorageReader_getSturdyRef_Params.
type StorageReader_getSturdyRef_Params_List = capnp.StructList[StorageReader_getSturdyRef_Params]

// NewStorageReader_getSturdyRef_Params creates a new list of StorageReader_getSturdyRef_Params.
func NewStorageReader_getSturdyRef_Params_List(s *capnp.Segment, sz int32) (StorageReader_getSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageReader_getSturdyRef_Params](l), err
}

// StorageReader_getSturdyRef_Params_Future is a wrapper for a StorageReader_getSturdyRef_Params promised by a client call.
type StorageReader_getSturdyRef_Params_Future struct{ *capnp.Future }

func (f StorageReader_getSturdyRef_Params_Future) Struct() (StorageReader_getSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return StorageReader_getSturdyRef_Params(p.Struct()), err
}

type StorageReader_getSturdyRef_Results capnp.Struct

// StorageReader_getSturdyRef_Results_TypeID is the unique identifier for the type StorageReader_getSturdyRef_Results.
const StorageReader_getSturdyRef_Results_TypeID = 0xd0dff216087c0481

func NewStorageReader_getSturdyRef_Results(s *capnp.Segment) (StorageReader_getSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(st), err
}

func NewRootStorageReader_getSturdyRef_Results(s *capnp.Segment) (StorageReader_getSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return StorageReader_getSturdyRef_Results(st), err
}

func ReadRootStorageReader_getSturdyRef_Results(msg *capnp.Message) (StorageReader_getSturdyRef_Results, error) {
	root, err := msg.Root()
	return StorageReader_getSturdyRef_Results(root.Struct()), err
}

func (s StorageReader_getSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xd0dff216087c0481, capnp.Struct(s))
	return str
}

func (s StorageReader_getSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (StorageReader_getSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) StorageReader_getSturdyRef_Results {
	return StorageReader_getSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s StorageReader_getSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s StorageReader_getSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s StorageReader_getSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s StorageReader_getSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s StorageReader_getSturdyRef_Results) Sturdyref() (SturdyRefStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefStored(p.Struct()), err
}

func (s StorageReader_getSturdyRef_Results) HasSturdyref() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s StorageReader_getSturdyRef_Results) SetSturdyref(v SturdyRefStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSturdyref sets the sturdyref field to a newly
// allocated SturdyRefStored struct, preferring placement in s's segment.
func (s StorageReader_getSturdyRef_Results) NewSturdyref() (SturdyRefStored, error) {
	ss, err := NewSturdyRefStored(capnp.Struct(s).Segment())
	if err != nil {
		return SturdyRefStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// StorageReader_getSturdyRef_Results_List is a list of StorageReader_getSturdyRef_Results.
type StorageReader_getSturdyRef_Results_List = capnp.StructList[StorageReader_getSturdyRef_Results]

// NewStorageReader_getSturdyRef_Results creates a new list of StorageReader_getSturdyRef_Results.
func NewStorageReader_getSturdyRef_Results_List(s *capnp.Segment, sz int32) (StorageReader_getSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[StorageReader_getSturdyRef_Results](l), err
}

// StorageReader_getSturdyRef_Results_Future is a wrapper for a StorageReader_getSturdyRef_Results promised by a client call.
type StorageReader_getSturdyRef_Results_Future struct{ *capnp.Future }

func (f StorageReader_getSturdyRef_Results_Future) Struct() (StorageReader_getSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return StorageReader_getSturdyRef_Results(p.Struct()), err
}
func (p StorageReader_getSturdyRef_Results_Future) Sturdyref() SturdyRefStored_Future {
	return SturdyRefStored_Future{Future: p.Future.Field(0, nil)}
}

type UserStored capnp.Struct

// UserStored_TypeID is the unique identifier for the type UserStored.
const UserStored_TypeID = 0x8ef7e2521d75bf04

func NewUserStored(s *capnp.Segment) (UserStored, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserStored(st), err
}

func NewRootUserStored(s *capnp.Segment) (UserStored, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserStored(st), err
}

func ReadRootUserStored(msg *capnp.Message) (UserStored, error) {
	root, err := msg.Root()
	return UserStored(root.Struct()), err
}

func (s UserStored) String() string {
	str, _ := text.Marshal(0x8ef7e2521d75bf04, capnp.Struct(s))
	return str
}

func (s UserStored) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserStored) DecodeFromPtr(p capnp.Ptr) UserStored {
	return UserStored(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserStored) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserStored) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserStored) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserStored) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserStored) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserStored) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserStored) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserStored) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserStored) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserStored) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserStored) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserStored) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserStored_List is a list of UserStored.
type UserStored_List = capnp.StructList[UserStored]

// NewUserStored creates a new list of UserStored.
func NewUserStored_List(s *capnp.Segment, sz int32) (UserStored_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UserStored](l), err
}

// UserStored_Future is a wrapper for a UserStored promised by a client call.
type UserStored_Future struct{ *capnp.Future }

func (f UserStored_Future) Struct() (UserStored, error) {
	p, err := f.Future.Ptr()
	return UserStored(p.Struct()), err
}

type UserEditor capnp.Client

// UserEditor_TypeID is the unique identifier for the type UserEditor.
const UserEditor_TypeID = 0x84761835db7b4b72

func (c UserEditor) NewUser(ctx context.Context, params func(UserEditor_newUser_Params) error) (UserEditor_newUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      0,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "newUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_newUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_newUser_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) DeleteUser(ctx context.Context, params func(UserEditor_deleteUser_Params) error) (UserEditor_deleteUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      1,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "deleteUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_deleteUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_deleteUser_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) FindByToken(ctx context.Context, params func(UserEditor_findByToken_Params) error) (UserEditor_findByToken_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      2,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findByToken",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_findByToken_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_findByToken_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) FindBySignature(ctx context.Context, params func(UserEditor_findBySignature_Params) error) (UserEditor_findBySignature_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      3,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findBySignature",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_findBySignature_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_findBySignature_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) AddSeal(ctx context.Context, params func(UserEditor_addSeal_Params) error) (UserEditor_addSeal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      4,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "addSeal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(UserEditor_addSeal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return UserEditor_addSeal_Results_Future{Future: ans.Future()}, release

}

func (c UserEditor) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c UserEditor) String() string {
	return "UserEditor(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c UserEditor) AddRef() UserEditor {
	return UserEditor(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c UserEditor) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c UserEditor) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c UserEditor) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (UserEditor) DecodeFromPtr(p capnp.Ptr) UserEditor {
	return UserEditor(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c UserEditor) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c UserEditor) IsSame(other UserEditor) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c UserEditor) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c UserEditor) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A UserEditor_Server is a UserEditor with a local implementation.
type UserEditor_Server interface {
	NewUser(context.Context, UserEditor_newUser) error

	DeleteUser(context.Context, UserEditor_deleteUser) error

	FindByToken(context.Context, UserEditor_findByToken) error

	FindBySignature(context.Context, UserEditor_findBySignature) error

	AddSeal(context.Context, UserEditor_addSeal) error
}

// UserEditor_NewServer creates a new Server from an implementation of UserEditor_Server.
func UserEditor_NewServer(s UserEditor_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(UserEditor_Methods(nil, s), s, c)
}

// UserEditor_ServerToClient creates a new Client from an implementation of UserEditor_Server.
// The caller is responsible for calling Release on the returned Client.
func UserEditor_ServerToClient(s UserEditor_Server) UserEditor {
	return UserEditor(capnp.NewClient(UserEditor_NewServer(s)))
}

// UserEditor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func UserEditor_Methods(methods []server.Method, s UserEditor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      0,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "newUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewUser(ctx, UserEditor_newUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      1,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "deleteUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DeleteUser(ctx, UserEditor_deleteUser{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      2,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findByToken",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindByToken(ctx, UserEditor_findByToken{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      3,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "findBySignature",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.FindBySignature(ctx, UserEditor_findBySignature{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x84761835db7b4b72,
			MethodID:      4,
			InterfaceName: "storage.capnp:UserEditor",
			MethodName:    "addSeal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddSeal(ctx, UserEditor_addSeal{call})
		},
	})

	return methods
}

// UserEditor_newUser holds the state for a server call to UserEditor.newUser.
// See server.Call for documentation.
type UserEditor_newUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_newUser) Args() UserEditor_newUser_Params {
	return UserEditor_newUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_newUser) AllocResults() (UserEditor_newUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(r), err
}

// UserEditor_deleteUser holds the state for a server call to UserEditor.deleteUser.
// See server.Call for documentation.
type UserEditor_deleteUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_deleteUser) Args() UserEditor_deleteUser_Params {
	return UserEditor_deleteUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_deleteUser) AllocResults() (UserEditor_deleteUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(r), err
}

// UserEditor_findByToken holds the state for a server call to UserEditor.findByToken.
// See server.Call for documentation.
type UserEditor_findByToken struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_findByToken) Args() UserEditor_findByToken_Params {
	return UserEditor_findByToken_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_findByToken) AllocResults() (UserEditor_findByToken_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(r), err
}

// UserEditor_findBySignature holds the state for a server call to UserEditor.findBySignature.
// See server.Call for documentation.
type UserEditor_findBySignature struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_findBySignature) Args() UserEditor_findBySignature_Params {
	return UserEditor_findBySignature_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_findBySignature) AllocResults() (UserEditor_findBySignature_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(r), err
}

// UserEditor_addSeal holds the state for a server call to UserEditor.addSeal.
// See server.Call for documentation.
type UserEditor_addSeal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c UserEditor_addSeal) Args() UserEditor_addSeal_Params {
	return UserEditor_addSeal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c UserEditor_addSeal) AllocResults() (UserEditor_addSeal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(r), err
}

// UserEditor_List is a list of UserEditor.
type UserEditor_List = capnp.CapList[UserEditor]

// NewUserEditor_List creates a new list of UserEditor.
func NewUserEditor_List(s *capnp.Segment, sz int32) (UserEditor_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[UserEditor](l), err
}

type UserEditor_newUser_Params capnp.Struct

// UserEditor_newUser_Params_TypeID is the unique identifier for the type UserEditor_newUser_Params.
const UserEditor_newUser_Params_TypeID = 0xb8926ab3e343717f

func NewUserEditor_newUser_Params(s *capnp.Segment) (UserEditor_newUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_newUser_Params(st), err
}

func NewRootUserEditor_newUser_Params(s *capnp.Segment) (UserEditor_newUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_newUser_Params(st), err
}

func ReadRootUserEditor_newUser_Params(msg *capnp.Message) (UserEditor_newUser_Params, error) {
	root, err := msg.Root()
	return UserEditor_newUser_Params(root.Struct()), err
}

func (s UserEditor_newUser_Params) String() string {
	str, _ := text.Marshal(0xb8926ab3e343717f, capnp.Struct(s))
	return str
}

func (s UserEditor_newUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_newUser_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_newUser_Params {
	return UserEditor_newUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_newUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_newUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_newUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_newUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_newUser_Params_List is a list of UserEditor_newUser_Params.
type UserEditor_newUser_Params_List = capnp.StructList[UserEditor_newUser_Params]

// NewUserEditor_newUser_Params creates a new list of UserEditor_newUser_Params.
func NewUserEditor_newUser_Params_List(s *capnp.Segment, sz int32) (UserEditor_newUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_newUser_Params](l), err
}

// UserEditor_newUser_Params_Future is a wrapper for a UserEditor_newUser_Params promised by a client call.
type UserEditor_newUser_Params_Future struct{ *capnp.Future }

func (f UserEditor_newUser_Params_Future) Struct() (UserEditor_newUser_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_newUser_Params(p.Struct()), err
}

type UserEditor_newUser_Results capnp.Struct

// UserEditor_newUser_Results_TypeID is the unique identifier for the type UserEditor_newUser_Results.
const UserEditor_newUser_Results_TypeID = 0xbdeca414321680f4

func NewUserEditor_newUser_Results(s *capnp.Segment) (UserEditor_newUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(st), err
}

func NewRootUserEditor_newUser_Results(s *capnp.Segment) (UserEditor_newUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_newUser_Results(st), err
}

func ReadRootUserEditor_newUser_Results(msg *capnp.Message) (UserEditor_newUser_Results, error) {
	root, err := msg.Root()
	return UserEditor_newUser_Results(root.Struct()), err
}

func (s UserEditor_newUser_Results) String() string {
	str, _ := text.Marshal(0xbdeca414321680f4, capnp.Struct(s))
	return str
}

func (s UserEditor_newUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_newUser_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_newUser_Results {
	return UserEditor_newUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_newUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_newUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_newUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_newUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_newUser_Results) User() (UserStored, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserStored(p.Struct()), err
}

func (s UserEditor_newUser_Results) HasUser() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_newUser_Results) SetUser(v UserStored) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUser sets the user field to a newly
// allocated UserStored struct, preferring placement in s's segment.
func (s UserEditor_newUser_Results) NewUser() (UserStored, error) {
	ss, err := NewUserStored(capnp.Struct(s).Segment())
	if err != nil {
		return UserStored{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// UserEditor_newUser_Results_List is a list of UserEditor_newUser_Results.
type UserEditor_newUser_Results_List = capnp.StructList[UserEditor_newUser_Results]

// NewUserEditor_newUser_Results creates a new list of UserEditor_newUser_Results.
func NewUserEditor_newUser_Results_List(s *capnp.Segment, sz int32) (UserEditor_newUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_newUser_Results](l), err
}

// UserEditor_newUser_Results_Future is a wrapper for a UserEditor_newUser_Results promised by a client call.
type UserEditor_newUser_Results_Future struct{ *capnp.Future }

func (f UserEditor_newUser_Results_Future) Struct() (UserEditor_newUser_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_newUser_Results(p.Struct()), err
}
func (p UserEditor_newUser_Results_Future) User() UserStored_Future {
	return UserStored_Future{Future: p.Future.Field(0, nil)}
}

type UserEditor_deleteUser_Params capnp.Struct

// UserEditor_deleteUser_Params_TypeID is the unique identifier for the type UserEditor_deleteUser_Params.
const UserEditor_deleteUser_Params_TypeID = 0x8e9be0a3d79fa1a0

func NewUserEditor_deleteUser_Params(s *capnp.Segment) (UserEditor_deleteUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_deleteUser_Params(st), err
}

func NewRootUserEditor_deleteUser_Params(s *capnp.Segment) (UserEditor_deleteUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_deleteUser_Params(st), err
}

func ReadRootUserEditor_deleteUser_Params(msg *capnp.Message) (UserEditor_deleteUser_Params, error) {
	root, err := msg.Root()
	return UserEditor_deleteUser_Params(root.Struct()), err
}

func (s UserEditor_deleteUser_Params) String() string {
	str, _ := text.Marshal(0x8e9be0a3d79fa1a0, capnp.Struct(s))
	return str
}

func (s UserEditor_deleteUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_deleteUser_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_deleteUser_Params {
	return UserEditor_deleteUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_deleteUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_deleteUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_deleteUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_deleteUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_deleteUser_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_deleteUser_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_deleteUser_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_deleteUser_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_deleteUser_Params_List is a list of UserEditor_deleteUser_Params.
type UserEditor_deleteUser_Params_List = capnp.StructList[UserEditor_deleteUser_Params]

// NewUserEditor_deleteUser_Params creates a new list of UserEditor_deleteUser_Params.
func NewUserEditor_deleteUser_Params_List(s *capnp.Segment, sz int32) (UserEditor_deleteUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_deleteUser_Params](l), err
}

// UserEditor_deleteUser_Params_Future is a wrapper for a UserEditor_deleteUser_Params promised by a client call.
type UserEditor_deleteUser_Params_Future struct{ *capnp.Future }

func (f UserEditor_deleteUser_Params_Future) Struct() (UserEditor_deleteUser_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_deleteUser_Params(p.Struct()), err
}

type UserEditor_deleteUser_Results capnp.Struct

// UserEditor_deleteUser_Results_TypeID is the unique identifier for the type UserEditor_deleteUser_Results.
const UserEditor_deleteUser_Results_TypeID = 0xbb64bbd4b54a0ac7

func NewUserEditor_deleteUser_Results(s *capnp.Segment) (UserEditor_deleteUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(st), err
}

func NewRootUserEditor_deleteUser_Results(s *capnp.Segment) (UserEditor_deleteUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_deleteUser_Results(st), err
}

func ReadRootUserEditor_deleteUser_Results(msg *capnp.Message) (UserEditor_deleteUser_Results, error) {
	root, err := msg.Root()
	return UserEditor_deleteUser_Results(root.Struct()), err
}

func (s UserEditor_deleteUser_Results) String() string {
	str, _ := text.Marshal(0xbb64bbd4b54a0ac7, capnp.Struct(s))
	return str
}

func (s UserEditor_deleteUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_deleteUser_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_deleteUser_Results {
	return UserEditor_deleteUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_deleteUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_deleteUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_deleteUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_deleteUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_deleteUser_Results_List is a list of UserEditor_deleteUser_Results.
type UserEditor_deleteUser_Results_List = capnp.StructList[UserEditor_deleteUser_Results]

// NewUserEditor_deleteUser_Results creates a new list of UserEditor_deleteUser_Results.
func NewUserEditor_deleteUser_Results_List(s *capnp.Segment, sz int32) (UserEditor_deleteUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_deleteUser_Results](l), err
}

// UserEditor_deleteUser_Results_Future is a wrapper for a UserEditor_deleteUser_Results promised by a client call.
type UserEditor_deleteUser_Results_Future struct{ *capnp.Future }

func (f UserEditor_deleteUser_Results_Future) Struct() (UserEditor_deleteUser_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_deleteUser_Results(p.Struct()), err
}

type UserEditor_findByToken_Params capnp.Struct

// UserEditor_findByToken_Params_TypeID is the unique identifier for the type UserEditor_findByToken_Params.
const UserEditor_findByToken_Params_TypeID = 0xc758e2223661f240

func NewUserEditor_findByToken_Params(s *capnp.Segment) (UserEditor_findByToken_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Params(st), err
}

func NewRootUserEditor_findByToken_Params(s *capnp.Segment) (UserEditor_findByToken_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Params(st), err
}

func ReadRootUserEditor_findByToken_Params(msg *capnp.Message) (UserEditor_findByToken_Params, error) {
	root, err := msg.Root()
	return UserEditor_findByToken_Params(root.Struct()), err
}

func (s UserEditor_findByToken_Params) String() string {
	str, _ := text.Marshal(0xc758e2223661f240, capnp.Struct(s))
	return str
}

func (s UserEditor_findByToken_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findByToken_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_findByToken_Params {
	return UserEditor_findByToken_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findByToken_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findByToken_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findByToken_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findByToken_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findByToken_Params) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findByToken_Params) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findByToken_Params) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findByToken_Params) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findByToken_Params_List is a list of UserEditor_findByToken_Params.
type UserEditor_findByToken_Params_List = capnp.StructList[UserEditor_findByToken_Params]

// NewUserEditor_findByToken_Params creates a new list of UserEditor_findByToken_Params.
func NewUserEditor_findByToken_Params_List(s *capnp.Segment, sz int32) (UserEditor_findByToken_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findByToken_Params](l), err
}

// UserEditor_findByToken_Params_Future is a wrapper for a UserEditor_findByToken_Params promised by a client call.
type UserEditor_findByToken_Params_Future struct{ *capnp.Future }

func (f UserEditor_findByToken_Params_Future) Struct() (UserEditor_findByToken_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findByToken_Params(p.Struct()), err
}

type UserEditor_findByToken_Results capnp.Struct

// UserEditor_findByToken_Results_TypeID is the unique identifier for the type UserEditor_findByToken_Results.
const UserEditor_findByToken_Results_TypeID = 0x83b4805dae03e8f2

func NewUserEditor_findByToken_Results(s *capnp.Segment) (UserEditor_findByToken_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(st), err
}

func NewRootUserEditor_findByToken_Results(s *capnp.Segment) (UserEditor_findByToken_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findByToken_Results(st), err
}

func ReadRootUserEditor_findByToken_Results(msg *capnp.Message) (UserEditor_findByToken_Results, error) {
	root, err := msg.Root()
	return UserEditor_findByToken_Results(root.Struct()), err
}

func (s UserEditor_findByToken_Results) String() string {
	str, _ := text.Marshal(0x83b4805dae03e8f2, capnp.Struct(s))
	return str
}

func (s UserEditor_findByToken_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findByToken_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_findByToken_Results {
	return UserEditor_findByToken_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findByToken_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findByToken_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findByToken_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findByToken_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findByToken_Results) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findByToken_Results) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findByToken_Results) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findByToken_Results) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findByToken_Results_List is a list of UserEditor_findByToken_Results.
type UserEditor_findByToken_Results_List = capnp.StructList[UserEditor_findByToken_Results]

// NewUserEditor_findByToken_Results creates a new list of UserEditor_findByToken_Results.
func NewUserEditor_findByToken_Results_List(s *capnp.Segment, sz int32) (UserEditor_findByToken_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findByToken_Results](l), err
}

// UserEditor_findByToken_Results_Future is a wrapper for a UserEditor_findByToken_Results promised by a client call.
type UserEditor_findByToken_Results_Future struct{ *capnp.Future }

func (f UserEditor_findByToken_Results_Future) Struct() (UserEditor_findByToken_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findByToken_Results(p.Struct()), err
}

type UserEditor_findBySignature_Params capnp.Struct

// UserEditor_findBySignature_Params_TypeID is the unique identifier for the type UserEditor_findBySignature_Params.
const UserEditor_findBySignature_Params_TypeID = 0xdd3326f2fdb223a9

func NewUserEditor_findBySignature_Params(s *capnp.Segment) (UserEditor_findBySignature_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Params(st), err
}

func NewRootUserEditor_findBySignature_Params(s *capnp.Segment) (UserEditor_findBySignature_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Params(st), err
}

func ReadRootUserEditor_findBySignature_Params(msg *capnp.Message) (UserEditor_findBySignature_Params, error) {
	root, err := msg.Root()
	return UserEditor_findBySignature_Params(root.Struct()), err
}

func (s UserEditor_findBySignature_Params) String() string {
	str, _ := text.Marshal(0xdd3326f2fdb223a9, capnp.Struct(s))
	return str
}

func (s UserEditor_findBySignature_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findBySignature_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_findBySignature_Params {
	return UserEditor_findBySignature_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findBySignature_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findBySignature_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findBySignature_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findBySignature_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findBySignature_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findBySignature_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findBySignature_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findBySignature_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findBySignature_Params_List is a list of UserEditor_findBySignature_Params.
type UserEditor_findBySignature_Params_List = capnp.StructList[UserEditor_findBySignature_Params]

// NewUserEditor_findBySignature_Params creates a new list of UserEditor_findBySignature_Params.
func NewUserEditor_findBySignature_Params_List(s *capnp.Segment, sz int32) (UserEditor_findBySignature_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findBySignature_Params](l), err
}

// UserEditor_findBySignature_Params_Future is a wrapper for a UserEditor_findBySignature_Params promised by a client call.
type UserEditor_findBySignature_Params_Future struct{ *capnp.Future }

func (f UserEditor_findBySignature_Params_Future) Struct() (UserEditor_findBySignature_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findBySignature_Params(p.Struct()), err
}

type UserEditor_findBySignature_Results capnp.Struct

// UserEditor_findBySignature_Results_TypeID is the unique identifier for the type UserEditor_findBySignature_Results.
const UserEditor_findBySignature_Results_TypeID = 0xb34c006f915d9adb

func NewUserEditor_findBySignature_Results(s *capnp.Segment) (UserEditor_findBySignature_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(st), err
}

func NewRootUserEditor_findBySignature_Results(s *capnp.Segment) (UserEditor_findBySignature_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserEditor_findBySignature_Results(st), err
}

func ReadRootUserEditor_findBySignature_Results(msg *capnp.Message) (UserEditor_findBySignature_Results, error) {
	root, err := msg.Root()
	return UserEditor_findBySignature_Results(root.Struct()), err
}

func (s UserEditor_findBySignature_Results) String() string {
	str, _ := text.Marshal(0xb34c006f915d9adb, capnp.Struct(s))
	return str
}

func (s UserEditor_findBySignature_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_findBySignature_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_findBySignature_Results {
	return UserEditor_findBySignature_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_findBySignature_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_findBySignature_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_findBySignature_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_findBySignature_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_findBySignature_Results) SturdyRefToken() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_findBySignature_Results) HasSturdyRefToken() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_findBySignature_Results) SturdyRefTokenBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_findBySignature_Results) SetSturdyRefToken(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// UserEditor_findBySignature_Results_List is a list of UserEditor_findBySignature_Results.
type UserEditor_findBySignature_Results_List = capnp.StructList[UserEditor_findBySignature_Results]

// NewUserEditor_findBySignature_Results creates a new list of UserEditor_findBySignature_Results.
func NewUserEditor_findBySignature_Results_List(s *capnp.Segment, sz int32) (UserEditor_findBySignature_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserEditor_findBySignature_Results](l), err
}

// UserEditor_findBySignature_Results_Future is a wrapper for a UserEditor_findBySignature_Results promised by a client call.
type UserEditor_findBySignature_Results_Future struct{ *capnp.Future }

func (f UserEditor_findBySignature_Results_Future) Struct() (UserEditor_findBySignature_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_findBySignature_Results(p.Struct()), err
}

type UserEditor_addSeal_Params capnp.Struct

// UserEditor_addSeal_Params_TypeID is the unique identifier for the type UserEditor_addSeal_Params.
const UserEditor_addSeal_Params_TypeID = 0x97eb1b20191db78a

func NewUserEditor_addSeal_Params(s *capnp.Segment) (UserEditor_addSeal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserEditor_addSeal_Params(st), err
}

func NewRootUserEditor_addSeal_Params(s *capnp.Segment) (UserEditor_addSeal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UserEditor_addSeal_Params(st), err
}

func ReadRootUserEditor_addSeal_Params(msg *capnp.Message) (UserEditor_addSeal_Params, error) {
	root, err := msg.Root()
	return UserEditor_addSeal_Params(root.Struct()), err
}

func (s UserEditor_addSeal_Params) String() string {
	str, _ := text.Marshal(0x97eb1b20191db78a, capnp.Struct(s))
	return str
}

func (s UserEditor_addSeal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_addSeal_Params) DecodeFromPtr(p capnp.Ptr) UserEditor_addSeal_Params {
	return UserEditor_addSeal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_addSeal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_addSeal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_addSeal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_addSeal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserEditor_addSeal_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s UserEditor_addSeal_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserEditor_addSeal_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s UserEditor_addSeal_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s UserEditor_addSeal_Params) Seal() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s UserEditor_addSeal_Params) HasSeal() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s UserEditor_addSeal_Params) SealBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s UserEditor_addSeal_Params) SetSeal(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// UserEditor_addSeal_Params_List is a list of UserEditor_addSeal_Params.
type UserEditor_addSeal_Params_List = capnp.StructList[UserEditor_addSeal_Params]

// NewUserEditor_addSeal_Params creates a new list of UserEditor_addSeal_Params.
func NewUserEditor_addSeal_Params_List(s *capnp.Segment, sz int32) (UserEditor_addSeal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[UserEditor_addSeal_Params](l), err
}

// UserEditor_addSeal_Params_Future is a wrapper for a UserEditor_addSeal_Params promised by a client call.
type UserEditor_addSeal_Params_Future struct{ *capnp.Future }

func (f UserEditor_addSeal_Params_Future) Struct() (UserEditor_addSeal_Params, error) {
	p, err := f.Future.Ptr()
	return UserEditor_addSeal_Params(p.Struct()), err
}

type UserEditor_addSeal_Results capnp.Struct

// UserEditor_addSeal_Results_TypeID is the unique identifier for the type UserEditor_addSeal_Results.
const UserEditor_addSeal_Results_TypeID = 0xfd8477ce39853249

func NewUserEditor_addSeal_Results(s *capnp.Segment) (UserEditor_addSeal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(st), err
}

func NewRootUserEditor_addSeal_Results(s *capnp.Segment) (UserEditor_addSeal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return UserEditor_addSeal_Results(st), err
}

func ReadRootUserEditor_addSeal_Results(msg *capnp.Message) (UserEditor_addSeal_Results, error) {
	root, err := msg.Root()
	return UserEditor_addSeal_Results(root.Struct()), err
}

func (s UserEditor_addSeal_Results) String() string {
	str, _ := text.Marshal(0xfd8477ce39853249, capnp.Struct(s))
	return str
}

func (s UserEditor_addSeal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserEditor_addSeal_Results) DecodeFromPtr(p capnp.Ptr) UserEditor_addSeal_Results {
	return UserEditor_addSeal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserEditor_addSeal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserEditor_addSeal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserEditor_addSeal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserEditor_addSeal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// UserEditor_addSeal_Results_List is a list of UserEditor_addSeal_Results.
type UserEditor_addSeal_Results_List = capnp.StructList[UserEditor_addSeal_Results]

// NewUserEditor_addSeal_Results creates a new list of UserEditor_addSeal_Results.
func NewUserEditor_addSeal_Results_List(s *capnp.Segment, sz int32) (UserEditor_addSeal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[UserEditor_addSeal_Results](l), err
}

// UserEditor_addSeal_Results_Future is a wrapper for a UserEditor_addSeal_Results promised by a client call.
type UserEditor_addSeal_Results_Future struct{ *capnp.Future }

func (f UserEditor_addSeal_Results_Future) Struct() (UserEditor_addSeal_Results, error) {
	p, err := f.Future.Ptr()
	return UserEditor_addSeal_Results(p.Struct()), err
}

const schema_dca555fc76741dc1 = "x\xda\xd4Z{tSU\x97?;7%\xbc\xda\xf4" +
	"\xf4\xf6\xdd\xa6\x91\xf9\xe0[\xc8'h\x05\x86\x87vZ" +
	"\x10\xa8E\xd0\xde\xb4Ua\x0dHJ.L M\xda" +
	"$mm\x87\x0eP\xac\x08X\x16EA\xa98\x0a\xd2" +
	"\x19\x15\x91\x01d| 8\x8c\xa3(\x03\xe2\xa0\x83\xcb" +
	"\x02* \xe2(8\xda\xc1\xc1wf\xed\x93\x9c\x9b\x93" +
	"\xe4\xb6i\xc1\xf9\xe3\xfb/\xbd\xddw?\x7f\xfbq\xf6" +
	"\xb97\x99\x07\x15\x19\xf3\x13\x97f\x13C\xd9\x18H\xe8" +
	"\x17\xb8P\xb7=\xf0'e\xderBs\x80\x90\x040" +
	"\x112zX\xe2j  \x8fM,$\x10\xe8\xfaR" +
	"zq\xce\xb2\x97V\x10\x9a\xa5\x11\xccJ\\\x84\x04*" +
	"#\xf0\xde\xf1\xb7'\xc7f\xd6=@h\x92\x148h" +
	"\xf1\xd7\xfdR\xd1q\x8a\x10\x90W%\x1e\x967$\"" +
	"}[b1\xc8j\x92\x89\x90\xc0;\x9f}\xb1,\xb7" +
	"\xfeb\x0b\xa1y@\x88\x11\xff;3i7\x10c`" +
	"\xf1\xb0;\xf2\x8c\xea\x9a\x95\x84fk\x82\x0a\x92\x98&" +
	"3\x93PPiS\xf1\x0f\x9e\xbbJV\x8b\x045I" +
	"\xcdH\xd0\x84\x04\xbf\xdd_9\xfe\xc0\xe5\x9f\xd7\xd0\\" +
	"\xceyK\xd2V\xe4<\xd22w\\\xc3~\xefZB" +
	"\x93 \xe0\xbf\xb2\xff\xd4S7n\x7f\x9f$HL\xb5" +
	"$\x03\xc8O\xa2j\xf2\xa6\xa4\x9d\x04\x02Ooy\xea" +
	"\xa3g>{b\xadh\xef$\xf3l\xa6\x86\x19\xd50" +
	"\xbeQk\xb1\x9d\xbd\x12\xe4\xa6\xd9\x9b`@\x165\xe6" +
	"\xc3r\x93\x19\x7f5\x98\xeb\x09\x04\xfe\xea\xf1q\xdf\xbe" +
	"\xfe\xd7\x0d\xebD\xef\x9e63\x9b.1f\xed\xad\xcb" +
	"\xfb\xbf\xe9|$\x82\x80&7\"\x81%\x19\x09\xcaw" +
	"<*\x0f\xe9\xb8}=aV\x85\xd4I\xde\x8d\x04\x0a" +
	"#(\x9a\xbb\xa8\xf4\xc1[7=\x1at(Sct" +
	"K\xf2\xf3H\xb0!\x19ux\xe9\xca\xdf\x1f\xfc\xf9\x89" +
	"\x877\x8a\x1c\xbeOfn\x03\x8a\x1c.\xae\xbd\xb4\xf5" +
	"@g\xf5c1\x01\x1cF\xcf\xca\xf9\x14\xe9G\xd2b" +
	"\x90i\x0a\x06p\xf5\xcb\x96\xac\xebr\xbe~,\xe4\x1f" +
	"&\xefG:\x99\xb1KAy\xa3+\xcet\x0d=y" +
	"~\xb3(\xcf\x9e\xc2\xe4U\xa5\xa0\xbc?\x0e\xaa\xf9\xe5" +
	"D\xbfW\x9f&\xd4\xaa\x11\xb4\xa5\x1cF\x82\x0eF\xb0" +
	"\xa7\xf9\xc7\x8d\x9f~]\xb0Et\xca\xd1\x14f\xd2i" +
	"F \xff\xe2\xfd|\xc2\x8a\xdd[\x98\xc6\xf6\xf4\xbd\xaf" +
	"d|\xbc\xef#\xd4\x98\xca]\xb2EF\xffg\xc9\xc5" +
	"r\x09\xfe\x0a|\x93\xd3z\xe5\xcc\x09\xd8\x16\x84\x0d\xc3" +
	"E\xbe\xdc\x8c\xb8h\xdekkZy\xe2\xfem\xa2\xa6" +
	"\x16\x99iz\xbd\x8cr\xe6\xb6\x1e\xbb\xeb\xdb\xa3\x0fr" +
	"\x02f\xebLy=\x12\xcc\x91\xd1\xd6w&\x0c1\x96" +
	"m\xc9\xec a\xcc\x1d\x94\x9fG\xde\x8e\xc2U'?" +
	"\xd9\xf3L\x87\x08\xd6]2\x0b\xec~\xc6{\\\xe0\x96" +
	"\x8b\xc3o}\xb7C\xf4\xc2w23\x12R\x91\xa0\xba" +
	"\xd5w\xec\xf1S\xf5\xff\x10\x91\x99\xa9[Yf2\x82" +
	"\x9d\xb3\x8e|\\<\xe4\xd8?\x8a\x1c\x9c\xa9\x0c\x1a\x0d" +
	"\x8c\xe0\x9d\xd6R\xf7\x94\xf7\xcc\xcf\x8a:<\x99\xca\xd0" +
	"\xb7\x83\x11|U\xf0\xc8\xf6\x09\xc6\xd9\xdbE\x07\xfcG" +
	"\x90\xe0\x0c#h\x9fP;\xf4\xabM\xce\x17\xa22\x07" +
	"\x0d\x95\xd3\xd2~\x92\x87\xa4\xe1/K\xda\x05\x02\x81\xa9" +
	"O\xcd\xab\xaeN\xda\xbdCd\x96\x90\xce\xc2\x9a\x95\x8e" +
	"\xcc\xee\x9br\xc4\xb59\xeb\xefv1fZ\xd4\x18\xb3" +
	"\xd1\x05\xe9\x03A\x9e\x99\x8e\xdcJ\xd2\x91[B\xf9\xe1" +
	"5/\xcf~z\x97\x18\xb5\x8c\xf5@\x8c\x9f\x9el\x9f" +
	"\xd3\xe6\x99\xb1GH\xcf!\x19L\xe5\xfc\x0c\x94\xb2U" +
	"\xb6~k91`\xaf\xe8\x95\x8a\x8c\x7fe\xf5\x8a\x11" +
	",\xad\xb9\xed\xdc\x9eE\xeb_\x09\x02\x98qn\xc9\x98" +
	"\x8c1\x9b\x993d\xe8K);_\x11=^\x95\xc1" +
	"\xc2\xdd\xc4^\x1d\xd0y\xdf\x17;\xff\xf4\xe5k\"\xc1" +
	"\x96\x8c\x89H\xf0\x1c#84p\xfa\xde\x0f\xf79\xf6" +
	"\x09\xbc\xdf\xcd\xa8D\xde\xe7\x0e\xfd\xfb\xf8\x87\x1b\x1b\xf7" +
	"Ey2\x01I\xf6f\x0c\x04\xf9\xad\x0c\x86\x9e\x0c+" +
	"\x10\x08$\xb7\xbd\xf0\xfdF\xe5\xf2\xeb1\x00?\x9f\xd9" +
	")\x7f\x97\x89n\xba\x94Y,\xa7e!\xc0\x9f8\xde" +
	"9a\xd5W\x1d\xfbE\xad~\xcdd0\x1e\x90\x85Z" +
	"]^\x96~s\xea\xb6\x8b\xfb\xc5\x92V\x905\x1d\x09" +
	"J\x18\xc1\xc6\x19M\x93-\xa9\x9d\x07\x82\x1c\x98\xda\xce" +
	",\xe6\x92+\x0f\xae\xce\xdax\xd7ko\x8bAU\xb2" +
	"\x18\xef9\xec\xd5\xa2.\xfb_\xfe\xc5\xd9{\x0f\x89\xbc" +
	"\x97gU\"A+#8q\xfb\xbb\x87\x96\x9c*:" +
	"\x12\xd2\x8e\xe5\xd0\xae,\xe6\xd4\x83Y\x98C\xdbv\x8c" +
	"\xfc\xa6\xfd\xc4GG\x85\x1c\x1a\x96\xbd\x1a\x85\xff\xd3u" +
	"\x17\x9a\x86\xff\xd7\x81c\xa2ai\xd9\xec\xd5a\xd9\xc8" +
	"{\xb9qI\xff\xf4\xaeO\xdf\x17\xb5+\xc9f`\x98" +
	"\xc5\x08n\xfb\xefC\x1br\xef<\xf7~T\xadf\xf8" +
	"m\xca\xee\x92We\xe3\xaf\x96lD\xdc\xaa?L\xfc" +
	"\xc4?\xaf\xfd\x03\xe6s-B\x08\x9b\x9c\xe3rM\x0e" +
	"\x03C\x8e\x09dK\xae\x89\x907~\xc8\xfc\xa0\xc0r" +
	"\xcb\x7f\x0a\x99\x95\x90\xebE\xc14\x17\x05\x97\xacx\xc6" +
	"v\xe4\xcb\xb7:\xa3\xb0\xce\xac\x1f\x9b;\x11\xe4\xa9\xc8" +
	"E\x9e\x94\x8b\x1e(n\x9ei:\xd2o\xee\xc9P\x09" +
	"\x0f\xc2*\x97Av\x17\xe3\xe6<\xf1\xc3:\xc7\xdb\xbf" +
	"\x9d\x8c\x81\xc3\xc7\xb9?\xc9\xe7\x19\xa73\xb9+\xe5\x02" +
	"\x0b\xc2\xe1\xb9?\xec\xfe\xb5\xeb\x8f\xa3O\x8b\x11\x19f" +
	"a!\xcb\xb7 \xb7\xb3\xe5\xe3+n\xb8n\xdciQ" +
	"\\\x85\xe55\x96!\x8c\xe0\xdf\x12\xac\xa7\xe6\x1c\x97>" +
	"\x8b\x11\xd7b9+\xb7\xa1\x10\xb9\xd5\xb2R>\xcf\xc4" +
	"\x8d\\\xb2\xac\xb8\xc01\xe0\xbc\x18\x83\xa3\x16\x16\x83\xd3" +
	"\x8c\xdb\xedwW\xff\xcb\x98C\xe3/\x08\xe0\x82\xbcv" +
	"\x8c\xef\xda}\x9d\x8b\xd3\x1a\xae\\\x10_\xfd\xce\xd2\xce" +
	"J`\x1e\xbez\xeey{\xc5\x88\xe3y_\xc7v\xa6" +
	"\xbc\xb3r~\x1e*22\xafX\x9e\x85\xbf\x02o\x8e" +
	"\xff\x9c.\xcb.\xff\x1f\xb1\xdaM\xcac\x8a(\x8c\xdb" +
	"\x98\x837\xbe\xf0\xe2\x8e\xdd\x97Eq-yL\xdc\x06" +
	"F\xf0\xd0?\xdf\xb7f\xc5\x9a{\xbe\x8fA\xc0\xaby" +
	"\x9d\xf2[y,?\xf3\x8aA\xdebEyG>L" +
	"\x9a>(\xa7\xf9\x7fc\xbc\xb4\xca\xda%o@\x12\xb9" +
	"\xcdZ,\xefg\xc4\x8d\x13\xf6\xdd\x91]Y\xf1\x93(" +
	"\xbb\xc3z\x1ce\xbfje\x80\xb9\xb9e\xc2{\xf5\x0f" +
	"\xfc*T\x8eK\xd6\xe9@\xa6\x05\xea\xd5\xca:\xa7Z" +
	"?*a\xbe\xbd\xda]=\xf1\x1e\xb5\xf2n\xa7Z?" +
	"\xc9Q\xe5t\x8fZ\xa8\xfa\xcbTo\x9ds\xbe\x8a\xcf" +
	"\x86\x96\xda\xbd\xf6*\x1f!\x8aQ2\x12b\x04Bh" +
	"\xa2\x8d\x10e\xb0\x04J\xa6\x01\x02\xbe m\x09\x81)" +
	"0\x98\x18`0\x81\x80\xcf\xef\xf1\xda\x17\xaa\xa3\x8cA" +
	"\xf6\x15>\xd5;\xd5\xe1\xf4{\xbc\xa3\x168\xdd\x8e\xc9" +
	"\x0d\xe5\x9e\xc5\xaa{\xa8M\xf5\x99k]~\x9f\xc8\xd9" +
	"+p\xae\xf5\xa9^\x9fs\xa1\x9bX\xed\xfeZ\xaf\x1a" +
	"\xc3\xdd\x10\xcd\x9d\x90R\x00%UJ D\xab\xc8\xc0" +
	"\x0b\x15m\x9bL\x0c\xb4\xc5\x04\xe1q\x0cxi\xa5\x0d" +
	"\xb3\x89\x81\xd6\x98\xc0\xa0\xd5\x1e\xe03*U+\x89\x81" +
	"\xce1\x81\xa4e\x01\xb0vAf\xec\xa1J31\xd0" +
	"\x12\x13\x18\xb5\x11\x06\xb8\xd3i\x01\xca\xcb7-u\xab" +
	"\xf5\xa8b\x11\x04\x1c\xaaK\xf5\xab\x15>\"\xb1?\xb9" +
	"/\x88i\xb1\xea\xd6\xfe.s\xc2B73\x98\x14\xc1" +
	"R\xbb\xc3Q\xa6\xda]EP\x0a\x10\xf0U\xdb\xeb\xdd" +
	"\xaa\x97G-\x14%\x9b\xba\xd0\xe9\xf3{\x1bFy\xd9" +
	"\x0f\xd5\x1bz>\xd4\xa6Z}\xe8\xdfn\xa2\x8dJ\x8d" +
	"\xf2\xaaU\x9e:\xb5\xcc_\xebu4\xd8\xd4\x05\xf1\xa3" +
	"\x1d\xa2$\xb0@\x8bG\x0f\xec\xf5\xb1t5P\xe26" +
	"\x07\xff\x0c\xa1)\xe8\xd0\xb0\xf66\xd5Wk\x12-\x96" +
	"\xf8[!\x0aT\x0a5a@\x19\xaci1\xb5\x92\x10" +
	"e\x8a\x04J\xa9\x01(@*\xe0\xc3\x99\xa8\xda\x0c\x09" +
	"\x94{\x0d@\x0d\x86T0\x10B+\xd6\x13\xa2\xdc+" +
	"\x81\xe2\x10\x9daZP\"h\xaccE\xb5\xbd\xc1\xe5" +
	"\xb1OQ\xc17\xdf\xeb\xac\xf6;=\xe0\xeeE\xb2p" +
	"\xbc\xa8^\xe69\xa9\xea\xf7H\x15\xf4\xa0\xea\x08\xa6J" +
	"\x7f\x8d\xdb\xf5\xc8m\xb8\x04\xca\x18\xc1\x03\xf9\x8d\x84(" +
	"7I\xa0\xdc\xda\xa3\x88\x90\x13\x0a\x17\xb0\xb4\x8e\x03\x8b" +
	"`\x8dq\xab\xf5\x02LtQ\xd7\x1b\xf3\xb8\x08\xa3\x8e" +
	"\x08\x97\xd3\xc7\xb1\xe7\x1bZ\x18\x94 \xf2\xaf\x8c\x05^" +
	"915T\xab\xbd\x83\x1e\xb2\x9f\xe4ri\xc8\xf2i" +
	"\xe9&\x0a\x99\x1d\x122\\C\x8bW%\xd2\x02\x1f$" +
	"\x11(\x95\x00\x92\xc3\xd3\x04\x01|\xd8\xd7\x1c/\xb5\x9b" +
	"\x99aB$\x17\xe9Er2!\xca\x0d\x12(\xe3E" +
	"k\xcdb\xbc\x96\x86\x1e\x03\x0d\x8f\x06\x04\x80\xc6s\x04" +
	"\xa6xt\xf9\xe8\xd6\xcf\xfa\x09\x13\x09\xd20{\x93\xdf" +
	"\xe3\x0dWt~\x06\x04>\xdc\xd1\xb6E\xc4@Wa" +
	"E\xe7\xe7Q\xe0\x93\x03m\xc2\xff\xd5bE\xe7g\x08" +
	"\xe0\xfd\x92:w\x13\x03U\xb1\xa2\xf3\xb3\x16\xf0#1" +
	"\x9d\xb5\x9e\x18h\x05Vt\xde\xda\x81\xf0\x1d@\x09V" +
	"\xfbI\xa6\x00\x16e\xb4\x84\x98\xd1\xe8\"\x08p\x1fh" +
	"\x0f\x18\xf8\xfc\xb5^\x08bc\x9a\xc7\xea\x0d\xf5\x00\x8e" +
	"\x1b\xe0>\x03\x9f\xd6\x19\xca\xfc\x10zHB\x05\xbf\xdb" +
	"\xd2\x10\xea\x0b\x9a\xc3\xe3e\xf2\x08!\xfe\xddd\x93\xd9" +
	"\xa7\xda]\xbd\x03?w@w1\x8f\xed\x18^\xd61" +
	"\"\xe1\x9e,\xc0\xbd_\x04\xdc\xcb=e\xa1\xe7\x0bU" +
	"\xff\x0cg\x9dz\x9b\xbd\xda^\xe9t9\xfd\x0d\xac\xc6" +
	"\xbb\xfcQ\xc5\xa2\x9d\x10%Y\x02%\xd7\x00\x01\xaf\xea" +
	"\xf3\xb8\xeaT\x07\xf0\x97$\x7f\x03\xa4\x18%\x02\x90\x12" +
	"\xa7,\xe9%u\xec\x8c\x12\x9b\xd4\xb6\xa8\xa4\xd6\x0ef" +
	"QIm\x88Jj\x9f\x155e\x1872\x8c\xf31" +
	"\x1a\xf8\xf8N)\xe21\xd1\x14\xe0\x8e\x00\xee\x09h\x08" +
	"b\x84\xdb3(\xb6\xfbr\x14\x86l\x09\x05\x8aG6" +
	"\"\xb06\xd5\xeeP\x7f\x97d\xd6\xad_\xa8R7\xe3" +
	"\x00D\x14/\x9b\x1ex\xa7\x0bmH\xaf\xbb\xce\xb7\xbb" +
	"\\\x95\xf6\xf9\x8b\x09!@\xc3\xe7\xdc\xdeT\xaf\xd8\x88" +
	"\x87*j7\xbd%\xecW\xdeZl\x85jL\xd9\x9f" +
	".\"$D\x88\xcai\x00\xd1v =V\xfd\x884" +
	"\x88t\x9c9\xba\x9dM\x17\"\xd3\xb3?\xfa\x96\x00\xa5" +
	"v\xaf)J\x94\x88\x7f\xac%\xd3\x9c.?\x8e\xb4\xdc" +
	"<\x0c\xcbU\x18\xa5\xd7?u\x9a\xf4\xdd\xc4\xe4T\xeb" +
	"\xe3&\xb4\xde\xf8\xa9[:z#\xa2GPG\xa2A" +
	"OD\\8h[\xac\x10\x1c\xb8I\xd1\xf5bA\xa1" +
	"\xeaU\xdd\xf3U,\x18\xc9\x1a\x7f;&\xcd<\x09\x14" +
	"\x97\x904N\xb4\xebo$P\xfc\xc2\xf4Z\x83\x0f\xab" +
	"%P\x96\x18\x80JR*H\x84\xd0\x06,\x9eK$" +
	"P\x1e\xean\x04\xd7\x9f\x8e\x82O\xef$&{U\xcc" +
	"\xd3)\xa0\x86&]\xc9\x13;\xe9\xf6\xeb.\x13\xc3\xb8" +
	"\x9b\xe6\xf1^\xd3d\xc8#&Exp\x0a\xd7\xca\xe3" +
	"\x0e\x0e\xc0\x7f\x86N\xec\xc3a.\x08F\xf0E\x97\xc0" +
	"\x98\xf3x\x993t\xe4\xd4\xc7o\xa3^\xd5\x8f\x1e\xf7" +
	"\xfb\xde\xc9u\xfa\x0b\x8e\xa9\xfd%PR\x0d\xb04x" +
	"fr\xc4\xa0g`\x8c\x11\xee\xc8c\x04\xf7P\xfc\xdd" +
	"\x06w\xd0\xd5\xd6\x03\x8e.;\xda\x15\xac\xb9\xa3|\xf6" +
	":U\xef\xbc\xd1\x1b\xd3z<\x02\xc6=\xdc2\x13\xd9" +
	"\xe96\xb4\x07\xe1\xb2\x9b*\xc3\xe0\xd4\xb0\xdd\x82\x80\x7f" +
	"@\x02e\x9d\x80\xedV\xd4\xf2!\x09\x94G\x05l\xb7" +
	"a\xc2\xad\x93@\xd9l\x00j4\xa6\x82\x91\x10\xba\x09" +
	"\x0f\xc2\x9b%P\x9e\xed\xcbA8\xc6\xf2\xee\xf2\xb7\xc7" +
	"\x03s\xd44\xa5y_\x9a\xbf8<J\xf1\xbd:\xf0" +
	"E4\xa5#\x88\x81&\x98\xcc\x18\xa1\xc8\xd9)!\xde" +
	"\xf9\x91\xa7\xc5\xb55\xf9n\xa3\xcc\x01\xac\x9b}#\xc2" +
	"\xc01\xa3\xbb 9|]\x185E\x0f\xec\x0e\x8f\x9c" +
	"1'\x8c\xdb\xc7\xe2\xcd~=\x1e\x98{^\xfb\xe9L" +
	"\x14\xbd*0=\x05Kw\x8d\x159Y\xea\x1e\x8bl" +
	"}Yp\x08+\xaf\xde\x9f\x8e\xb4\x90\xf6e\x1f\x12\xaf" +
	".\xd5\x87h\x89\x09\xf1@\xc3\xd7\x0c=\x8e\xbcz3" +
	"\xbe.\xe2\xfap|\x8b>\xba\x87\xf8\x96Y\xd9\x96)" +
	"\xaa\xc5V\xea\xb5X\x9b^\x8b\xc52\xe4\x92@\xb9_" +
	"(C\xb5\x18A\xbf\x04\xca\xb2\xff\x97\x8a\x135s\x85" +
	"\xc3\x01\xde\xa0\x19\x09\xe1\x1b\x1a\xe1&\xb6f\x111P" +
	"\xa7\x09\xc2\x9f\x12\x00\xbf\"\xa5s\x1a\x83\xbb\x04\x83\xf6" +
	"\x1d\x02\xf0+H\xbeK\x00I\xbbK\x06~\xd9@\xc7" +
	"\xe2{#M\x01\x9e\x91\xc4\x8c9\x19\xda3\xa0\x89\xa4" +
	"0\x98\xb5Ex\xda\x0d\"_\xd8\x1ch\xdb\x07R\x18" +
	"\x1c\xa6\"\x8b]\xbc\x03M\xa9\xf5jve\x91\x1d\xd1" +
	"\xc6\xce\xe0\xf6J\x97\xcag\xd7B\xb5\xa6V\xf5\xf9\xa3" +
	"\xb6\x8e\xb6^\xee\xaaz\x8c\xa8\xfe\xe4\x11T\xa1\xc7\x15" +
	"\xc2Un\x10\xf4O\xf3\xe5\x9e\xb2\xc2\xe0?\x826b" +
	"\x0f\xe2\xf7\xc6\xc0?O\xa0\xf9\xebYh!|W\x0f" +
	"\xfc\xca\x9d\x0e\xc1\xb0gus\xd4\xd7\x89\xbd\xb8!\x8a" +
	"?\xd9\xe9T\xf4\xbe\x0c\xd2\x09\xbdun\x9c\xd1\xc7\x1b" +
	"\xc4\x01$\x87\xaf3\xa3\x9a\x98!\xba9\x99\xeaE\x9f" +
	"\xf2\xdbc\xe0\x1f\x1a\xd0|L\xc1\xeb\xd1\xa7\xfc\xdb\x0a" +
	"\xe0\xb7\x80\xd4\x82>M\xebU*\xe9\xb8\xb3\x87M\xe7" +
	"5\x16\xce\xbe43&J\xf2\xfb\xfa\xb4[\xe1/\xf5" +
	"y\xb4\xd5]\xc6\xdaT\xbb\xc9!.\xaa\xf8g.\xc0" +
	"\xaf\xcb)\xc5(\x0c0\xc5\xecB\xbb\x9f\xb3\xf4vT" +
	"\xban\x8d\xbfp\xd3\xbe\xc6\x8a\x1a\xb5zuk\xa4s" +
	"\xb7\x12\x7f\xcf\xa5\xdf.&9\xaa$\xa7;\xbc\xb3\xe6" +
	"\x9fb\x01\xff\x9eB\xd8Y\xf3\xaf\xe4\x80\x7f\"B\x9b" +
	"\x1a\xf9\xce\x9a\x7f\xe0\x00\xfc\xa2\x9b:\xb1_\xd8\xb1_" +
	"\xf0ox\x80\x7f\xd2D+\xb0\xa8(&0j\xdf\x86" +
	"\x01\xff\xcc\x81NE\x9e\x05\xd7\xd6Kb\xf7\xd5|^" +
	"!\x85\xfcrS\xbc\x9f\x8c^[,\xb4\xb2\xcb\x8b0" +
	"z\xf8\xf7e\xc0\xbf\xdc\xa3\xb49\x88\x1e~\xbf\x01\xa1" +
	"\x97\xa3\x16\xe1}\xd8\x1c\xe8\xcdPWq\x1d\x13w\x03" +
	"\xaf!\xf6\xff\x02\x00\x00\xff\xff\xe2\xaf\xd5}"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_dca555fc76741dc1,
		Nodes: []uint64{
			0x8160512bffab76e7,
			0x83b4805dae03e8f2,
			0x84761835db7b4b72,
			0x85ec771c80e6e0c8,
			0x878b65041e4b256b,
			0x8a494f6ff8477d50,
			0x8bfbf4be38627800,
			0x8e72bd79375e1d2d,
			0x8e9be0a3d79fa1a0,
			0x8ef7e2521d75bf04,
			0x90795cbcf037983e,
			0x909369c308818d9a,
			0x9248a5211394ad54,
			0x94993c86506a5e40,
			0x968c9bfbc19ef7b4,
			0x9770dabea2ed8eec,
			0x97eb1b20191db78a,
			0x9ce5db24f2e15533,
			0xa0b906d6fc710b26,
			0xa13debdf96f982b3,
			0xa1b28339e472fc13,
			0xa401d6e1f78d1bee,
			0xa478d6877d52b582,
			0xa486cdf04fcf8d5e,
			0xa518a153042139c8,
			0xa5a3b3dedb893f64,
			0xa5c93c28ec3bff37,
			0xa677dc98cf738d70,
			0xa7cf2147d9cc59af,
			0xa80fce446e508dc8,
			0xab5a0439ab933dea,
			0xac6999ea2475399a,
			0xadb20e7070609f45,
			0xb17e199c6ccc445f,
			0xb1a05ab78bca5405,
			0xb34c006f915d9adb,
			0xb509d61df01f13a2,
			0xb8926ab3e343717f,
			0xb8af12b424211b4d,
			0xbae82bafe65fda09,
			0xbb64bbd4b54a0ac7,
			0xbb7a7a8c38cbc7e3,
			0xbcf45196f5ac9110,
			0xbda5ea8939dad29b,
			0xbdeca414321680f4,
			0xbeda141d427d4c96,
			0xc6ba4f96198a86f7,
			0xc758e2223661f240,
			0xcc40dc7cc7c948d6,
			0xcdd7d69aee2dada4,
			0xcfbee9287de720b0,
			0xd0dff216087c0481,
			0xd0e34e1c95c7ef43,
			0xd39a6074de3a2389,
			0xd5003b1d3dd318f8,
			0xdac5e8cc52a38349,
			0xdb5e06cc074d8247,
			0xdbfec66490f8d669,
			0xdd3326f2fdb223a9,
			0xdd37202c553854e2,
			0xe003d25ddc1f05c4,
			0xe509643d47807c2d,
			0xe738c734c0705648,
			0xe7f779156bdabb8e,
			0xeb1ed22a5561aae3,
			0xf3541a8011e438c3,
			0xf4b2adaeac2fc134,
			0xf5578b838b5fb688,
			0xf6821b0b4a0ed4cc,
			0xfa55621a4bbb397a,
			0xfd8477ce39853249,
		},
		Compressed: true,
	})
}
