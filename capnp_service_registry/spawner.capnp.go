// Code generated by capnpc-go. DO NOT EDIT.

package capnp_service_registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type ResolvableServiceRequest capnp.Struct

// ResolvableServiceRequest_TypeID is the unique identifier for the type ResolvableServiceRequest.
const ResolvableServiceRequest_TypeID = 0xdac5e8cc52a38349

func NewResolvableServiceRequest(s *capnp.Segment) (ResolvableServiceRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ResolvableServiceRequest(st), err
}

func NewRootResolvableServiceRequest(s *capnp.Segment) (ResolvableServiceRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ResolvableServiceRequest(st), err
}

func ReadRootResolvableServiceRequest(msg *capnp.Message) (ResolvableServiceRequest, error) {
	root, err := msg.Root()
	return ResolvableServiceRequest(root.Struct()), err
}

func (s ResolvableServiceRequest) String() string {
	str, _ := text.Marshal(0xdac5e8cc52a38349, capnp.Struct(s))
	return str
}

func (s ResolvableServiceRequest) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ResolvableServiceRequest) DecodeFromPtr(p capnp.Ptr) ResolvableServiceRequest {
	return ResolvableServiceRequest(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ResolvableServiceRequest) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ResolvableServiceRequest) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ResolvableServiceRequest) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ResolvableServiceRequest) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ResolvableServiceRequest) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ResolvableServiceRequest) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ResolvableServiceRequest) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ResolvableServiceRequest) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ResolvableServiceRequest) Payload() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ResolvableServiceRequest) HasPayload() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ResolvableServiceRequest) PayloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ResolvableServiceRequest) SetPayload(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ResolvableServiceRequest_List is a list of ResolvableServiceRequest.
type ResolvableServiceRequest_List = capnp.StructList[ResolvableServiceRequest]

// NewResolvableServiceRequest creates a new list of ResolvableServiceRequest.
func NewResolvableServiceRequest_List(s *capnp.Segment, sz int32) (ResolvableServiceRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ResolvableServiceRequest](l), err
}

// ResolvableServiceRequest_Future is a wrapper for a ResolvableServiceRequest promised by a client call.
type ResolvableServiceRequest_Future struct{ *capnp.Future }

func (f ResolvableServiceRequest_Future) Struct() (ResolvableServiceRequest, error) {
	p, err := f.Future.Ptr()
	return ResolvableServiceRequest(p.Struct()), err
}

type ServiceResolver capnp.Client

// ServiceResolver_TypeID is the unique identifier for the type ServiceResolver.
const ServiceResolver_TypeID = 0xa1b28339e472fc13

func (c ServiceResolver) GetLiveCapability(ctx context.Context, params func(ServiceResolver_getLiveCapability_Params) error) (ServiceResolver_getLiveCapability_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa1b28339e472fc13,
			MethodID:      0,
			InterfaceName: "spawner.capnp:ServiceResolver",
			MethodName:    "getLiveCapability",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceResolver_getLiveCapability_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceResolver_getLiveCapability_Results_Future{Future: ans.Future()}, release

}

func (c ServiceResolver) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServiceResolver) String() string {
	return "ServiceResolver(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServiceResolver) AddRef() ServiceResolver {
	return ServiceResolver(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServiceResolver) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServiceResolver) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServiceResolver) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServiceResolver) DecodeFromPtr(p capnp.Ptr) ServiceResolver {
	return ServiceResolver(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServiceResolver) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServiceResolver) IsSame(other ServiceResolver) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServiceResolver) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServiceResolver) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ServiceResolver_Server is a ServiceResolver with a local implementation.
type ServiceResolver_Server interface {
	GetLiveCapability(context.Context, ServiceResolver_getLiveCapability) error
}

// ServiceResolver_NewServer creates a new Server from an implementation of ServiceResolver_Server.
func ServiceResolver_NewServer(s ServiceResolver_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceResolver_Methods(nil, s), s, c)
}

// ServiceResolver_ServerToClient creates a new Client from an implementation of ServiceResolver_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceResolver_ServerToClient(s ServiceResolver_Server) ServiceResolver {
	return ServiceResolver(capnp.NewClient(ServiceResolver_NewServer(s)))
}

// ServiceResolver_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceResolver_Methods(methods []server.Method, s ServiceResolver_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa1b28339e472fc13,
			MethodID:      0,
			InterfaceName: "spawner.capnp:ServiceResolver",
			MethodName:    "getLiveCapability",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetLiveCapability(ctx, ServiceResolver_getLiveCapability{call})
		},
	})

	return methods
}

// ServiceResolver_getLiveCapability holds the state for a server call to ServiceResolver.getLiveCapability.
// See server.Call for documentation.
type ServiceResolver_getLiveCapability struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceResolver_getLiveCapability) Args() ServiceResolver_getLiveCapability_Params {
	return ServiceResolver_getLiveCapability_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceResolver_getLiveCapability) AllocResults() (ServiceResolver_getLiveCapability_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_getLiveCapability_Results(r), err
}

// ServiceResolver_List is a list of ServiceResolver.
type ServiceResolver_List = capnp.CapList[ServiceResolver]

// NewServiceResolver_List creates a new list of ServiceResolver.
func NewServiceResolver_List(s *capnp.Segment, sz int32) (ServiceResolver_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceResolver](l), err
}

type ServiceResolver_getLiveCapability_Params capnp.Struct

// ServiceResolver_getLiveCapability_Params_TypeID is the unique identifier for the type ServiceResolver_getLiveCapability_Params.
const ServiceResolver_getLiveCapability_Params_TypeID = 0xdd37202c553854e2

func NewServiceResolver_getLiveCapability_Params(s *capnp.Segment) (ServiceResolver_getLiveCapability_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_getLiveCapability_Params(st), err
}

func NewRootServiceResolver_getLiveCapability_Params(s *capnp.Segment) (ServiceResolver_getLiveCapability_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_getLiveCapability_Params(st), err
}

func ReadRootServiceResolver_getLiveCapability_Params(msg *capnp.Message) (ServiceResolver_getLiveCapability_Params, error) {
	root, err := msg.Root()
	return ServiceResolver_getLiveCapability_Params(root.Struct()), err
}

func (s ServiceResolver_getLiveCapability_Params) String() string {
	str, _ := text.Marshal(0xdd37202c553854e2, capnp.Struct(s))
	return str
}

func (s ServiceResolver_getLiveCapability_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceResolver_getLiveCapability_Params) DecodeFromPtr(p capnp.Ptr) ServiceResolver_getLiveCapability_Params {
	return ServiceResolver_getLiveCapability_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceResolver_getLiveCapability_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceResolver_getLiveCapability_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceResolver_getLiveCapability_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceResolver_getLiveCapability_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceResolver_getLiveCapability_Params) Request() (ResolvableServiceRequest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ResolvableServiceRequest(p.Struct()), err
}

func (s ServiceResolver_getLiveCapability_Params) HasRequest() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceResolver_getLiveCapability_Params) SetRequest(v ResolvableServiceRequest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRequest sets the request field to a newly
// allocated ResolvableServiceRequest struct, preferring placement in s's segment.
func (s ServiceResolver_getLiveCapability_Params) NewRequest() (ResolvableServiceRequest, error) {
	ss, err := NewResolvableServiceRequest(capnp.Struct(s).Segment())
	if err != nil {
		return ResolvableServiceRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServiceResolver_getLiveCapability_Params_List is a list of ServiceResolver_getLiveCapability_Params.
type ServiceResolver_getLiveCapability_Params_List = capnp.StructList[ServiceResolver_getLiveCapability_Params]

// NewServiceResolver_getLiveCapability_Params creates a new list of ServiceResolver_getLiveCapability_Params.
func NewServiceResolver_getLiveCapability_Params_List(s *capnp.Segment, sz int32) (ServiceResolver_getLiveCapability_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceResolver_getLiveCapability_Params](l), err
}

// ServiceResolver_getLiveCapability_Params_Future is a wrapper for a ServiceResolver_getLiveCapability_Params promised by a client call.
type ServiceResolver_getLiveCapability_Params_Future struct{ *capnp.Future }

func (f ServiceResolver_getLiveCapability_Params_Future) Struct() (ServiceResolver_getLiveCapability_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceResolver_getLiveCapability_Params(p.Struct()), err
}
func (p ServiceResolver_getLiveCapability_Params_Future) Request() ResolvableServiceRequest_Future {
	return ResolvableServiceRequest_Future{Future: p.Future.Field(0, nil)}
}

type ServiceResolver_getLiveCapability_Results capnp.Struct

// ServiceResolver_getLiveCapability_Results_TypeID is the unique identifier for the type ServiceResolver_getLiveCapability_Results.
const ServiceResolver_getLiveCapability_Results_TypeID = 0xdb5e06cc074d8247

func NewServiceResolver_getLiveCapability_Results(s *capnp.Segment) (ServiceResolver_getLiveCapability_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_getLiveCapability_Results(st), err
}

func NewRootServiceResolver_getLiveCapability_Results(s *capnp.Segment) (ServiceResolver_getLiveCapability_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceResolver_getLiveCapability_Results(st), err
}

func ReadRootServiceResolver_getLiveCapability_Results(msg *capnp.Message) (ServiceResolver_getLiveCapability_Results, error) {
	root, err := msg.Root()
	return ServiceResolver_getLiveCapability_Results(root.Struct()), err
}

func (s ServiceResolver_getLiveCapability_Results) String() string {
	str, _ := text.Marshal(0xdb5e06cc074d8247, capnp.Struct(s))
	return str
}

func (s ServiceResolver_getLiveCapability_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceResolver_getLiveCapability_Results) DecodeFromPtr(p capnp.Ptr) ServiceResolver_getLiveCapability_Results {
	return ServiceResolver_getLiveCapability_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceResolver_getLiveCapability_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceResolver_getLiveCapability_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceResolver_getLiveCapability_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceResolver_getLiveCapability_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceResolver_getLiveCapability_Results) ResolvedCapability() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s ServiceResolver_getLiveCapability_Results) HasResolvedCapability() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceResolver_getLiveCapability_Results) SetResolvedCapability(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ServiceResolver_getLiveCapability_Results_List is a list of ServiceResolver_getLiveCapability_Results.
type ServiceResolver_getLiveCapability_Results_List = capnp.StructList[ServiceResolver_getLiveCapability_Results]

// NewServiceResolver_getLiveCapability_Results creates a new list of ServiceResolver_getLiveCapability_Results.
func NewServiceResolver_getLiveCapability_Results_List(s *capnp.Segment, sz int32) (ServiceResolver_getLiveCapability_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceResolver_getLiveCapability_Results](l), err
}

// ServiceResolver_getLiveCapability_Results_Future is a wrapper for a ServiceResolver_getLiveCapability_Results promised by a client call.
type ServiceResolver_getLiveCapability_Results_Future struct{ *capnp.Future }

func (f ServiceResolver_getLiveCapability_Results_Future) Struct() (ServiceResolver_getLiveCapability_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceResolver_getLiveCapability_Results(p.Struct()), err
}
func (p ServiceResolver_getLiveCapability_Results_Future) ResolvedCapability() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type ServiceDescription capnp.Struct

// ServiceDescription_TypeID is the unique identifier for the type ServiceDescription.
const ServiceDescription_TypeID = 0xb17e199c6ccc445f

func NewServiceDescription(s *capnp.Segment) (ServiceDescription, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ServiceDescription(st), err
}

func NewRootServiceDescription(s *capnp.Segment) (ServiceDescription, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ServiceDescription(st), err
}

func ReadRootServiceDescription(msg *capnp.Message) (ServiceDescription, error) {
	root, err := msg.Root()
	return ServiceDescription(root.Struct()), err
}

func (s ServiceDescription) String() string {
	str, _ := text.Marshal(0xb17e199c6ccc445f, capnp.Struct(s))
	return str
}

func (s ServiceDescription) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceDescription) DecodeFromPtr(p capnp.Ptr) ServiceDescription {
	return ServiceDescription(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceDescription) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceDescription) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceDescription) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceDescription) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceDescription) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceDescription) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceDescription) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceDescription) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ServiceDescription) ServiceType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ServiceDescription) HasServiceType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServiceDescription) ServiceTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ServiceDescription) SetServiceType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ServiceDescription) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ServiceDescription) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ServiceDescription) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ServiceDescription) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ServiceDescription) ServiceDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s ServiceDescription) HasServiceDescription() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ServiceDescription) ServiceDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s ServiceDescription) SetServiceDescription(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// ServiceDescription_List is a list of ServiceDescription.
type ServiceDescription_List = capnp.StructList[ServiceDescription]

// NewServiceDescription creates a new list of ServiceDescription.
func NewServiceDescription_List(s *capnp.Segment, sz int32) (ServiceDescription_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[ServiceDescription](l), err
}

// ServiceDescription_Future is a wrapper for a ServiceDescription promised by a client call.
type ServiceDescription_Future struct{ *capnp.Future }

func (f ServiceDescription_Future) Struct() (ServiceDescription, error) {
	p, err := f.Future.Ptr()
	return ServiceDescription(p.Struct()), err
}

type ServiceViewer capnp.Client

// ServiceViewer_TypeID is the unique identifier for the type ServiceViewer.
const ServiceViewer_TypeID = 0xe003d25ddc1f05c4

func (c ServiceViewer) ListServices(ctx context.Context, params func(ServiceViewer_listServices_Params) error) (ServiceViewer_listServices_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe003d25ddc1f05c4,
			MethodID:      0,
			InterfaceName: "spawner.capnp:ServiceViewer",
			MethodName:    "listServices",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceViewer_listServices_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceViewer_listServices_Results_Future{Future: ans.Future()}, release

}

func (c ServiceViewer) GetServiceView(ctx context.Context, params func(ServiceViewer_getServiceView_Params) error) (ServiceViewer_getServiceView_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe003d25ddc1f05c4,
			MethodID:      1,
			InterfaceName: "spawner.capnp:ServiceViewer",
			MethodName:    "getServiceView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceViewer_getServiceView_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceViewer_getServiceView_Results_Future{Future: ans.Future()}, release

}

func (c ServiceViewer) GetResolvableService(ctx context.Context, params func(ServiceViewer_getResolvableService_Params) error) (ServiceViewer_getResolvableService_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe003d25ddc1f05c4,
			MethodID:      2,
			InterfaceName: "spawner.capnp:ServiceViewer",
			MethodName:    "getResolvableService",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ServiceViewer_getResolvableService_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ServiceViewer_getResolvableService_Results_Future{Future: ans.Future()}, release

}

func (c ServiceViewer) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ServiceViewer) String() string {
	return "ServiceViewer(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ServiceViewer) AddRef() ServiceViewer {
	return ServiceViewer(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ServiceViewer) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ServiceViewer) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ServiceViewer) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ServiceViewer) DecodeFromPtr(p capnp.Ptr) ServiceViewer {
	return ServiceViewer(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ServiceViewer) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ServiceViewer) IsSame(other ServiceViewer) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ServiceViewer) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ServiceViewer) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ServiceViewer_Server is a ServiceViewer with a local implementation.
type ServiceViewer_Server interface {
	ListServices(context.Context, ServiceViewer_listServices) error

	GetServiceView(context.Context, ServiceViewer_getServiceView) error

	GetResolvableService(context.Context, ServiceViewer_getResolvableService) error
}

// ServiceViewer_NewServer creates a new Server from an implementation of ServiceViewer_Server.
func ServiceViewer_NewServer(s ServiceViewer_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ServiceViewer_Methods(nil, s), s, c)
}

// ServiceViewer_ServerToClient creates a new Client from an implementation of ServiceViewer_Server.
// The caller is responsible for calling Release on the returned Client.
func ServiceViewer_ServerToClient(s ServiceViewer_Server) ServiceViewer {
	return ServiceViewer(capnp.NewClient(ServiceViewer_NewServer(s)))
}

// ServiceViewer_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ServiceViewer_Methods(methods []server.Method, s ServiceViewer_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe003d25ddc1f05c4,
			MethodID:      0,
			InterfaceName: "spawner.capnp:ServiceViewer",
			MethodName:    "listServices",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListServices(ctx, ServiceViewer_listServices{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe003d25ddc1f05c4,
			MethodID:      1,
			InterfaceName: "spawner.capnp:ServiceViewer",
			MethodName:    "getServiceView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceView(ctx, ServiceViewer_getServiceView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe003d25ddc1f05c4,
			MethodID:      2,
			InterfaceName: "spawner.capnp:ServiceViewer",
			MethodName:    "getResolvableService",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetResolvableService(ctx, ServiceViewer_getResolvableService{call})
		},
	})

	return methods
}

// ServiceViewer_listServices holds the state for a server call to ServiceViewer.listServices.
// See server.Call for documentation.
type ServiceViewer_listServices struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceViewer_listServices) Args() ServiceViewer_listServices_Params {
	return ServiceViewer_listServices_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceViewer_listServices) AllocResults() (ServiceViewer_listServices_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_listServices_Results(r), err
}

// ServiceViewer_getServiceView holds the state for a server call to ServiceViewer.getServiceView.
// See server.Call for documentation.
type ServiceViewer_getServiceView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceViewer_getServiceView) Args() ServiceViewer_getServiceView_Params {
	return ServiceViewer_getServiceView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceViewer_getServiceView) AllocResults() (ServiceViewer_getServiceView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getServiceView_Results(r), err
}

// ServiceViewer_getResolvableService holds the state for a server call to ServiceViewer.getResolvableService.
// See server.Call for documentation.
type ServiceViewer_getResolvableService struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ServiceViewer_getResolvableService) Args() ServiceViewer_getResolvableService_Params {
	return ServiceViewer_getResolvableService_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ServiceViewer_getResolvableService) AllocResults() (ServiceViewer_getResolvableService_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getResolvableService_Results(r), err
}

// ServiceViewer_List is a list of ServiceViewer.
type ServiceViewer_List = capnp.CapList[ServiceViewer]

// NewServiceViewer_List creates a new list of ServiceViewer.
func NewServiceViewer_List(s *capnp.Segment, sz int32) (ServiceViewer_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ServiceViewer](l), err
}

type ServiceViewer_listServices_Params capnp.Struct

// ServiceViewer_listServices_Params_TypeID is the unique identifier for the type ServiceViewer_listServices_Params.
const ServiceViewer_listServices_Params_TypeID = 0xc6ba4f96198a86f7

func NewServiceViewer_listServices_Params(s *capnp.Segment) (ServiceViewer_listServices_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_listServices_Params(st), err
}

func NewRootServiceViewer_listServices_Params(s *capnp.Segment) (ServiceViewer_listServices_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_listServices_Params(st), err
}

func ReadRootServiceViewer_listServices_Params(msg *capnp.Message) (ServiceViewer_listServices_Params, error) {
	root, err := msg.Root()
	return ServiceViewer_listServices_Params(root.Struct()), err
}

func (s ServiceViewer_listServices_Params) String() string {
	str, _ := text.Marshal(0xc6ba4f96198a86f7, capnp.Struct(s))
	return str
}

func (s ServiceViewer_listServices_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceViewer_listServices_Params) DecodeFromPtr(p capnp.Ptr) ServiceViewer_listServices_Params {
	return ServiceViewer_listServices_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceViewer_listServices_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceViewer_listServices_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceViewer_listServices_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceViewer_listServices_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceViewer_listServices_Params) ServiceType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceViewer_listServices_Params) HasServiceType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceViewer_listServices_Params) ServiceTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceViewer_listServices_Params) SetServiceType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ServiceViewer_listServices_Params_List is a list of ServiceViewer_listServices_Params.
type ServiceViewer_listServices_Params_List = capnp.StructList[ServiceViewer_listServices_Params]

// NewServiceViewer_listServices_Params creates a new list of ServiceViewer_listServices_Params.
func NewServiceViewer_listServices_Params_List(s *capnp.Segment, sz int32) (ServiceViewer_listServices_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceViewer_listServices_Params](l), err
}

// ServiceViewer_listServices_Params_Future is a wrapper for a ServiceViewer_listServices_Params promised by a client call.
type ServiceViewer_listServices_Params_Future struct{ *capnp.Future }

func (f ServiceViewer_listServices_Params_Future) Struct() (ServiceViewer_listServices_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceViewer_listServices_Params(p.Struct()), err
}

type ServiceViewer_listServices_Results capnp.Struct

// ServiceViewer_listServices_Results_TypeID is the unique identifier for the type ServiceViewer_listServices_Results.
const ServiceViewer_listServices_Results_TypeID = 0xab5a0439ab933dea

func NewServiceViewer_listServices_Results(s *capnp.Segment) (ServiceViewer_listServices_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_listServices_Results(st), err
}

func NewRootServiceViewer_listServices_Results(s *capnp.Segment) (ServiceViewer_listServices_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_listServices_Results(st), err
}

func ReadRootServiceViewer_listServices_Results(msg *capnp.Message) (ServiceViewer_listServices_Results, error) {
	root, err := msg.Root()
	return ServiceViewer_listServices_Results(root.Struct()), err
}

func (s ServiceViewer_listServices_Results) String() string {
	str, _ := text.Marshal(0xab5a0439ab933dea, capnp.Struct(s))
	return str
}

func (s ServiceViewer_listServices_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceViewer_listServices_Results) DecodeFromPtr(p capnp.Ptr) ServiceViewer_listServices_Results {
	return ServiceViewer_listServices_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceViewer_listServices_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceViewer_listServices_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceViewer_listServices_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceViewer_listServices_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceViewer_listServices_Results) Services() (ServiceDescription_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServiceDescription_List(p.List()), err
}

func (s ServiceViewer_listServices_Results) HasServices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceViewer_listServices_Results) SetServices(v ServiceDescription_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServices sets the services field to a newly
// allocated ServiceDescription_List, preferring placement in s's segment.
func (s ServiceViewer_listServices_Results) NewServices(n int32) (ServiceDescription_List, error) {
	l, err := NewServiceDescription_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ServiceDescription_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ServiceViewer_listServices_Results_List is a list of ServiceViewer_listServices_Results.
type ServiceViewer_listServices_Results_List = capnp.StructList[ServiceViewer_listServices_Results]

// NewServiceViewer_listServices_Results creates a new list of ServiceViewer_listServices_Results.
func NewServiceViewer_listServices_Results_List(s *capnp.Segment, sz int32) (ServiceViewer_listServices_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceViewer_listServices_Results](l), err
}

// ServiceViewer_listServices_Results_Future is a wrapper for a ServiceViewer_listServices_Results promised by a client call.
type ServiceViewer_listServices_Results_Future struct{ *capnp.Future }

func (f ServiceViewer_listServices_Results_Future) Struct() (ServiceViewer_listServices_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceViewer_listServices_Results(p.Struct()), err
}

type ServiceViewer_getServiceView_Params capnp.Struct

// ServiceViewer_getServiceView_Params_TypeID is the unique identifier for the type ServiceViewer_getServiceView_Params.
const ServiceViewer_getServiceView_Params_TypeID = 0xa486cdf04fcf8d5e

func NewServiceViewer_getServiceView_Params(s *capnp.Segment) (ServiceViewer_getServiceView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getServiceView_Params(st), err
}

func NewRootServiceViewer_getServiceView_Params(s *capnp.Segment) (ServiceViewer_getServiceView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getServiceView_Params(st), err
}

func ReadRootServiceViewer_getServiceView_Params(msg *capnp.Message) (ServiceViewer_getServiceView_Params, error) {
	root, err := msg.Root()
	return ServiceViewer_getServiceView_Params(root.Struct()), err
}

func (s ServiceViewer_getServiceView_Params) String() string {
	str, _ := text.Marshal(0xa486cdf04fcf8d5e, capnp.Struct(s))
	return str
}

func (s ServiceViewer_getServiceView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceViewer_getServiceView_Params) DecodeFromPtr(p capnp.Ptr) ServiceViewer_getServiceView_Params {
	return ServiceViewer_getServiceView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceViewer_getServiceView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceViewer_getServiceView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceViewer_getServiceView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceViewer_getServiceView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceViewer_getServiceView_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceViewer_getServiceView_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceViewer_getServiceView_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceViewer_getServiceView_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// ServiceViewer_getServiceView_Params_List is a list of ServiceViewer_getServiceView_Params.
type ServiceViewer_getServiceView_Params_List = capnp.StructList[ServiceViewer_getServiceView_Params]

// NewServiceViewer_getServiceView_Params creates a new list of ServiceViewer_getServiceView_Params.
func NewServiceViewer_getServiceView_Params_List(s *capnp.Segment, sz int32) (ServiceViewer_getServiceView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceViewer_getServiceView_Params](l), err
}

// ServiceViewer_getServiceView_Params_Future is a wrapper for a ServiceViewer_getServiceView_Params promised by a client call.
type ServiceViewer_getServiceView_Params_Future struct{ *capnp.Future }

func (f ServiceViewer_getServiceView_Params_Future) Struct() (ServiceViewer_getServiceView_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceViewer_getServiceView_Params(p.Struct()), err
}

type ServiceViewer_getServiceView_Results capnp.Struct

// ServiceViewer_getServiceView_Results_TypeID is the unique identifier for the type ServiceViewer_getServiceView_Results.
const ServiceViewer_getServiceView_Results_TypeID = 0xe7f779156bdabb8e

func NewServiceViewer_getServiceView_Results(s *capnp.Segment) (ServiceViewer_getServiceView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getServiceView_Results(st), err
}

func NewRootServiceViewer_getServiceView_Results(s *capnp.Segment) (ServiceViewer_getServiceView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getServiceView_Results(st), err
}

func ReadRootServiceViewer_getServiceView_Results(msg *capnp.Message) (ServiceViewer_getServiceView_Results, error) {
	root, err := msg.Root()
	return ServiceViewer_getServiceView_Results(root.Struct()), err
}

func (s ServiceViewer_getServiceView_Results) String() string {
	str, _ := text.Marshal(0xe7f779156bdabb8e, capnp.Struct(s))
	return str
}

func (s ServiceViewer_getServiceView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceViewer_getServiceView_Results) DecodeFromPtr(p capnp.Ptr) ServiceViewer_getServiceView_Results {
	return ServiceViewer_getServiceView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceViewer_getServiceView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceViewer_getServiceView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceViewer_getServiceView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceViewer_getServiceView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceViewer_getServiceView_Results) ServiceView() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s ServiceViewer_getServiceView_Results) HasServiceView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceViewer_getServiceView_Results) SetServiceView(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// ServiceViewer_getServiceView_Results_List is a list of ServiceViewer_getServiceView_Results.
type ServiceViewer_getServiceView_Results_List = capnp.StructList[ServiceViewer_getServiceView_Results]

// NewServiceViewer_getServiceView_Results creates a new list of ServiceViewer_getServiceView_Results.
func NewServiceViewer_getServiceView_Results_List(s *capnp.Segment, sz int32) (ServiceViewer_getServiceView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceViewer_getServiceView_Results](l), err
}

// ServiceViewer_getServiceView_Results_Future is a wrapper for a ServiceViewer_getServiceView_Results promised by a client call.
type ServiceViewer_getServiceView_Results_Future struct{ *capnp.Future }

func (f ServiceViewer_getServiceView_Results_Future) Struct() (ServiceViewer_getServiceView_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceViewer_getServiceView_Results(p.Struct()), err
}
func (p ServiceViewer_getServiceView_Results_Future) ServiceView() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type ServiceViewer_getResolvableService_Params capnp.Struct

// ServiceViewer_getResolvableService_Params_TypeID is the unique identifier for the type ServiceViewer_getResolvableService_Params.
const ServiceViewer_getResolvableService_Params_TypeID = 0xfdcda8c80924d69c

func NewServiceViewer_getResolvableService_Params(s *capnp.Segment) (ServiceViewer_getResolvableService_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceViewer_getResolvableService_Params(st), err
}

func NewRootServiceViewer_getResolvableService_Params(s *capnp.Segment) (ServiceViewer_getResolvableService_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ServiceViewer_getResolvableService_Params(st), err
}

func ReadRootServiceViewer_getResolvableService_Params(msg *capnp.Message) (ServiceViewer_getResolvableService_Params, error) {
	root, err := msg.Root()
	return ServiceViewer_getResolvableService_Params(root.Struct()), err
}

func (s ServiceViewer_getResolvableService_Params) String() string {
	str, _ := text.Marshal(0xfdcda8c80924d69c, capnp.Struct(s))
	return str
}

func (s ServiceViewer_getResolvableService_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceViewer_getResolvableService_Params) DecodeFromPtr(p capnp.Ptr) ServiceViewer_getResolvableService_Params {
	return ServiceViewer_getResolvableService_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceViewer_getResolvableService_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceViewer_getResolvableService_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceViewer_getResolvableService_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceViewer_getResolvableService_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceViewer_getResolvableService_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceViewer_getResolvableService_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceViewer_getResolvableService_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceViewer_getResolvableService_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ServiceViewer_getResolvableService_Params) Specification() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ServiceViewer_getResolvableService_Params) HasSpecification() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServiceViewer_getResolvableService_Params) SpecificationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ServiceViewer_getResolvableService_Params) SetSpecification(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ServiceViewer_getResolvableService_Params_List is a list of ServiceViewer_getResolvableService_Params.
type ServiceViewer_getResolvableService_Params_List = capnp.StructList[ServiceViewer_getResolvableService_Params]

// NewServiceViewer_getResolvableService_Params creates a new list of ServiceViewer_getResolvableService_Params.
func NewServiceViewer_getResolvableService_Params_List(s *capnp.Segment, sz int32) (ServiceViewer_getResolvableService_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ServiceViewer_getResolvableService_Params](l), err
}

// ServiceViewer_getResolvableService_Params_Future is a wrapper for a ServiceViewer_getResolvableService_Params promised by a client call.
type ServiceViewer_getResolvableService_Params_Future struct{ *capnp.Future }

func (f ServiceViewer_getResolvableService_Params_Future) Struct() (ServiceViewer_getResolvableService_Params, error) {
	p, err := f.Future.Ptr()
	return ServiceViewer_getResolvableService_Params(p.Struct()), err
}

type ServiceViewer_getResolvableService_Results capnp.Struct

// ServiceViewer_getResolvableService_Results_TypeID is the unique identifier for the type ServiceViewer_getResolvableService_Results.
const ServiceViewer_getResolvableService_Results_TypeID = 0xf8050e2c31bd97f3

func NewServiceViewer_getResolvableService_Results(s *capnp.Segment) (ServiceViewer_getResolvableService_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getResolvableService_Results(st), err
}

func NewRootServiceViewer_getResolvableService_Results(s *capnp.Segment) (ServiceViewer_getResolvableService_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceViewer_getResolvableService_Results(st), err
}

func ReadRootServiceViewer_getResolvableService_Results(msg *capnp.Message) (ServiceViewer_getResolvableService_Results, error) {
	root, err := msg.Root()
	return ServiceViewer_getResolvableService_Results(root.Struct()), err
}

func (s ServiceViewer_getResolvableService_Results) String() string {
	str, _ := text.Marshal(0xf8050e2c31bd97f3, capnp.Struct(s))
	return str
}

func (s ServiceViewer_getResolvableService_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceViewer_getResolvableService_Results) DecodeFromPtr(p capnp.Ptr) ServiceViewer_getResolvableService_Results {
	return ServiceViewer_getResolvableService_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceViewer_getResolvableService_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceViewer_getResolvableService_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceViewer_getResolvableService_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceViewer_getResolvableService_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceViewer_getResolvableService_Results) Service() (ResolvableServiceRequest, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ResolvableServiceRequest(p.Struct()), err
}

func (s ServiceViewer_getResolvableService_Results) HasService() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceViewer_getResolvableService_Results) SetService(v ResolvableServiceRequest) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewService sets the service field to a newly
// allocated ResolvableServiceRequest struct, preferring placement in s's segment.
func (s ServiceViewer_getResolvableService_Results) NewService() (ResolvableServiceRequest, error) {
	ss, err := NewResolvableServiceRequest(capnp.Struct(s).Segment())
	if err != nil {
		return ResolvableServiceRequest{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ServiceViewer_getResolvableService_Results_List is a list of ServiceViewer_getResolvableService_Results.
type ServiceViewer_getResolvableService_Results_List = capnp.StructList[ServiceViewer_getResolvableService_Results]

// NewServiceViewer_getResolvableService_Results creates a new list of ServiceViewer_getResolvableService_Results.
func NewServiceViewer_getResolvableService_Results_List(s *capnp.Segment, sz int32) (ServiceViewer_getResolvableService_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ServiceViewer_getResolvableService_Results](l), err
}

// ServiceViewer_getResolvableService_Results_Future is a wrapper for a ServiceViewer_getResolvableService_Results promised by a client call.
type ServiceViewer_getResolvableService_Results_Future struct{ *capnp.Future }

func (f ServiceViewer_getResolvableService_Results_Future) Struct() (ServiceViewer_getResolvableService_Results, error) {
	p, err := f.Future.Ptr()
	return ServiceViewer_getResolvableService_Results(p.Struct()), err
}
func (p ServiceViewer_getResolvableService_Results_Future) Service() ResolvableServiceRequest_Future {
	return ResolvableServiceRequest_Future{Future: p.Future.Field(0, nil)}
}
