// Code generated by capnpc-go. DO NOT EDIT.

package capnp_service_registry

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type SturdyRefAdminView capnp.Struct

// SturdyRefAdminView_TypeID is the unique identifier for the type SturdyRefAdminView.
const SturdyRefAdminView_TypeID = 0xbb7a7a8c38cbc7e3

func NewSturdyRefAdminView(s *capnp.Segment) (SturdyRefAdminView, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return SturdyRefAdminView(st), err
}

func NewRootSturdyRefAdminView(s *capnp.Segment) (SturdyRefAdminView, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return SturdyRefAdminView(st), err
}

func ReadRootSturdyRefAdminView(msg *capnp.Message) (SturdyRefAdminView, error) {
	root, err := msg.Root()
	return SturdyRefAdminView(root.Struct()), err
}

func (s SturdyRefAdminView) String() string {
	str, _ := text.Marshal(0xbb7a7a8c38cbc7e3, capnp.Struct(s))
	return str
}

func (s SturdyRefAdminView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRefAdminView) DecodeFromPtr(p capnp.Ptr) SturdyRefAdminView {
	return SturdyRefAdminView(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRefAdminView) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRefAdminView) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRefAdminView) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRefAdminView) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRefAdminView) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRefAdminView) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRefAdminView) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRefAdminView) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRefAdminView) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SturdyRefAdminView) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRefAdminView) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SturdyRefAdminView) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SturdyRefAdminView) Payload() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SturdyRefAdminView) HasPayload() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SturdyRefAdminView) PayloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SturdyRefAdminView) SetPayload(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s SturdyRefAdminView) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s SturdyRefAdminView) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s SturdyRefAdminView) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s SturdyRefAdminView) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s SturdyRefAdminView) PayloaDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s SturdyRefAdminView) HasPayloaDescription() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s SturdyRefAdminView) PayloaDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s SturdyRefAdminView) SetPayloaDescription(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

// SturdyRefAdminView_List is a list of SturdyRefAdminView.
type SturdyRefAdminView_List = capnp.StructList[SturdyRefAdminView]

// NewSturdyRefAdminView creates a new list of SturdyRefAdminView.
func NewSturdyRefAdminView_List(s *capnp.Segment, sz int32) (SturdyRefAdminView_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[SturdyRefAdminView](l), err
}

// SturdyRefAdminView_Future is a wrapper for a SturdyRefAdminView promised by a client call.
type SturdyRefAdminView_Future struct{ *capnp.Future }

func (f SturdyRefAdminView_Future) Struct() (SturdyRefAdminView, error) {
	p, err := f.Future.Ptr()
	return SturdyRefAdminView(p.Struct()), err
}

type ServiceReference capnp.Struct

// ServiceReference_TypeID is the unique identifier for the type ServiceReference.
const ServiceReference_TypeID = 0xac6999ea2475399a

func NewServiceReference(s *capnp.Segment) (ServiceReference, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ServiceReference(st), err
}

func NewRootServiceReference(s *capnp.Segment) (ServiceReference, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ServiceReference(st), err
}

func ReadRootServiceReference(msg *capnp.Message) (ServiceReference, error) {
	root, err := msg.Root()
	return ServiceReference(root.Struct()), err
}

func (s ServiceReference) String() string {
	str, _ := text.Marshal(0xac6999ea2475399a, capnp.Struct(s))
	return str
}

func (s ServiceReference) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ServiceReference) DecodeFromPtr(p capnp.Ptr) ServiceReference {
	return ServiceReference(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ServiceReference) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ServiceReference) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ServiceReference) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ServiceReference) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ServiceReference) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ServiceReference) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ServiceReference) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceReference) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ServiceReference) ServiceType() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ServiceReference) HasServiceType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ServiceReference) ServiceTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ServiceReference) SetServiceType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ServiceReference) ServiceName() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ServiceReference) HasServiceName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ServiceReference) ServiceNameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ServiceReference) SetServiceName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ServiceReference) ServiceDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s ServiceReference) HasServiceDescription() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ServiceReference) ServiceDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s ServiceReference) SetServiceDescription(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// ServiceReference_List is a list of ServiceReference.
type ServiceReference_List = capnp.StructList[ServiceReference]

// NewServiceReference creates a new list of ServiceReference.
func NewServiceReference_List(s *capnp.Segment, sz int32) (ServiceReference_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[ServiceReference](l), err
}

// ServiceReference_Future is a wrapper for a ServiceReference promised by a client call.
type ServiceReference_Future struct{ *capnp.Future }

func (f ServiceReference_Future) Struct() (ServiceReference, error) {
	p, err := f.Future.Ptr()
	return ServiceReference(p.Struct()), err
}

type SturdyRefUserView capnp.Struct

// SturdyRefUserView_TypeID is the unique identifier for the type SturdyRefUserView.
const SturdyRefUserView_TypeID = 0x8e72bd79375e1d2d

func NewSturdyRefUserView(s *capnp.Segment) (SturdyRefUserView, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SturdyRefUserView(st), err
}

func NewRootSturdyRefUserView(s *capnp.Segment) (SturdyRefUserView, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return SturdyRefUserView(st), err
}

func ReadRootSturdyRefUserView(msg *capnp.Message) (SturdyRefUserView, error) {
	root, err := msg.Root()
	return SturdyRefUserView(root.Struct()), err
}

func (s SturdyRefUserView) String() string {
	str, _ := text.Marshal(0x8e72bd79375e1d2d, capnp.Struct(s))
	return str
}

func (s SturdyRefUserView) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SturdyRefUserView) DecodeFromPtr(p capnp.Ptr) SturdyRefUserView {
	return SturdyRefUserView(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SturdyRefUserView) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SturdyRefUserView) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SturdyRefUserView) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SturdyRefUserView) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SturdyRefUserView) SturdyRefID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SturdyRefUserView) HasSturdyRefID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SturdyRefUserView) SturdyRefIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SturdyRefUserView) SetSturdyRefID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s SturdyRefUserView) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s SturdyRefUserView) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s SturdyRefUserView) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s SturdyRefUserView) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s SturdyRefUserView) PayloaDescription() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s SturdyRefUserView) HasPayloaDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s SturdyRefUserView) PayloaDescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s SturdyRefUserView) SetPayloaDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// SturdyRefUserView_List is a list of SturdyRefUserView.
type SturdyRefUserView_List = capnp.StructList[SturdyRefUserView]

// NewSturdyRefUserView creates a new list of SturdyRefUserView.
func NewSturdyRefUserView_List(s *capnp.Segment, sz int32) (SturdyRefUserView_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[SturdyRefUserView](l), err
}

// SturdyRefUserView_Future is a wrapper for a SturdyRefUserView promised by a client call.
type SturdyRefUserView_Future struct{ *capnp.Future }

func (f SturdyRefUserView_Future) Struct() (SturdyRefUserView, error) {
	p, err := f.Future.Ptr()
	return SturdyRefUserView(p.Struct()), err
}

type WebViewUser capnp.Client

// WebViewUser_TypeID is the unique identifier for the type WebViewUser.
const WebViewUser_TypeID = 0xd39a6074de3a2389

func (c WebViewUser) ListServices(ctx context.Context, params func(WebViewUser_listServices_Params) error) (WebViewUser_listServices_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      0,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "listServices",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewUser_listServices_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewUser_listServices_Results_Future{Future: ans.Future()}, release

}

func (c WebViewUser) GetServiceView(ctx context.Context, params func(WebViewUser_getServiceView_Params) error) (WebViewUser_getServiceView_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      1,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "getServiceView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewUser_getServiceView_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewUser_getServiceView_Results_Future{Future: ans.Future()}, release

}

func (c WebViewUser) NewSturdyRef(ctx context.Context, params func(WebViewUser_newSturdyRef_Params) error) (WebViewUser_newSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      2,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "newSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewUser_newSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewUser_newSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c WebViewUser) RemoveSturdyRef(ctx context.Context, params func(WebViewUser_removeSturdyRef_Params) error) (WebViewUser_removeSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      3,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "removeSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewUser_removeSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewUser_removeSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c WebViewUser) ListSturdyRefs(ctx context.Context, params func(WebViewUser_listSturdyRefs_Params) error) (WebViewUser_listSturdyRefs_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      4,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "listSturdyRefs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewUser_listSturdyRefs_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewUser_listSturdyRefs_Results_Future{Future: ans.Future()}, release

}

func (c WebViewUser) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c WebViewUser) String() string {
	return "WebViewUser(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c WebViewUser) AddRef() WebViewUser {
	return WebViewUser(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c WebViewUser) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c WebViewUser) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c WebViewUser) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebViewUser) DecodeFromPtr(p capnp.Ptr) WebViewUser {
	return WebViewUser(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c WebViewUser) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c WebViewUser) IsSame(other WebViewUser) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c WebViewUser) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c WebViewUser) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A WebViewUser_Server is a WebViewUser with a local implementation.
type WebViewUser_Server interface {
	ListServices(context.Context, WebViewUser_listServices) error

	GetServiceView(context.Context, WebViewUser_getServiceView) error

	NewSturdyRef(context.Context, WebViewUser_newSturdyRef) error

	RemoveSturdyRef(context.Context, WebViewUser_removeSturdyRef) error

	ListSturdyRefs(context.Context, WebViewUser_listSturdyRefs) error
}

// WebViewUser_NewServer creates a new Server from an implementation of WebViewUser_Server.
func WebViewUser_NewServer(s WebViewUser_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebViewUser_Methods(nil, s), s, c)
}

// WebViewUser_ServerToClient creates a new Client from an implementation of WebViewUser_Server.
// The caller is responsible for calling Release on the returned Client.
func WebViewUser_ServerToClient(s WebViewUser_Server) WebViewUser {
	return WebViewUser(capnp.NewClient(WebViewUser_NewServer(s)))
}

// WebViewUser_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebViewUser_Methods(methods []server.Method, s WebViewUser_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 5)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      0,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "listServices",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListServices(ctx, WebViewUser_listServices{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      1,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "getServiceView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceView(ctx, WebViewUser_getServiceView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      2,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "newSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSturdyRef(ctx, WebViewUser_newSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      3,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "removeSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveSturdyRef(ctx, WebViewUser_removeSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd39a6074de3a2389,
			MethodID:      4,
			InterfaceName: "webview.capnp:WebViewUser",
			MethodName:    "listSturdyRefs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListSturdyRefs(ctx, WebViewUser_listSturdyRefs{call})
		},
	})

	return methods
}

// WebViewUser_listServices holds the state for a server call to WebViewUser.listServices.
// See server.Call for documentation.
type WebViewUser_listServices struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewUser_listServices) Args() WebViewUser_listServices_Params {
	return WebViewUser_listServices_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewUser_listServices) AllocResults() (WebViewUser_listServices_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listServices_Results(r), err
}

// WebViewUser_getServiceView holds the state for a server call to WebViewUser.getServiceView.
// See server.Call for documentation.
type WebViewUser_getServiceView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewUser_getServiceView) Args() WebViewUser_getServiceView_Params {
	return WebViewUser_getServiceView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewUser_getServiceView) AllocResults() (WebViewUser_getServiceView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_getServiceView_Results(r), err
}

// WebViewUser_newSturdyRef holds the state for a server call to WebViewUser.newSturdyRef.
// See server.Call for documentation.
type WebViewUser_newSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewUser_newSturdyRef) Args() WebViewUser_newSturdyRef_Params {
	return WebViewUser_newSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewUser_newSturdyRef) AllocResults() (WebViewUser_newSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_newSturdyRef_Results(r), err
}

// WebViewUser_removeSturdyRef holds the state for a server call to WebViewUser.removeSturdyRef.
// See server.Call for documentation.
type WebViewUser_removeSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewUser_removeSturdyRef) Args() WebViewUser_removeSturdyRef_Params {
	return WebViewUser_removeSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewUser_removeSturdyRef) AllocResults() (WebViewUser_removeSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewUser_removeSturdyRef_Results(r), err
}

// WebViewUser_listSturdyRefs holds the state for a server call to WebViewUser.listSturdyRefs.
// See server.Call for documentation.
type WebViewUser_listSturdyRefs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewUser_listSturdyRefs) Args() WebViewUser_listSturdyRefs_Params {
	return WebViewUser_listSturdyRefs_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewUser_listSturdyRefs) AllocResults() (WebViewUser_listSturdyRefs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listSturdyRefs_Results(r), err
}

// WebViewUser_List is a list of WebViewUser.
type WebViewUser_List = capnp.CapList[WebViewUser]

// NewWebViewUser_List creates a new list of WebViewUser.
func NewWebViewUser_List(s *capnp.Segment, sz int32) (WebViewUser_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebViewUser](l), err
}

type WebViewUser_listServices_Params capnp.Struct

// WebViewUser_listServices_Params_TypeID is the unique identifier for the type WebViewUser_listServices_Params.
const WebViewUser_listServices_Params_TypeID = 0xd5003b1d3dd318f8

func NewWebViewUser_listServices_Params(s *capnp.Segment) (WebViewUser_listServices_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listServices_Params(st), err
}

func NewRootWebViewUser_listServices_Params(s *capnp.Segment) (WebViewUser_listServices_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listServices_Params(st), err
}

func ReadRootWebViewUser_listServices_Params(msg *capnp.Message) (WebViewUser_listServices_Params, error) {
	root, err := msg.Root()
	return WebViewUser_listServices_Params(root.Struct()), err
}

func (s WebViewUser_listServices_Params) String() string {
	str, _ := text.Marshal(0xd5003b1d3dd318f8, capnp.Struct(s))
	return str
}

func (s WebViewUser_listServices_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_listServices_Params) DecodeFromPtr(p capnp.Ptr) WebViewUser_listServices_Params {
	return WebViewUser_listServices_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_listServices_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_listServices_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_listServices_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_listServices_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_listServices_Params) ServiceType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewUser_listServices_Params) HasServiceType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_listServices_Params) ServiceTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewUser_listServices_Params) SetServiceType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewUser_listServices_Params_List is a list of WebViewUser_listServices_Params.
type WebViewUser_listServices_Params_List = capnp.StructList[WebViewUser_listServices_Params]

// NewWebViewUser_listServices_Params creates a new list of WebViewUser_listServices_Params.
func NewWebViewUser_listServices_Params_List(s *capnp.Segment, sz int32) (WebViewUser_listServices_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_listServices_Params](l), err
}

// WebViewUser_listServices_Params_Future is a wrapper for a WebViewUser_listServices_Params promised by a client call.
type WebViewUser_listServices_Params_Future struct{ *capnp.Future }

func (f WebViewUser_listServices_Params_Future) Struct() (WebViewUser_listServices_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_listServices_Params(p.Struct()), err
}

type WebViewUser_listServices_Results capnp.Struct

// WebViewUser_listServices_Results_TypeID is the unique identifier for the type WebViewUser_listServices_Results.
const WebViewUser_listServices_Results_TypeID = 0xa5a3b3dedb893f64

func NewWebViewUser_listServices_Results(s *capnp.Segment) (WebViewUser_listServices_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listServices_Results(st), err
}

func NewRootWebViewUser_listServices_Results(s *capnp.Segment) (WebViewUser_listServices_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listServices_Results(st), err
}

func ReadRootWebViewUser_listServices_Results(msg *capnp.Message) (WebViewUser_listServices_Results, error) {
	root, err := msg.Root()
	return WebViewUser_listServices_Results(root.Struct()), err
}

func (s WebViewUser_listServices_Results) String() string {
	str, _ := text.Marshal(0xa5a3b3dedb893f64, capnp.Struct(s))
	return str
}

func (s WebViewUser_listServices_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_listServices_Results) DecodeFromPtr(p capnp.Ptr) WebViewUser_listServices_Results {
	return WebViewUser_listServices_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_listServices_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_listServices_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_listServices_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_listServices_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_listServices_Results) Services() (ServiceReference_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServiceReference_List(p.List()), err
}

func (s WebViewUser_listServices_Results) HasServices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_listServices_Results) SetServices(v ServiceReference_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServices sets the services field to a newly
// allocated ServiceReference_List, preferring placement in s's segment.
func (s WebViewUser_listServices_Results) NewServices(n int32) (ServiceReference_List, error) {
	l, err := NewServiceReference_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ServiceReference_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebViewUser_listServices_Results_List is a list of WebViewUser_listServices_Results.
type WebViewUser_listServices_Results_List = capnp.StructList[WebViewUser_listServices_Results]

// NewWebViewUser_listServices_Results creates a new list of WebViewUser_listServices_Results.
func NewWebViewUser_listServices_Results_List(s *capnp.Segment, sz int32) (WebViewUser_listServices_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_listServices_Results](l), err
}

// WebViewUser_listServices_Results_Future is a wrapper for a WebViewUser_listServices_Results promised by a client call.
type WebViewUser_listServices_Results_Future struct{ *capnp.Future }

func (f WebViewUser_listServices_Results_Future) Struct() (WebViewUser_listServices_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_listServices_Results(p.Struct()), err
}

type WebViewUser_getServiceView_Params capnp.Struct

// WebViewUser_getServiceView_Params_TypeID is the unique identifier for the type WebViewUser_getServiceView_Params.
const WebViewUser_getServiceView_Params_TypeID = 0x8a494f6ff8477d50

func NewWebViewUser_getServiceView_Params(s *capnp.Segment) (WebViewUser_getServiceView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_getServiceView_Params(st), err
}

func NewRootWebViewUser_getServiceView_Params(s *capnp.Segment) (WebViewUser_getServiceView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_getServiceView_Params(st), err
}

func ReadRootWebViewUser_getServiceView_Params(msg *capnp.Message) (WebViewUser_getServiceView_Params, error) {
	root, err := msg.Root()
	return WebViewUser_getServiceView_Params(root.Struct()), err
}

func (s WebViewUser_getServiceView_Params) String() string {
	str, _ := text.Marshal(0x8a494f6ff8477d50, capnp.Struct(s))
	return str
}

func (s WebViewUser_getServiceView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_getServiceView_Params) DecodeFromPtr(p capnp.Ptr) WebViewUser_getServiceView_Params {
	return WebViewUser_getServiceView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_getServiceView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_getServiceView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_getServiceView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_getServiceView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_getServiceView_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewUser_getServiceView_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_getServiceView_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewUser_getServiceView_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewUser_getServiceView_Params_List is a list of WebViewUser_getServiceView_Params.
type WebViewUser_getServiceView_Params_List = capnp.StructList[WebViewUser_getServiceView_Params]

// NewWebViewUser_getServiceView_Params creates a new list of WebViewUser_getServiceView_Params.
func NewWebViewUser_getServiceView_Params_List(s *capnp.Segment, sz int32) (WebViewUser_getServiceView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_getServiceView_Params](l), err
}

// WebViewUser_getServiceView_Params_Future is a wrapper for a WebViewUser_getServiceView_Params promised by a client call.
type WebViewUser_getServiceView_Params_Future struct{ *capnp.Future }

func (f WebViewUser_getServiceView_Params_Future) Struct() (WebViewUser_getServiceView_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_getServiceView_Params(p.Struct()), err
}

type WebViewUser_getServiceView_Results capnp.Struct

// WebViewUser_getServiceView_Results_TypeID is the unique identifier for the type WebViewUser_getServiceView_Results.
const WebViewUser_getServiceView_Results_TypeID = 0xa80fce446e508dc8

func NewWebViewUser_getServiceView_Results(s *capnp.Segment) (WebViewUser_getServiceView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_getServiceView_Results(st), err
}

func NewRootWebViewUser_getServiceView_Results(s *capnp.Segment) (WebViewUser_getServiceView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_getServiceView_Results(st), err
}

func ReadRootWebViewUser_getServiceView_Results(msg *capnp.Message) (WebViewUser_getServiceView_Results, error) {
	root, err := msg.Root()
	return WebViewUser_getServiceView_Results(root.Struct()), err
}

func (s WebViewUser_getServiceView_Results) String() string {
	str, _ := text.Marshal(0xa80fce446e508dc8, capnp.Struct(s))
	return str
}

func (s WebViewUser_getServiceView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_getServiceView_Results) DecodeFromPtr(p capnp.Ptr) WebViewUser_getServiceView_Results {
	return WebViewUser_getServiceView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_getServiceView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_getServiceView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_getServiceView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_getServiceView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_getServiceView_Results) ServiceView() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s WebViewUser_getServiceView_Results) HasServiceView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_getServiceView_Results) SetServiceView(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebViewUser_getServiceView_Results_List is a list of WebViewUser_getServiceView_Results.
type WebViewUser_getServiceView_Results_List = capnp.StructList[WebViewUser_getServiceView_Results]

// NewWebViewUser_getServiceView_Results creates a new list of WebViewUser_getServiceView_Results.
func NewWebViewUser_getServiceView_Results_List(s *capnp.Segment, sz int32) (WebViewUser_getServiceView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_getServiceView_Results](l), err
}

// WebViewUser_getServiceView_Results_Future is a wrapper for a WebViewUser_getServiceView_Results promised by a client call.
type WebViewUser_getServiceView_Results_Future struct{ *capnp.Future }

func (f WebViewUser_getServiceView_Results_Future) Struct() (WebViewUser_getServiceView_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_getServiceView_Results(p.Struct()), err
}
func (p WebViewUser_getServiceView_Results_Future) ServiceView() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type WebViewUser_newSturdyRef_Params capnp.Struct

// WebViewUser_newSturdyRef_Params_TypeID is the unique identifier for the type WebViewUser_newSturdyRef_Params.
const WebViewUser_newSturdyRef_Params_TypeID = 0x878b65041e4b256b

func NewWebViewUser_newSturdyRef_Params(s *capnp.Segment) (WebViewUser_newSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebViewUser_newSturdyRef_Params(st), err
}

func NewRootWebViewUser_newSturdyRef_Params(s *capnp.Segment) (WebViewUser_newSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebViewUser_newSturdyRef_Params(st), err
}

func ReadRootWebViewUser_newSturdyRef_Params(msg *capnp.Message) (WebViewUser_newSturdyRef_Params, error) {
	root, err := msg.Root()
	return WebViewUser_newSturdyRef_Params(root.Struct()), err
}

func (s WebViewUser_newSturdyRef_Params) String() string {
	str, _ := text.Marshal(0x878b65041e4b256b, capnp.Struct(s))
	return str
}

func (s WebViewUser_newSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_newSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) WebViewUser_newSturdyRef_Params {
	return WebViewUser_newSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_newSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_newSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_newSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_newSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_newSturdyRef_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewUser_newSturdyRef_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_newSturdyRef_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewUser_newSturdyRef_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebViewUser_newSturdyRef_Params) Specification() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebViewUser_newSturdyRef_Params) HasSpecification() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebViewUser_newSturdyRef_Params) SpecificationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebViewUser_newSturdyRef_Params) SetSpecification(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebViewUser_newSturdyRef_Params_List is a list of WebViewUser_newSturdyRef_Params.
type WebViewUser_newSturdyRef_Params_List = capnp.StructList[WebViewUser_newSturdyRef_Params]

// NewWebViewUser_newSturdyRef_Params creates a new list of WebViewUser_newSturdyRef_Params.
func NewWebViewUser_newSturdyRef_Params_List(s *capnp.Segment, sz int32) (WebViewUser_newSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebViewUser_newSturdyRef_Params](l), err
}

// WebViewUser_newSturdyRef_Params_Future is a wrapper for a WebViewUser_newSturdyRef_Params promised by a client call.
type WebViewUser_newSturdyRef_Params_Future struct{ *capnp.Future }

func (f WebViewUser_newSturdyRef_Params_Future) Struct() (WebViewUser_newSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_newSturdyRef_Params(p.Struct()), err
}

type WebViewUser_newSturdyRef_Results capnp.Struct

// WebViewUser_newSturdyRef_Results_TypeID is the unique identifier for the type WebViewUser_newSturdyRef_Results.
const WebViewUser_newSturdyRef_Results_TypeID = 0xb1a05ab78bca5405

func NewWebViewUser_newSturdyRef_Results(s *capnp.Segment) (WebViewUser_newSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_newSturdyRef_Results(st), err
}

func NewRootWebViewUser_newSturdyRef_Results(s *capnp.Segment) (WebViewUser_newSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_newSturdyRef_Results(st), err
}

func ReadRootWebViewUser_newSturdyRef_Results(msg *capnp.Message) (WebViewUser_newSturdyRef_Results, error) {
	root, err := msg.Root()
	return WebViewUser_newSturdyRef_Results(root.Struct()), err
}

func (s WebViewUser_newSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xb1a05ab78bca5405, capnp.Struct(s))
	return str
}

func (s WebViewUser_newSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_newSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) WebViewUser_newSturdyRef_Results {
	return WebViewUser_newSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_newSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_newSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_newSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_newSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_newSturdyRef_Results) SturdyRef() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewUser_newSturdyRef_Results) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_newSturdyRef_Results) SturdyRefBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewUser_newSturdyRef_Results) SetSturdyRef(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewUser_newSturdyRef_Results_List is a list of WebViewUser_newSturdyRef_Results.
type WebViewUser_newSturdyRef_Results_List = capnp.StructList[WebViewUser_newSturdyRef_Results]

// NewWebViewUser_newSturdyRef_Results creates a new list of WebViewUser_newSturdyRef_Results.
func NewWebViewUser_newSturdyRef_Results_List(s *capnp.Segment, sz int32) (WebViewUser_newSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_newSturdyRef_Results](l), err
}

// WebViewUser_newSturdyRef_Results_Future is a wrapper for a WebViewUser_newSturdyRef_Results promised by a client call.
type WebViewUser_newSturdyRef_Results_Future struct{ *capnp.Future }

func (f WebViewUser_newSturdyRef_Results_Future) Struct() (WebViewUser_newSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_newSturdyRef_Results(p.Struct()), err
}

type WebViewUser_removeSturdyRef_Params capnp.Struct

// WebViewUser_removeSturdyRef_Params_TypeID is the unique identifier for the type WebViewUser_removeSturdyRef_Params.
const WebViewUser_removeSturdyRef_Params_TypeID = 0xa401d6e1f78d1bee

func NewWebViewUser_removeSturdyRef_Params(s *capnp.Segment) (WebViewUser_removeSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_removeSturdyRef_Params(st), err
}

func NewRootWebViewUser_removeSturdyRef_Params(s *capnp.Segment) (WebViewUser_removeSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_removeSturdyRef_Params(st), err
}

func ReadRootWebViewUser_removeSturdyRef_Params(msg *capnp.Message) (WebViewUser_removeSturdyRef_Params, error) {
	root, err := msg.Root()
	return WebViewUser_removeSturdyRef_Params(root.Struct()), err
}

func (s WebViewUser_removeSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xa401d6e1f78d1bee, capnp.Struct(s))
	return str
}

func (s WebViewUser_removeSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_removeSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) WebViewUser_removeSturdyRef_Params {
	return WebViewUser_removeSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_removeSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_removeSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_removeSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_removeSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_removeSturdyRef_Params) SturdyRef() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewUser_removeSturdyRef_Params) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_removeSturdyRef_Params) SturdyRefBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewUser_removeSturdyRef_Params) SetSturdyRef(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewUser_removeSturdyRef_Params_List is a list of WebViewUser_removeSturdyRef_Params.
type WebViewUser_removeSturdyRef_Params_List = capnp.StructList[WebViewUser_removeSturdyRef_Params]

// NewWebViewUser_removeSturdyRef_Params creates a new list of WebViewUser_removeSturdyRef_Params.
func NewWebViewUser_removeSturdyRef_Params_List(s *capnp.Segment, sz int32) (WebViewUser_removeSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_removeSturdyRef_Params](l), err
}

// WebViewUser_removeSturdyRef_Params_Future is a wrapper for a WebViewUser_removeSturdyRef_Params promised by a client call.
type WebViewUser_removeSturdyRef_Params_Future struct{ *capnp.Future }

func (f WebViewUser_removeSturdyRef_Params_Future) Struct() (WebViewUser_removeSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_removeSturdyRef_Params(p.Struct()), err
}

type WebViewUser_removeSturdyRef_Results capnp.Struct

// WebViewUser_removeSturdyRef_Results_TypeID is the unique identifier for the type WebViewUser_removeSturdyRef_Results.
const WebViewUser_removeSturdyRef_Results_TypeID = 0xf3541a8011e438c3

func NewWebViewUser_removeSturdyRef_Results(s *capnp.Segment) (WebViewUser_removeSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewUser_removeSturdyRef_Results(st), err
}

func NewRootWebViewUser_removeSturdyRef_Results(s *capnp.Segment) (WebViewUser_removeSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewUser_removeSturdyRef_Results(st), err
}

func ReadRootWebViewUser_removeSturdyRef_Results(msg *capnp.Message) (WebViewUser_removeSturdyRef_Results, error) {
	root, err := msg.Root()
	return WebViewUser_removeSturdyRef_Results(root.Struct()), err
}

func (s WebViewUser_removeSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xf3541a8011e438c3, capnp.Struct(s))
	return str
}

func (s WebViewUser_removeSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_removeSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) WebViewUser_removeSturdyRef_Results {
	return WebViewUser_removeSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_removeSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_removeSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_removeSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_removeSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// WebViewUser_removeSturdyRef_Results_List is a list of WebViewUser_removeSturdyRef_Results.
type WebViewUser_removeSturdyRef_Results_List = capnp.StructList[WebViewUser_removeSturdyRef_Results]

// NewWebViewUser_removeSturdyRef_Results creates a new list of WebViewUser_removeSturdyRef_Results.
func NewWebViewUser_removeSturdyRef_Results_List(s *capnp.Segment, sz int32) (WebViewUser_removeSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[WebViewUser_removeSturdyRef_Results](l), err
}

// WebViewUser_removeSturdyRef_Results_Future is a wrapper for a WebViewUser_removeSturdyRef_Results promised by a client call.
type WebViewUser_removeSturdyRef_Results_Future struct{ *capnp.Future }

func (f WebViewUser_removeSturdyRef_Results_Future) Struct() (WebViewUser_removeSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_removeSturdyRef_Results(p.Struct()), err
}

type WebViewUser_listSturdyRefs_Params capnp.Struct

// WebViewUser_listSturdyRefs_Params_TypeID is the unique identifier for the type WebViewUser_listSturdyRefs_Params.
const WebViewUser_listSturdyRefs_Params_TypeID = 0xd5d073c5d4598b5a

func NewWebViewUser_listSturdyRefs_Params(s *capnp.Segment) (WebViewUser_listSturdyRefs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewUser_listSturdyRefs_Params(st), err
}

func NewRootWebViewUser_listSturdyRefs_Params(s *capnp.Segment) (WebViewUser_listSturdyRefs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewUser_listSturdyRefs_Params(st), err
}

func ReadRootWebViewUser_listSturdyRefs_Params(msg *capnp.Message) (WebViewUser_listSturdyRefs_Params, error) {
	root, err := msg.Root()
	return WebViewUser_listSturdyRefs_Params(root.Struct()), err
}

func (s WebViewUser_listSturdyRefs_Params) String() string {
	str, _ := text.Marshal(0xd5d073c5d4598b5a, capnp.Struct(s))
	return str
}

func (s WebViewUser_listSturdyRefs_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_listSturdyRefs_Params) DecodeFromPtr(p capnp.Ptr) WebViewUser_listSturdyRefs_Params {
	return WebViewUser_listSturdyRefs_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_listSturdyRefs_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_listSturdyRefs_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_listSturdyRefs_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_listSturdyRefs_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// WebViewUser_listSturdyRefs_Params_List is a list of WebViewUser_listSturdyRefs_Params.
type WebViewUser_listSturdyRefs_Params_List = capnp.StructList[WebViewUser_listSturdyRefs_Params]

// NewWebViewUser_listSturdyRefs_Params creates a new list of WebViewUser_listSturdyRefs_Params.
func NewWebViewUser_listSturdyRefs_Params_List(s *capnp.Segment, sz int32) (WebViewUser_listSturdyRefs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[WebViewUser_listSturdyRefs_Params](l), err
}

// WebViewUser_listSturdyRefs_Params_Future is a wrapper for a WebViewUser_listSturdyRefs_Params promised by a client call.
type WebViewUser_listSturdyRefs_Params_Future struct{ *capnp.Future }

func (f WebViewUser_listSturdyRefs_Params_Future) Struct() (WebViewUser_listSturdyRefs_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_listSturdyRefs_Params(p.Struct()), err
}

type WebViewUser_listSturdyRefs_Results capnp.Struct

// WebViewUser_listSturdyRefs_Results_TypeID is the unique identifier for the type WebViewUser_listSturdyRefs_Results.
const WebViewUser_listSturdyRefs_Results_TypeID = 0x9bef2199db618f5e

func NewWebViewUser_listSturdyRefs_Results(s *capnp.Segment) (WebViewUser_listSturdyRefs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listSturdyRefs_Results(st), err
}

func NewRootWebViewUser_listSturdyRefs_Results(s *capnp.Segment) (WebViewUser_listSturdyRefs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewUser_listSturdyRefs_Results(st), err
}

func ReadRootWebViewUser_listSturdyRefs_Results(msg *capnp.Message) (WebViewUser_listSturdyRefs_Results, error) {
	root, err := msg.Root()
	return WebViewUser_listSturdyRefs_Results(root.Struct()), err
}

func (s WebViewUser_listSturdyRefs_Results) String() string {
	str, _ := text.Marshal(0x9bef2199db618f5e, capnp.Struct(s))
	return str
}

func (s WebViewUser_listSturdyRefs_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewUser_listSturdyRefs_Results) DecodeFromPtr(p capnp.Ptr) WebViewUser_listSturdyRefs_Results {
	return WebViewUser_listSturdyRefs_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewUser_listSturdyRefs_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewUser_listSturdyRefs_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewUser_listSturdyRefs_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewUser_listSturdyRefs_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewUser_listSturdyRefs_Results) SturdyRefs() (SturdyRefUserView_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefUserView_List(p.List()), err
}

func (s WebViewUser_listSturdyRefs_Results) HasSturdyRefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewUser_listSturdyRefs_Results) SetSturdyRefs(v SturdyRefUserView_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyRefs sets the sturdyRefs field to a newly
// allocated SturdyRefUserView_List, preferring placement in s's segment.
func (s WebViewUser_listSturdyRefs_Results) NewSturdyRefs(n int32) (SturdyRefUserView_List, error) {
	l, err := NewSturdyRefUserView_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefUserView_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebViewUser_listSturdyRefs_Results_List is a list of WebViewUser_listSturdyRefs_Results.
type WebViewUser_listSturdyRefs_Results_List = capnp.StructList[WebViewUser_listSturdyRefs_Results]

// NewWebViewUser_listSturdyRefs_Results creates a new list of WebViewUser_listSturdyRefs_Results.
func NewWebViewUser_listSturdyRefs_Results_List(s *capnp.Segment, sz int32) (WebViewUser_listSturdyRefs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewUser_listSturdyRefs_Results](l), err
}

// WebViewUser_listSturdyRefs_Results_Future is a wrapper for a WebViewUser_listSturdyRefs_Results promised by a client call.
type WebViewUser_listSturdyRefs_Results_Future struct{ *capnp.Future }

func (f WebViewUser_listSturdyRefs_Results_Future) Struct() (WebViewUser_listSturdyRefs_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewUser_listSturdyRefs_Results(p.Struct()), err
}

type WebViewAdmin capnp.Client

// WebViewAdmin_TypeID is the unique identifier for the type WebViewAdmin.
const WebViewAdmin_TypeID = 0xf5578b838b5fb688

func (c WebViewAdmin) ListServices(ctx context.Context, params func(WebViewAdmin_listServices_Params) error) (WebViewAdmin_listServices_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      0,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "listServices",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewAdmin_listServices_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewAdmin_listServices_Results_Future{Future: ans.Future()}, release

}

func (c WebViewAdmin) GetServiceView(ctx context.Context, params func(WebViewAdmin_getServiceView_Params) error) (WebViewAdmin_getServiceView_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      1,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "getServiceView",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewAdmin_getServiceView_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewAdmin_getServiceView_Results_Future{Future: ans.Future()}, release

}

func (c WebViewAdmin) NewSturdyRef(ctx context.Context, params func(WebViewAdmin_newSturdyRef_Params) error) (WebViewAdmin_newSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      2,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "newSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewAdmin_newSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewAdmin_newSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c WebViewAdmin) RemoveSturdyRef(ctx context.Context, params func(WebViewAdmin_removeSturdyRef_Params) error) (WebViewAdmin_removeSturdyRef_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      3,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "removeSturdyRef",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewAdmin_removeSturdyRef_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewAdmin_removeSturdyRef_Results_Future{Future: ans.Future()}, release

}

func (c WebViewAdmin) ListAllSturdyRefs(ctx context.Context, params func(WebViewAdmin_listAllSturdyRefs_Params) error) (WebViewAdmin_listAllSturdyRefs_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      4,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "listAllSturdyRefs",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewAdmin_listAllSturdyRefs_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewAdmin_listAllSturdyRefs_Results_Future{Future: ans.Future()}, release

}

func (c WebViewAdmin) NewWebViewUser(ctx context.Context, params func(WebViewAdmin_newWebViewUser_Params) error) (WebViewAdmin_newWebViewUser_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      5,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "newWebViewUser",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(WebViewAdmin_newWebViewUser_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return WebViewAdmin_newWebViewUser_Results_Future{Future: ans.Future()}, release

}

func (c WebViewAdmin) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c WebViewAdmin) String() string {
	return "WebViewAdmin(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c WebViewAdmin) AddRef() WebViewAdmin {
	return WebViewAdmin(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c WebViewAdmin) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c WebViewAdmin) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c WebViewAdmin) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (WebViewAdmin) DecodeFromPtr(p capnp.Ptr) WebViewAdmin {
	return WebViewAdmin(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c WebViewAdmin) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c WebViewAdmin) IsSame(other WebViewAdmin) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c WebViewAdmin) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c WebViewAdmin) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A WebViewAdmin_Server is a WebViewAdmin with a local implementation.
type WebViewAdmin_Server interface {
	ListServices(context.Context, WebViewAdmin_listServices) error

	GetServiceView(context.Context, WebViewAdmin_getServiceView) error

	NewSturdyRef(context.Context, WebViewAdmin_newSturdyRef) error

	RemoveSturdyRef(context.Context, WebViewAdmin_removeSturdyRef) error

	ListAllSturdyRefs(context.Context, WebViewAdmin_listAllSturdyRefs) error

	NewWebViewUser(context.Context, WebViewAdmin_newWebViewUser) error
}

// WebViewAdmin_NewServer creates a new Server from an implementation of WebViewAdmin_Server.
func WebViewAdmin_NewServer(s WebViewAdmin_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(WebViewAdmin_Methods(nil, s), s, c)
}

// WebViewAdmin_ServerToClient creates a new Client from an implementation of WebViewAdmin_Server.
// The caller is responsible for calling Release on the returned Client.
func WebViewAdmin_ServerToClient(s WebViewAdmin_Server) WebViewAdmin {
	return WebViewAdmin(capnp.NewClient(WebViewAdmin_NewServer(s)))
}

// WebViewAdmin_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func WebViewAdmin_Methods(methods []server.Method, s WebViewAdmin_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      0,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "listServices",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListServices(ctx, WebViewAdmin_listServices{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      1,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "getServiceView",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetServiceView(ctx, WebViewAdmin_getServiceView{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      2,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "newSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewSturdyRef(ctx, WebViewAdmin_newSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      3,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "removeSturdyRef",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.RemoveSturdyRef(ctx, WebViewAdmin_removeSturdyRef{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      4,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "listAllSturdyRefs",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListAllSturdyRefs(ctx, WebViewAdmin_listAllSturdyRefs{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf5578b838b5fb688,
			MethodID:      5,
			InterfaceName: "webview.capnp:WebViewAdmin",
			MethodName:    "newWebViewUser",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.NewWebViewUser(ctx, WebViewAdmin_newWebViewUser{call})
		},
	})

	return methods
}

// WebViewAdmin_listServices holds the state for a server call to WebViewAdmin.listServices.
// See server.Call for documentation.
type WebViewAdmin_listServices struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewAdmin_listServices) Args() WebViewAdmin_listServices_Params {
	return WebViewAdmin_listServices_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewAdmin_listServices) AllocResults() (WebViewAdmin_listServices_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listServices_Results(r), err
}

// WebViewAdmin_getServiceView holds the state for a server call to WebViewAdmin.getServiceView.
// See server.Call for documentation.
type WebViewAdmin_getServiceView struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewAdmin_getServiceView) Args() WebViewAdmin_getServiceView_Params {
	return WebViewAdmin_getServiceView_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewAdmin_getServiceView) AllocResults() (WebViewAdmin_getServiceView_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_getServiceView_Results(r), err
}

// WebViewAdmin_newSturdyRef holds the state for a server call to WebViewAdmin.newSturdyRef.
// See server.Call for documentation.
type WebViewAdmin_newSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewAdmin_newSturdyRef) Args() WebViewAdmin_newSturdyRef_Params {
	return WebViewAdmin_newSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewAdmin_newSturdyRef) AllocResults() (WebViewAdmin_newSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newSturdyRef_Results(r), err
}

// WebViewAdmin_removeSturdyRef holds the state for a server call to WebViewAdmin.removeSturdyRef.
// See server.Call for documentation.
type WebViewAdmin_removeSturdyRef struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewAdmin_removeSturdyRef) Args() WebViewAdmin_removeSturdyRef_Params {
	return WebViewAdmin_removeSturdyRef_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewAdmin_removeSturdyRef) AllocResults() (WebViewAdmin_removeSturdyRef_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewAdmin_removeSturdyRef_Results(r), err
}

// WebViewAdmin_listAllSturdyRefs holds the state for a server call to WebViewAdmin.listAllSturdyRefs.
// See server.Call for documentation.
type WebViewAdmin_listAllSturdyRefs struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewAdmin_listAllSturdyRefs) Args() WebViewAdmin_listAllSturdyRefs_Params {
	return WebViewAdmin_listAllSturdyRefs_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewAdmin_listAllSturdyRefs) AllocResults() (WebViewAdmin_listAllSturdyRefs_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listAllSturdyRefs_Results(r), err
}

// WebViewAdmin_newWebViewUser holds the state for a server call to WebViewAdmin.newWebViewUser.
// See server.Call for documentation.
type WebViewAdmin_newWebViewUser struct {
	*server.Call
}

// Args returns the call's arguments.
func (c WebViewAdmin_newWebViewUser) Args() WebViewAdmin_newWebViewUser_Params {
	return WebViewAdmin_newWebViewUser_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c WebViewAdmin_newWebViewUser) AllocResults() (WebViewAdmin_newWebViewUser_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newWebViewUser_Results(r), err
}

// WebViewAdmin_List is a list of WebViewAdmin.
type WebViewAdmin_List = capnp.CapList[WebViewAdmin]

// NewWebViewAdmin_List creates a new list of WebViewAdmin.
func NewWebViewAdmin_List(s *capnp.Segment, sz int32) (WebViewAdmin_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[WebViewAdmin](l), err
}

type WebViewAdmin_listServices_Params capnp.Struct

// WebViewAdmin_listServices_Params_TypeID is the unique identifier for the type WebViewAdmin_listServices_Params.
const WebViewAdmin_listServices_Params_TypeID = 0x909369c308818d9a

func NewWebViewAdmin_listServices_Params(s *capnp.Segment) (WebViewAdmin_listServices_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listServices_Params(st), err
}

func NewRootWebViewAdmin_listServices_Params(s *capnp.Segment) (WebViewAdmin_listServices_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listServices_Params(st), err
}

func ReadRootWebViewAdmin_listServices_Params(msg *capnp.Message) (WebViewAdmin_listServices_Params, error) {
	root, err := msg.Root()
	return WebViewAdmin_listServices_Params(root.Struct()), err
}

func (s WebViewAdmin_listServices_Params) String() string {
	str, _ := text.Marshal(0x909369c308818d9a, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_listServices_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_listServices_Params) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_listServices_Params {
	return WebViewAdmin_listServices_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_listServices_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_listServices_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_listServices_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_listServices_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_listServices_Params) ServiceType() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewAdmin_listServices_Params) HasServiceType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_listServices_Params) ServiceTypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewAdmin_listServices_Params) SetServiceType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewAdmin_listServices_Params_List is a list of WebViewAdmin_listServices_Params.
type WebViewAdmin_listServices_Params_List = capnp.StructList[WebViewAdmin_listServices_Params]

// NewWebViewAdmin_listServices_Params creates a new list of WebViewAdmin_listServices_Params.
func NewWebViewAdmin_listServices_Params_List(s *capnp.Segment, sz int32) (WebViewAdmin_listServices_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_listServices_Params](l), err
}

// WebViewAdmin_listServices_Params_Future is a wrapper for a WebViewAdmin_listServices_Params promised by a client call.
type WebViewAdmin_listServices_Params_Future struct{ *capnp.Future }

func (f WebViewAdmin_listServices_Params_Future) Struct() (WebViewAdmin_listServices_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_listServices_Params(p.Struct()), err
}

type WebViewAdmin_listServices_Results capnp.Struct

// WebViewAdmin_listServices_Results_TypeID is the unique identifier for the type WebViewAdmin_listServices_Results.
const WebViewAdmin_listServices_Results_TypeID = 0xbda5ea8939dad29b

func NewWebViewAdmin_listServices_Results(s *capnp.Segment) (WebViewAdmin_listServices_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listServices_Results(st), err
}

func NewRootWebViewAdmin_listServices_Results(s *capnp.Segment) (WebViewAdmin_listServices_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listServices_Results(st), err
}

func ReadRootWebViewAdmin_listServices_Results(msg *capnp.Message) (WebViewAdmin_listServices_Results, error) {
	root, err := msg.Root()
	return WebViewAdmin_listServices_Results(root.Struct()), err
}

func (s WebViewAdmin_listServices_Results) String() string {
	str, _ := text.Marshal(0xbda5ea8939dad29b, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_listServices_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_listServices_Results) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_listServices_Results {
	return WebViewAdmin_listServices_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_listServices_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_listServices_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_listServices_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_listServices_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_listServices_Results) Services() (ServiceReference_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ServiceReference_List(p.List()), err
}

func (s WebViewAdmin_listServices_Results) HasServices() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_listServices_Results) SetServices(v ServiceReference_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewServices sets the services field to a newly
// allocated ServiceReference_List, preferring placement in s's segment.
func (s WebViewAdmin_listServices_Results) NewServices(n int32) (ServiceReference_List, error) {
	l, err := NewServiceReference_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ServiceReference_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebViewAdmin_listServices_Results_List is a list of WebViewAdmin_listServices_Results.
type WebViewAdmin_listServices_Results_List = capnp.StructList[WebViewAdmin_listServices_Results]

// NewWebViewAdmin_listServices_Results creates a new list of WebViewAdmin_listServices_Results.
func NewWebViewAdmin_listServices_Results_List(s *capnp.Segment, sz int32) (WebViewAdmin_listServices_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_listServices_Results](l), err
}

// WebViewAdmin_listServices_Results_Future is a wrapper for a WebViewAdmin_listServices_Results promised by a client call.
type WebViewAdmin_listServices_Results_Future struct{ *capnp.Future }

func (f WebViewAdmin_listServices_Results_Future) Struct() (WebViewAdmin_listServices_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_listServices_Results(p.Struct()), err
}

type WebViewAdmin_getServiceView_Params capnp.Struct

// WebViewAdmin_getServiceView_Params_TypeID is the unique identifier for the type WebViewAdmin_getServiceView_Params.
const WebViewAdmin_getServiceView_Params_TypeID = 0x8160512bffab76e7

func NewWebViewAdmin_getServiceView_Params(s *capnp.Segment) (WebViewAdmin_getServiceView_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_getServiceView_Params(st), err
}

func NewRootWebViewAdmin_getServiceView_Params(s *capnp.Segment) (WebViewAdmin_getServiceView_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_getServiceView_Params(st), err
}

func ReadRootWebViewAdmin_getServiceView_Params(msg *capnp.Message) (WebViewAdmin_getServiceView_Params, error) {
	root, err := msg.Root()
	return WebViewAdmin_getServiceView_Params(root.Struct()), err
}

func (s WebViewAdmin_getServiceView_Params) String() string {
	str, _ := text.Marshal(0x8160512bffab76e7, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_getServiceView_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_getServiceView_Params) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_getServiceView_Params {
	return WebViewAdmin_getServiceView_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_getServiceView_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_getServiceView_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_getServiceView_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_getServiceView_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_getServiceView_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewAdmin_getServiceView_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_getServiceView_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewAdmin_getServiceView_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewAdmin_getServiceView_Params_List is a list of WebViewAdmin_getServiceView_Params.
type WebViewAdmin_getServiceView_Params_List = capnp.StructList[WebViewAdmin_getServiceView_Params]

// NewWebViewAdmin_getServiceView_Params creates a new list of WebViewAdmin_getServiceView_Params.
func NewWebViewAdmin_getServiceView_Params_List(s *capnp.Segment, sz int32) (WebViewAdmin_getServiceView_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_getServiceView_Params](l), err
}

// WebViewAdmin_getServiceView_Params_Future is a wrapper for a WebViewAdmin_getServiceView_Params promised by a client call.
type WebViewAdmin_getServiceView_Params_Future struct{ *capnp.Future }

func (f WebViewAdmin_getServiceView_Params_Future) Struct() (WebViewAdmin_getServiceView_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_getServiceView_Params(p.Struct()), err
}

type WebViewAdmin_getServiceView_Results capnp.Struct

// WebViewAdmin_getServiceView_Results_TypeID is the unique identifier for the type WebViewAdmin_getServiceView_Results.
const WebViewAdmin_getServiceView_Results_TypeID = 0xb8af12b424211b4d

func NewWebViewAdmin_getServiceView_Results(s *capnp.Segment) (WebViewAdmin_getServiceView_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_getServiceView_Results(st), err
}

func NewRootWebViewAdmin_getServiceView_Results(s *capnp.Segment) (WebViewAdmin_getServiceView_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_getServiceView_Results(st), err
}

func ReadRootWebViewAdmin_getServiceView_Results(msg *capnp.Message) (WebViewAdmin_getServiceView_Results, error) {
	root, err := msg.Root()
	return WebViewAdmin_getServiceView_Results(root.Struct()), err
}

func (s WebViewAdmin_getServiceView_Results) String() string {
	str, _ := text.Marshal(0xb8af12b424211b4d, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_getServiceView_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_getServiceView_Results) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_getServiceView_Results {
	return WebViewAdmin_getServiceView_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_getServiceView_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_getServiceView_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_getServiceView_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_getServiceView_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_getServiceView_Results) ServiceView() capnp.Client {
	p, _ := capnp.Struct(s).Ptr(0)
	return p.Interface().Client()
}

func (s WebViewAdmin_getServiceView_Results) HasServiceView() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_getServiceView_Results) SetServiceView(c capnp.Client) error {
	if !c.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(c))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebViewAdmin_getServiceView_Results_List is a list of WebViewAdmin_getServiceView_Results.
type WebViewAdmin_getServiceView_Results_List = capnp.StructList[WebViewAdmin_getServiceView_Results]

// NewWebViewAdmin_getServiceView_Results creates a new list of WebViewAdmin_getServiceView_Results.
func NewWebViewAdmin_getServiceView_Results_List(s *capnp.Segment, sz int32) (WebViewAdmin_getServiceView_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_getServiceView_Results](l), err
}

// WebViewAdmin_getServiceView_Results_Future is a wrapper for a WebViewAdmin_getServiceView_Results promised by a client call.
type WebViewAdmin_getServiceView_Results_Future struct{ *capnp.Future }

func (f WebViewAdmin_getServiceView_Results_Future) Struct() (WebViewAdmin_getServiceView_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_getServiceView_Results(p.Struct()), err
}
func (p WebViewAdmin_getServiceView_Results_Future) ServiceView() capnp.Client {
	return p.Future.Field(0, nil).Client()
}

type WebViewAdmin_newSturdyRef_Params capnp.Struct

// WebViewAdmin_newSturdyRef_Params_TypeID is the unique identifier for the type WebViewAdmin_newSturdyRef_Params.
const WebViewAdmin_newSturdyRef_Params_TypeID = 0xcc40dc7cc7c948d6

func NewWebViewAdmin_newSturdyRef_Params(s *capnp.Segment) (WebViewAdmin_newSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebViewAdmin_newSturdyRef_Params(st), err
}

func NewRootWebViewAdmin_newSturdyRef_Params(s *capnp.Segment) (WebViewAdmin_newSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return WebViewAdmin_newSturdyRef_Params(st), err
}

func ReadRootWebViewAdmin_newSturdyRef_Params(msg *capnp.Message) (WebViewAdmin_newSturdyRef_Params, error) {
	root, err := msg.Root()
	return WebViewAdmin_newSturdyRef_Params(root.Struct()), err
}

func (s WebViewAdmin_newSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xcc40dc7cc7c948d6, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_newSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_newSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_newSturdyRef_Params {
	return WebViewAdmin_newSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_newSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_newSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_newSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_newSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_newSturdyRef_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewAdmin_newSturdyRef_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_newSturdyRef_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewAdmin_newSturdyRef_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebViewAdmin_newSturdyRef_Params) ServiceID() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebViewAdmin_newSturdyRef_Params) HasServiceID() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebViewAdmin_newSturdyRef_Params) ServiceIDBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebViewAdmin_newSturdyRef_Params) SetServiceID(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s WebViewAdmin_newSturdyRef_Params) Specification() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s WebViewAdmin_newSturdyRef_Params) HasSpecification() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s WebViewAdmin_newSturdyRef_Params) SpecificationBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s WebViewAdmin_newSturdyRef_Params) SetSpecification(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// WebViewAdmin_newSturdyRef_Params_List is a list of WebViewAdmin_newSturdyRef_Params.
type WebViewAdmin_newSturdyRef_Params_List = capnp.StructList[WebViewAdmin_newSturdyRef_Params]

// NewWebViewAdmin_newSturdyRef_Params creates a new list of WebViewAdmin_newSturdyRef_Params.
func NewWebViewAdmin_newSturdyRef_Params_List(s *capnp.Segment, sz int32) (WebViewAdmin_newSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[WebViewAdmin_newSturdyRef_Params](l), err
}

// WebViewAdmin_newSturdyRef_Params_Future is a wrapper for a WebViewAdmin_newSturdyRef_Params promised by a client call.
type WebViewAdmin_newSturdyRef_Params_Future struct{ *capnp.Future }

func (f WebViewAdmin_newSturdyRef_Params_Future) Struct() (WebViewAdmin_newSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_newSturdyRef_Params(p.Struct()), err
}

type WebViewAdmin_newSturdyRef_Results capnp.Struct

// WebViewAdmin_newSturdyRef_Results_TypeID is the unique identifier for the type WebViewAdmin_newSturdyRef_Results.
const WebViewAdmin_newSturdyRef_Results_TypeID = 0xe738c734c0705648

func NewWebViewAdmin_newSturdyRef_Results(s *capnp.Segment) (WebViewAdmin_newSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newSturdyRef_Results(st), err
}

func NewRootWebViewAdmin_newSturdyRef_Results(s *capnp.Segment) (WebViewAdmin_newSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newSturdyRef_Results(st), err
}

func ReadRootWebViewAdmin_newSturdyRef_Results(msg *capnp.Message) (WebViewAdmin_newSturdyRef_Results, error) {
	root, err := msg.Root()
	return WebViewAdmin_newSturdyRef_Results(root.Struct()), err
}

func (s WebViewAdmin_newSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xe738c734c0705648, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_newSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_newSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_newSturdyRef_Results {
	return WebViewAdmin_newSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_newSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_newSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_newSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_newSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_newSturdyRef_Results) SturdyRef() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewAdmin_newSturdyRef_Results) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_newSturdyRef_Results) SturdyRefBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewAdmin_newSturdyRef_Results) SetSturdyRef(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewAdmin_newSturdyRef_Results_List is a list of WebViewAdmin_newSturdyRef_Results.
type WebViewAdmin_newSturdyRef_Results_List = capnp.StructList[WebViewAdmin_newSturdyRef_Results]

// NewWebViewAdmin_newSturdyRef_Results creates a new list of WebViewAdmin_newSturdyRef_Results.
func NewWebViewAdmin_newSturdyRef_Results_List(s *capnp.Segment, sz int32) (WebViewAdmin_newSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_newSturdyRef_Results](l), err
}

// WebViewAdmin_newSturdyRef_Results_Future is a wrapper for a WebViewAdmin_newSturdyRef_Results promised by a client call.
type WebViewAdmin_newSturdyRef_Results_Future struct{ *capnp.Future }

func (f WebViewAdmin_newSturdyRef_Results_Future) Struct() (WebViewAdmin_newSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_newSturdyRef_Results(p.Struct()), err
}

type WebViewAdmin_removeSturdyRef_Params capnp.Struct

// WebViewAdmin_removeSturdyRef_Params_TypeID is the unique identifier for the type WebViewAdmin_removeSturdyRef_Params.
const WebViewAdmin_removeSturdyRef_Params_TypeID = 0xa677dc98cf738d70

func NewWebViewAdmin_removeSturdyRef_Params(s *capnp.Segment) (WebViewAdmin_removeSturdyRef_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebViewAdmin_removeSturdyRef_Params(st), err
}

func NewRootWebViewAdmin_removeSturdyRef_Params(s *capnp.Segment) (WebViewAdmin_removeSturdyRef_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return WebViewAdmin_removeSturdyRef_Params(st), err
}

func ReadRootWebViewAdmin_removeSturdyRef_Params(msg *capnp.Message) (WebViewAdmin_removeSturdyRef_Params, error) {
	root, err := msg.Root()
	return WebViewAdmin_removeSturdyRef_Params(root.Struct()), err
}

func (s WebViewAdmin_removeSturdyRef_Params) String() string {
	str, _ := text.Marshal(0xa677dc98cf738d70, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_removeSturdyRef_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_removeSturdyRef_Params) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_removeSturdyRef_Params {
	return WebViewAdmin_removeSturdyRef_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_removeSturdyRef_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_removeSturdyRef_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_removeSturdyRef_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_removeSturdyRef_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_removeSturdyRef_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewAdmin_removeSturdyRef_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_removeSturdyRef_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewAdmin_removeSturdyRef_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s WebViewAdmin_removeSturdyRef_Params) SturdyRef() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s WebViewAdmin_removeSturdyRef_Params) HasSturdyRef() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s WebViewAdmin_removeSturdyRef_Params) SturdyRefBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s WebViewAdmin_removeSturdyRef_Params) SetSturdyRef(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// WebViewAdmin_removeSturdyRef_Params_List is a list of WebViewAdmin_removeSturdyRef_Params.
type WebViewAdmin_removeSturdyRef_Params_List = capnp.StructList[WebViewAdmin_removeSturdyRef_Params]

// NewWebViewAdmin_removeSturdyRef_Params creates a new list of WebViewAdmin_removeSturdyRef_Params.
func NewWebViewAdmin_removeSturdyRef_Params_List(s *capnp.Segment, sz int32) (WebViewAdmin_removeSturdyRef_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[WebViewAdmin_removeSturdyRef_Params](l), err
}

// WebViewAdmin_removeSturdyRef_Params_Future is a wrapper for a WebViewAdmin_removeSturdyRef_Params promised by a client call.
type WebViewAdmin_removeSturdyRef_Params_Future struct{ *capnp.Future }

func (f WebViewAdmin_removeSturdyRef_Params_Future) Struct() (WebViewAdmin_removeSturdyRef_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_removeSturdyRef_Params(p.Struct()), err
}

type WebViewAdmin_removeSturdyRef_Results capnp.Struct

// WebViewAdmin_removeSturdyRef_Results_TypeID is the unique identifier for the type WebViewAdmin_removeSturdyRef_Results.
const WebViewAdmin_removeSturdyRef_Results_TypeID = 0xa13debdf96f982b3

func NewWebViewAdmin_removeSturdyRef_Results(s *capnp.Segment) (WebViewAdmin_removeSturdyRef_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewAdmin_removeSturdyRef_Results(st), err
}

func NewRootWebViewAdmin_removeSturdyRef_Results(s *capnp.Segment) (WebViewAdmin_removeSturdyRef_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return WebViewAdmin_removeSturdyRef_Results(st), err
}

func ReadRootWebViewAdmin_removeSturdyRef_Results(msg *capnp.Message) (WebViewAdmin_removeSturdyRef_Results, error) {
	root, err := msg.Root()
	return WebViewAdmin_removeSturdyRef_Results(root.Struct()), err
}

func (s WebViewAdmin_removeSturdyRef_Results) String() string {
	str, _ := text.Marshal(0xa13debdf96f982b3, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_removeSturdyRef_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_removeSturdyRef_Results) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_removeSturdyRef_Results {
	return WebViewAdmin_removeSturdyRef_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_removeSturdyRef_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_removeSturdyRef_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_removeSturdyRef_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_removeSturdyRef_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// WebViewAdmin_removeSturdyRef_Results_List is a list of WebViewAdmin_removeSturdyRef_Results.
type WebViewAdmin_removeSturdyRef_Results_List = capnp.StructList[WebViewAdmin_removeSturdyRef_Results]

// NewWebViewAdmin_removeSturdyRef_Results creates a new list of WebViewAdmin_removeSturdyRef_Results.
func NewWebViewAdmin_removeSturdyRef_Results_List(s *capnp.Segment, sz int32) (WebViewAdmin_removeSturdyRef_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[WebViewAdmin_removeSturdyRef_Results](l), err
}

// WebViewAdmin_removeSturdyRef_Results_Future is a wrapper for a WebViewAdmin_removeSturdyRef_Results promised by a client call.
type WebViewAdmin_removeSturdyRef_Results_Future struct{ *capnp.Future }

func (f WebViewAdmin_removeSturdyRef_Results_Future) Struct() (WebViewAdmin_removeSturdyRef_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_removeSturdyRef_Results(p.Struct()), err
}

type WebViewAdmin_listAllSturdyRefs_Params capnp.Struct

// WebViewAdmin_listAllSturdyRefs_Params_TypeID is the unique identifier for the type WebViewAdmin_listAllSturdyRefs_Params.
const WebViewAdmin_listAllSturdyRefs_Params_TypeID = 0x90795cbcf037983e

func NewWebViewAdmin_listAllSturdyRefs_Params(s *capnp.Segment) (WebViewAdmin_listAllSturdyRefs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listAllSturdyRefs_Params(st), err
}

func NewRootWebViewAdmin_listAllSturdyRefs_Params(s *capnp.Segment) (WebViewAdmin_listAllSturdyRefs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listAllSturdyRefs_Params(st), err
}

func ReadRootWebViewAdmin_listAllSturdyRefs_Params(msg *capnp.Message) (WebViewAdmin_listAllSturdyRefs_Params, error) {
	root, err := msg.Root()
	return WebViewAdmin_listAllSturdyRefs_Params(root.Struct()), err
}

func (s WebViewAdmin_listAllSturdyRefs_Params) String() string {
	str, _ := text.Marshal(0x90795cbcf037983e, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_listAllSturdyRefs_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_listAllSturdyRefs_Params) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_listAllSturdyRefs_Params {
	return WebViewAdmin_listAllSturdyRefs_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_listAllSturdyRefs_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_listAllSturdyRefs_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_listAllSturdyRefs_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_listAllSturdyRefs_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_listAllSturdyRefs_Params) UserFilter() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.TextList(p.List()), err
}

func (s WebViewAdmin_listAllSturdyRefs_Params) HasUserFilter() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_listAllSturdyRefs_Params) SetUserFilter(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewUserFilter sets the userFilter field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s WebViewAdmin_listAllSturdyRefs_Params) NewUserFilter(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebViewAdmin_listAllSturdyRefs_Params_List is a list of WebViewAdmin_listAllSturdyRefs_Params.
type WebViewAdmin_listAllSturdyRefs_Params_List = capnp.StructList[WebViewAdmin_listAllSturdyRefs_Params]

// NewWebViewAdmin_listAllSturdyRefs_Params creates a new list of WebViewAdmin_listAllSturdyRefs_Params.
func NewWebViewAdmin_listAllSturdyRefs_Params_List(s *capnp.Segment, sz int32) (WebViewAdmin_listAllSturdyRefs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_listAllSturdyRefs_Params](l), err
}

// WebViewAdmin_listAllSturdyRefs_Params_Future is a wrapper for a WebViewAdmin_listAllSturdyRefs_Params promised by a client call.
type WebViewAdmin_listAllSturdyRefs_Params_Future struct{ *capnp.Future }

func (f WebViewAdmin_listAllSturdyRefs_Params_Future) Struct() (WebViewAdmin_listAllSturdyRefs_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_listAllSturdyRefs_Params(p.Struct()), err
}

type WebViewAdmin_listAllSturdyRefs_Results capnp.Struct

// WebViewAdmin_listAllSturdyRefs_Results_TypeID is the unique identifier for the type WebViewAdmin_listAllSturdyRefs_Results.
const WebViewAdmin_listAllSturdyRefs_Results_TypeID = 0xcfbee9287de720b0

func NewWebViewAdmin_listAllSturdyRefs_Results(s *capnp.Segment) (WebViewAdmin_listAllSturdyRefs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listAllSturdyRefs_Results(st), err
}

func NewRootWebViewAdmin_listAllSturdyRefs_Results(s *capnp.Segment) (WebViewAdmin_listAllSturdyRefs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_listAllSturdyRefs_Results(st), err
}

func ReadRootWebViewAdmin_listAllSturdyRefs_Results(msg *capnp.Message) (WebViewAdmin_listAllSturdyRefs_Results, error) {
	root, err := msg.Root()
	return WebViewAdmin_listAllSturdyRefs_Results(root.Struct()), err
}

func (s WebViewAdmin_listAllSturdyRefs_Results) String() string {
	str, _ := text.Marshal(0xcfbee9287de720b0, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_listAllSturdyRefs_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_listAllSturdyRefs_Results) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_listAllSturdyRefs_Results {
	return WebViewAdmin_listAllSturdyRefs_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_listAllSturdyRefs_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_listAllSturdyRefs_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_listAllSturdyRefs_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_listAllSturdyRefs_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_listAllSturdyRefs_Results) SturdyRefs() (SturdyRefAdminView_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return SturdyRefAdminView_List(p.List()), err
}

func (s WebViewAdmin_listAllSturdyRefs_Results) HasSturdyRefs() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_listAllSturdyRefs_Results) SetSturdyRefs(v SturdyRefAdminView_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewSturdyRefs sets the sturdyRefs field to a newly
// allocated SturdyRefAdminView_List, preferring placement in s's segment.
func (s WebViewAdmin_listAllSturdyRefs_Results) NewSturdyRefs(n int32) (SturdyRefAdminView_List, error) {
	l, err := NewSturdyRefAdminView_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return SturdyRefAdminView_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// WebViewAdmin_listAllSturdyRefs_Results_List is a list of WebViewAdmin_listAllSturdyRefs_Results.
type WebViewAdmin_listAllSturdyRefs_Results_List = capnp.StructList[WebViewAdmin_listAllSturdyRefs_Results]

// NewWebViewAdmin_listAllSturdyRefs_Results creates a new list of WebViewAdmin_listAllSturdyRefs_Results.
func NewWebViewAdmin_listAllSturdyRefs_Results_List(s *capnp.Segment, sz int32) (WebViewAdmin_listAllSturdyRefs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_listAllSturdyRefs_Results](l), err
}

// WebViewAdmin_listAllSturdyRefs_Results_Future is a wrapper for a WebViewAdmin_listAllSturdyRefs_Results promised by a client call.
type WebViewAdmin_listAllSturdyRefs_Results_Future struct{ *capnp.Future }

func (f WebViewAdmin_listAllSturdyRefs_Results_Future) Struct() (WebViewAdmin_listAllSturdyRefs_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_listAllSturdyRefs_Results(p.Struct()), err
}

type WebViewAdmin_newWebViewUser_Params capnp.Struct

// WebViewAdmin_newWebViewUser_Params_TypeID is the unique identifier for the type WebViewAdmin_newWebViewUser_Params.
const WebViewAdmin_newWebViewUser_Params_TypeID = 0x8470c2dcd7bf093d

func NewWebViewAdmin_newWebViewUser_Params(s *capnp.Segment) (WebViewAdmin_newWebViewUser_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newWebViewUser_Params(st), err
}

func NewRootWebViewAdmin_newWebViewUser_Params(s *capnp.Segment) (WebViewAdmin_newWebViewUser_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newWebViewUser_Params(st), err
}

func ReadRootWebViewAdmin_newWebViewUser_Params(msg *capnp.Message) (WebViewAdmin_newWebViewUser_Params, error) {
	root, err := msg.Root()
	return WebViewAdmin_newWebViewUser_Params(root.Struct()), err
}

func (s WebViewAdmin_newWebViewUser_Params) String() string {
	str, _ := text.Marshal(0x8470c2dcd7bf093d, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_newWebViewUser_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_newWebViewUser_Params) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_newWebViewUser_Params {
	return WebViewAdmin_newWebViewUser_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_newWebViewUser_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_newWebViewUser_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_newWebViewUser_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_newWebViewUser_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_newWebViewUser_Params) Usersignature() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s WebViewAdmin_newWebViewUser_Params) HasUsersignature() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_newWebViewUser_Params) UsersignatureBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s WebViewAdmin_newWebViewUser_Params) SetUsersignature(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// WebViewAdmin_newWebViewUser_Params_List is a list of WebViewAdmin_newWebViewUser_Params.
type WebViewAdmin_newWebViewUser_Params_List = capnp.StructList[WebViewAdmin_newWebViewUser_Params]

// NewWebViewAdmin_newWebViewUser_Params creates a new list of WebViewAdmin_newWebViewUser_Params.
func NewWebViewAdmin_newWebViewUser_Params_List(s *capnp.Segment, sz int32) (WebViewAdmin_newWebViewUser_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_newWebViewUser_Params](l), err
}

// WebViewAdmin_newWebViewUser_Params_Future is a wrapper for a WebViewAdmin_newWebViewUser_Params promised by a client call.
type WebViewAdmin_newWebViewUser_Params_Future struct{ *capnp.Future }

func (f WebViewAdmin_newWebViewUser_Params_Future) Struct() (WebViewAdmin_newWebViewUser_Params, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_newWebViewUser_Params(p.Struct()), err
}

type WebViewAdmin_newWebViewUser_Results capnp.Struct

// WebViewAdmin_newWebViewUser_Results_TypeID is the unique identifier for the type WebViewAdmin_newWebViewUser_Results.
const WebViewAdmin_newWebViewUser_Results_TypeID = 0xe71d5a32911f2529

func NewWebViewAdmin_newWebViewUser_Results(s *capnp.Segment) (WebViewAdmin_newWebViewUser_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newWebViewUser_Results(st), err
}

func NewRootWebViewAdmin_newWebViewUser_Results(s *capnp.Segment) (WebViewAdmin_newWebViewUser_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return WebViewAdmin_newWebViewUser_Results(st), err
}

func ReadRootWebViewAdmin_newWebViewUser_Results(msg *capnp.Message) (WebViewAdmin_newWebViewUser_Results, error) {
	root, err := msg.Root()
	return WebViewAdmin_newWebViewUser_Results(root.Struct()), err
}

func (s WebViewAdmin_newWebViewUser_Results) String() string {
	str, _ := text.Marshal(0xe71d5a32911f2529, capnp.Struct(s))
	return str
}

func (s WebViewAdmin_newWebViewUser_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (WebViewAdmin_newWebViewUser_Results) DecodeFromPtr(p capnp.Ptr) WebViewAdmin_newWebViewUser_Results {
	return WebViewAdmin_newWebViewUser_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s WebViewAdmin_newWebViewUser_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s WebViewAdmin_newWebViewUser_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s WebViewAdmin_newWebViewUser_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s WebViewAdmin_newWebViewUser_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s WebViewAdmin_newWebViewUser_Results) WebViewUser() WebViewUser {
	p, _ := capnp.Struct(s).Ptr(0)
	return WebViewUser(p.Interface().Client())
}

func (s WebViewAdmin_newWebViewUser_Results) HasWebViewUser() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s WebViewAdmin_newWebViewUser_Results) SetWebViewUser(v WebViewUser) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

// WebViewAdmin_newWebViewUser_Results_List is a list of WebViewAdmin_newWebViewUser_Results.
type WebViewAdmin_newWebViewUser_Results_List = capnp.StructList[WebViewAdmin_newWebViewUser_Results]

// NewWebViewAdmin_newWebViewUser_Results creates a new list of WebViewAdmin_newWebViewUser_Results.
func NewWebViewAdmin_newWebViewUser_Results_List(s *capnp.Segment, sz int32) (WebViewAdmin_newWebViewUser_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[WebViewAdmin_newWebViewUser_Results](l), err
}

// WebViewAdmin_newWebViewUser_Results_Future is a wrapper for a WebViewAdmin_newWebViewUser_Results promised by a client call.
type WebViewAdmin_newWebViewUser_Results_Future struct{ *capnp.Future }

func (f WebViewAdmin_newWebViewUser_Results_Future) Struct() (WebViewAdmin_newWebViewUser_Results, error) {
	p, err := f.Future.Ptr()
	return WebViewAdmin_newWebViewUser_Results(p.Struct()), err
}
func (p WebViewAdmin_newWebViewUser_Results_Future) WebViewUser() WebViewUser {
	return WebViewUser(p.Future.Field(0, nil).Client())
}
